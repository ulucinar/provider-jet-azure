/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DNSConfigObservation struct {
}

type DNSConfigParameters struct {

	// +kubebuilder:validation:Required
	RelativeName string `json:"relativeName" tf:"relative_name"`

	// +kubebuilder:validation:Required
	TTL int64 `json:"ttl" tf:"ttl"`
}

type MonitorConfigCustomHeaderObservation struct {
}

type MonitorConfigCustomHeaderParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Value string `json:"value" tf:"value"`
}

type MonitorConfigObservation struct {
}

type MonitorConfigParameters struct {

	// +kubebuilder:validation:Optional
	CustomHeader []MonitorConfigCustomHeaderParameters `json:"customHeader,omitempty" tf:"custom_header"`

	// +kubebuilder:validation:Optional
	ExpectedStatusCodeRanges []string `json:"expectedStatusCodeRanges,omitempty" tf:"expected_status_code_ranges"`

	// +kubebuilder:validation:Optional
	IntervalInSeconds *int64 `json:"intervalInSeconds,omitempty" tf:"interval_in_seconds"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path"`

	// +kubebuilder:validation:Required
	Port int64 `json:"port" tf:"port"`

	// +kubebuilder:validation:Required
	Protocol string `json:"protocol" tf:"protocol"`

	// +kubebuilder:validation:Optional
	TimeoutInSeconds *int64 `json:"timeoutInSeconds,omitempty" tf:"timeout_in_seconds"`

	// +kubebuilder:validation:Optional
	ToleratedNumberOfFailures *int64 `json:"toleratedNumberOfFailures,omitempty" tf:"tolerated_number_of_failures"`
}

type TrafficManagerProfileObservation struct {
	Fqdn string `json:"fqdn,omitempty" tf:"fqdn"`
}

type TrafficManagerProfileParameters struct {

	// +kubebuilder:validation:Required
	DNSConfig []DNSConfigParameters `json:"dnsConfig" tf:"dns_config"`

	// +kubebuilder:validation:Optional
	MaxReturn *int64 `json:"maxReturn,omitempty" tf:"max_return"`

	// +kubebuilder:validation:Required
	MonitorConfig []MonitorConfigParameters `json:"monitorConfig" tf:"monitor_config"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	ProfileStatus *string `json:"profileStatus,omitempty" tf:"profile_status"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	TrafficRoutingMethod string `json:"trafficRoutingMethod" tf:"traffic_routing_method"`

	// +kubebuilder:validation:Optional
	TrafficViewEnabled *bool `json:"trafficViewEnabled,omitempty" tf:"traffic_view_enabled"`
}

// TrafficManagerProfileSpec defines the desired state of TrafficManagerProfile
type TrafficManagerProfileSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       TrafficManagerProfileParameters `json:"forProvider"`
}

// TrafficManagerProfileStatus defines the observed state of TrafficManagerProfile.
type TrafficManagerProfileStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          TrafficManagerProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficManagerProfile is the Schema for the TrafficManagerProfiles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type TrafficManagerProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TrafficManagerProfileSpec   `json:"spec"`
	Status            TrafficManagerProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficManagerProfileList contains a list of TrafficManagerProfiles
type TrafficManagerProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrafficManagerProfile `json:"items"`
}

// Repository type metadata.
var (
	TrafficManagerProfileKind             = "TrafficManagerProfile"
	TrafficManagerProfileGroupKind        = schema.GroupKind{Group: Group, Kind: TrafficManagerProfileKind}.String()
	TrafficManagerProfileKindAPIVersion   = TrafficManagerProfileKind + "." + GroupVersion.String()
	TrafficManagerProfileGroupVersionKind = GroupVersion.WithKind(TrafficManagerProfileKind)
)

func init() {
	SchemeBuilder.Register(&TrafficManagerProfile{}, &TrafficManagerProfileList{})
}
