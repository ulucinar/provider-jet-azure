/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type StorageObjectReplicationObservation struct {
	DestinationObjectReplicationID string `json:"destinationObjectReplicationId,omitempty" tf:"destination_object_replication_id"`

	SourceObjectReplicationID string `json:"sourceObjectReplicationId,omitempty" tf:"source_object_replication_id"`
}

type StorageObjectReplicationParameters struct {

	// +kubebuilder:validation:Required
	DestinationStorageAccountID string `json:"destinationStorageAccountId" tf:"destination_storage_account_id"`

	// +kubebuilder:validation:Required
	Rules []StorageObjectReplicationRulesParameters `json:"rules" tf:"rules"`

	// +kubebuilder:validation:Required
	SourceStorageAccountID string `json:"sourceStorageAccountId" tf:"source_storage_account_id"`
}

type StorageObjectReplicationRulesObservation struct {
	Name string `json:"name,omitempty" tf:"name"`
}

type StorageObjectReplicationRulesParameters struct {

	// +kubebuilder:validation:Optional
	CopyBlobsCreatedAfter *string `json:"copyBlobsCreatedAfter,omitempty" tf:"copy_blobs_created_after"`

	// +kubebuilder:validation:Required
	DestinationContainerName string `json:"destinationContainerName" tf:"destination_container_name"`

	// +kubebuilder:validation:Optional
	FilterOutBlobsWithPrefix []string `json:"filterOutBlobsWithPrefix,omitempty" tf:"filter_out_blobs_with_prefix"`

	// +kubebuilder:validation:Required
	SourceContainerName string `json:"sourceContainerName" tf:"source_container_name"`
}

// StorageObjectReplicationSpec defines the desired state of StorageObjectReplication
type StorageObjectReplicationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StorageObjectReplicationParameters `json:"forProvider"`
}

// StorageObjectReplicationStatus defines the observed state of StorageObjectReplication.
type StorageObjectReplicationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StorageObjectReplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageObjectReplication is the Schema for the StorageObjectReplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type StorageObjectReplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageObjectReplicationSpec   `json:"spec"`
	Status            StorageObjectReplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageObjectReplicationList contains a list of StorageObjectReplications
type StorageObjectReplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageObjectReplication `json:"items"`
}

// Repository type metadata.
var (
	StorageObjectReplicationKind             = "StorageObjectReplication"
	StorageObjectReplicationGroupKind        = schema.GroupKind{Group: Group, Kind: StorageObjectReplicationKind}.String()
	StorageObjectReplicationKindAPIVersion   = StorageObjectReplicationKind + "." + GroupVersion.String()
	StorageObjectReplicationGroupVersionKind = GroupVersion.WithKind(StorageObjectReplicationKind)
)

func init() {
	SchemeBuilder.Register(&StorageObjectReplication{}, &StorageObjectReplicationList{})
}
