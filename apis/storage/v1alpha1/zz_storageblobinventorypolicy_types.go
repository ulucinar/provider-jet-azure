/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type FilterObservation struct {
}

type FilterParameters struct {

	// +kubebuilder:validation:Required
	BlobTypes []string `json:"blobTypes" tf:"blob_types"`

	// +kubebuilder:validation:Optional
	IncludeBlobVersions *bool `json:"includeBlobVersions,omitempty" tf:"include_blob_versions"`

	// +kubebuilder:validation:Optional
	IncludeSnapshots *bool `json:"includeSnapshots,omitempty" tf:"include_snapshots"`

	// +kubebuilder:validation:Optional
	PrefixMatch []string `json:"prefixMatch,omitempty" tf:"prefix_match"`
}

type RulesObservation struct {
}

type RulesParameters struct {

	// +kubebuilder:validation:Required
	Filter []FilterParameters `json:"filter" tf:"filter"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`
}

type StorageBlobInventoryPolicyObservation struct {
}

type StorageBlobInventoryPolicyParameters struct {

	// +kubebuilder:validation:Required
	Rules []RulesParameters `json:"rules" tf:"rules"`

	// +kubebuilder:validation:Required
	StorageAccountID string `json:"storageAccountId" tf:"storage_account_id"`

	// +kubebuilder:validation:Required
	StorageContainerName string `json:"storageContainerName" tf:"storage_container_name"`
}

// StorageBlobInventoryPolicySpec defines the desired state of StorageBlobInventoryPolicy
type StorageBlobInventoryPolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StorageBlobInventoryPolicyParameters `json:"forProvider"`
}

// StorageBlobInventoryPolicyStatus defines the observed state of StorageBlobInventoryPolicy.
type StorageBlobInventoryPolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StorageBlobInventoryPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageBlobInventoryPolicy is the Schema for the StorageBlobInventoryPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type StorageBlobInventoryPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageBlobInventoryPolicySpec   `json:"spec"`
	Status            StorageBlobInventoryPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageBlobInventoryPolicyList contains a list of StorageBlobInventoryPolicys
type StorageBlobInventoryPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageBlobInventoryPolicy `json:"items"`
}

// Repository type metadata.
var (
	StorageBlobInventoryPolicyKind             = "StorageBlobInventoryPolicy"
	StorageBlobInventoryPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: StorageBlobInventoryPolicyKind}.String()
	StorageBlobInventoryPolicyKindAPIVersion   = StorageBlobInventoryPolicyKind + "." + GroupVersion.String()
	StorageBlobInventoryPolicyGroupVersionKind = GroupVersion.WithKind(StorageBlobInventoryPolicyKind)
)

func init() {
	SchemeBuilder.Register(&StorageBlobInventoryPolicy{}, &StorageBlobInventoryPolicyList{})
}
