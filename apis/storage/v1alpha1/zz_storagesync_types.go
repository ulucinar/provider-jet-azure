/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type StorageSyncObservation struct {
}

type StorageSyncParameters struct {

	// +kubebuilder:validation:Optional
	IncomingTrafficPolicy *string `json:"incomingTrafficPolicy,omitempty" tf:"incoming_traffic_policy"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// StorageSyncSpec defines the desired state of StorageSync
type StorageSyncSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StorageSyncParameters `json:"forProvider"`
}

// StorageSyncStatus defines the observed state of StorageSync.
type StorageSyncStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StorageSyncObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageSync is the Schema for the StorageSyncs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type StorageSync struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageSyncSpec   `json:"spec"`
	Status            StorageSyncStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageSyncList contains a list of StorageSyncs
type StorageSyncList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageSync `json:"items"`
}

// Repository type metadata.
var (
	StorageSyncKind             = "StorageSync"
	StorageSyncGroupKind        = schema.GroupKind{Group: Group, Kind: StorageSyncKind}.String()
	StorageSyncKindAPIVersion   = StorageSyncKind + "." + GroupVersion.String()
	StorageSyncGroupVersionKind = GroupVersion.WithKind(StorageSyncKind)
)

func init() {
	SchemeBuilder.Register(&StorageSync{}, &StorageSyncList{})
}
