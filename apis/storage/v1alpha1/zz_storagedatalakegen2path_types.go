/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type StorageDataLakeGen2PathAceObservation struct {
}

type StorageDataLakeGen2PathAceParameters struct {

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id"`

	// +kubebuilder:validation:Required
	Permissions string `json:"permissions" tf:"permissions"`

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type StorageDataLakeGen2PathObservation struct {
}

type StorageDataLakeGen2PathParameters struct {

	// +kubebuilder:validation:Optional
	Ace []StorageDataLakeGen2PathAceParameters `json:"ace,omitempty" tf:"ace"`

	// +kubebuilder:validation:Required
	FilesystemName string `json:"filesystemName" tf:"filesystem_name"`

	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group"`

	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty" tf:"owner"`

	// +kubebuilder:validation:Required
	Path string `json:"path" tf:"path"`

	// +kubebuilder:validation:Required
	Resource string `json:"resource" tf:"resource"`

	// +kubebuilder:validation:Required
	StorageAccountID string `json:"storageAccountId" tf:"storage_account_id"`
}

// StorageDataLakeGen2PathSpec defines the desired state of StorageDataLakeGen2Path
type StorageDataLakeGen2PathSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StorageDataLakeGen2PathParameters `json:"forProvider"`
}

// StorageDataLakeGen2PathStatus defines the observed state of StorageDataLakeGen2Path.
type StorageDataLakeGen2PathStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StorageDataLakeGen2PathObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageDataLakeGen2Path is the Schema for the StorageDataLakeGen2Paths API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type StorageDataLakeGen2Path struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageDataLakeGen2PathSpec   `json:"spec"`
	Status            StorageDataLakeGen2PathStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageDataLakeGen2PathList contains a list of StorageDataLakeGen2Paths
type StorageDataLakeGen2PathList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageDataLakeGen2Path `json:"items"`
}

// Repository type metadata.
var (
	StorageDataLakeGen2PathKind             = "StorageDataLakeGen2Path"
	StorageDataLakeGen2PathGroupKind        = schema.GroupKind{Group: Group, Kind: StorageDataLakeGen2PathKind}.String()
	StorageDataLakeGen2PathKindAPIVersion   = StorageDataLakeGen2PathKind + "." + GroupVersion.String()
	StorageDataLakeGen2PathGroupVersionKind = GroupVersion.WithKind(StorageDataLakeGen2PathKind)
)

func init() {
	SchemeBuilder.Register(&StorageDataLakeGen2Path{}, &StorageDataLakeGen2PathList{})
}
