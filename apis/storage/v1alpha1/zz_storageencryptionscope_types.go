/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type StorageEncryptionScopeObservation struct {
}

type StorageEncryptionScopeParameters struct {

	// +kubebuilder:validation:Optional
	InfrastructureEncryptionRequired *bool `json:"infrastructureEncryptionRequired,omitempty" tf:"infrastructure_encryption_required"`

	// +kubebuilder:validation:Optional
	KeyVaultKeyID *string `json:"keyVaultKeyId,omitempty" tf:"key_vault_key_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Source string `json:"source" tf:"source"`

	// +kubebuilder:validation:Required
	StorageAccountID string `json:"storageAccountId" tf:"storage_account_id"`
}

// StorageEncryptionScopeSpec defines the desired state of StorageEncryptionScope
type StorageEncryptionScopeSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StorageEncryptionScopeParameters `json:"forProvider"`
}

// StorageEncryptionScopeStatus defines the observed state of StorageEncryptionScope.
type StorageEncryptionScopeStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StorageEncryptionScopeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageEncryptionScope is the Schema for the StorageEncryptionScopes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type StorageEncryptionScope struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageEncryptionScopeSpec   `json:"spec"`
	Status            StorageEncryptionScopeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageEncryptionScopeList contains a list of StorageEncryptionScopes
type StorageEncryptionScopeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageEncryptionScope `json:"items"`
}

// Repository type metadata.
var (
	StorageEncryptionScopeKind             = "StorageEncryptionScope"
	StorageEncryptionScopeGroupKind        = schema.GroupKind{Group: Group, Kind: StorageEncryptionScopeKind}.String()
	StorageEncryptionScopeKindAPIVersion   = StorageEncryptionScopeKind + "." + GroupVersion.String()
	StorageEncryptionScopeGroupVersionKind = GroupVersion.WithKind(StorageEncryptionScopeKind)
)

func init() {
	SchemeBuilder.Register(&StorageEncryptionScope{}, &StorageEncryptionScopeList{})
}
