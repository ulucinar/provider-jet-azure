/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ACLObservation struct {
}

type ACLParameters struct {

	// +kubebuilder:validation:Optional
	AccessPolicy []AccessPolicyParameters `json:"accessPolicy,omitempty" tf:"access_policy"`

	// +kubebuilder:validation:Required
	ID string `json:"id" tf:"id"`
}

type AccessPolicyObservation struct {
}

type AccessPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Expiry *string `json:"expiry,omitempty" tf:"expiry"`

	// +kubebuilder:validation:Required
	Permissions string `json:"permissions" tf:"permissions"`

	// +kubebuilder:validation:Optional
	Start *string `json:"start,omitempty" tf:"start"`
}

type StorageShareObservation struct {
	ResourceManagerID string `json:"resourceManagerId,omitempty" tf:"resource_manager_id"`

	URL string `json:"url,omitempty" tf:"url"`
}

type StorageShareParameters struct {

	// +kubebuilder:validation:Optional
	ACL []ACLParameters `json:"acl,omitempty" tf:"acl"`

	// +kubebuilder:validation:Optional
	Metadata map[string]string `json:"metadata,omitempty" tf:"metadata"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Quota *int64 `json:"quota,omitempty" tf:"quota"`

	// +kubebuilder:validation:Required
	StorageAccountName string `json:"storageAccountName" tf:"storage_account_name"`
}

// StorageShareSpec defines the desired state of StorageShare
type StorageShareSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StorageShareParameters `json:"forProvider"`
}

// StorageShareStatus defines the observed state of StorageShare.
type StorageShareStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StorageShareObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageShare is the Schema for the StorageShares API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type StorageShare struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageShareSpec   `json:"spec"`
	Status            StorageShareStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageShareList contains a list of StorageShares
type StorageShareList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageShare `json:"items"`
}

// Repository type metadata.
var (
	StorageShareKind             = "StorageShare"
	StorageShareGroupKind        = schema.GroupKind{Group: Group, Kind: StorageShareKind}.String()
	StorageShareKindAPIVersion   = StorageShareKind + "." + GroupVersion.String()
	StorageShareGroupVersionKind = GroupVersion.WithKind(StorageShareKind)
)

func init() {
	SchemeBuilder.Register(&StorageShare{}, &StorageShareList{})
}
