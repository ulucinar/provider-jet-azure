/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type StorageTableEntityObservation struct {
}

type StorageTableEntityParameters struct {

	// +kubebuilder:validation:Required
	Entity map[string]string `json:"entity" tf:"entity"`

	// +kubebuilder:validation:Required
	PartitionKey string `json:"partitionKey" tf:"partition_key"`

	// +kubebuilder:validation:Required
	RowKey string `json:"rowKey" tf:"row_key"`

	// +kubebuilder:validation:Required
	StorageAccountName string `json:"storageAccountName" tf:"storage_account_name"`

	// +kubebuilder:validation:Required
	TableName string `json:"tableName" tf:"table_name"`
}

// StorageTableEntitySpec defines the desired state of StorageTableEntity
type StorageTableEntitySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StorageTableEntityParameters `json:"forProvider"`
}

// StorageTableEntityStatus defines the observed state of StorageTableEntity.
type StorageTableEntityStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StorageTableEntityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageTableEntity is the Schema for the StorageTableEntitys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type StorageTableEntity struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageTableEntitySpec   `json:"spec"`
	Status            StorageTableEntityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageTableEntityList contains a list of StorageTableEntitys
type StorageTableEntityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageTableEntity `json:"items"`
}

// Repository type metadata.
var (
	StorageTableEntityKind             = "StorageTableEntity"
	StorageTableEntityGroupKind        = schema.GroupKind{Group: Group, Kind: StorageTableEntityKind}.String()
	StorageTableEntityKindAPIVersion   = StorageTableEntityKind + "." + GroupVersion.String()
	StorageTableEntityGroupVersionKind = GroupVersion.WithKind(StorageTableEntityKind)
)

func init() {
	SchemeBuilder.Register(&StorageTableEntity{}, &StorageTableEntityList{})
}
