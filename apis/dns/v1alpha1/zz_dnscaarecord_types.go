/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DnsCaaRecordObservation struct {
	Fqdn string `json:"fqdn,omitempty" tf:"fqdn"`
}

type DnsCaaRecordParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Record []RecordParameters `json:"record" tf:"record"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	TTL int64 `json:"ttl" tf:"ttl"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	ZoneName string `json:"zoneName" tf:"zone_name"`
}

type RecordObservation struct {
}

type RecordParameters struct {

	// +kubebuilder:validation:Required
	Flags int64 `json:"flags" tf:"flags"`

	// +kubebuilder:validation:Required
	Tag string `json:"tag" tf:"tag"`

	// +kubebuilder:validation:Required
	Value string `json:"value" tf:"value"`
}

// DnsCaaRecordSpec defines the desired state of DnsCaaRecord
type DnsCaaRecordSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DnsCaaRecordParameters `json:"forProvider"`
}

// DnsCaaRecordStatus defines the observed state of DnsCaaRecord.
type DnsCaaRecordStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DnsCaaRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DnsCaaRecord is the Schema for the DnsCaaRecords API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DnsCaaRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnsCaaRecordSpec   `json:"spec"`
	Status            DnsCaaRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DnsCaaRecordList contains a list of DnsCaaRecords
type DnsCaaRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnsCaaRecord `json:"items"`
}

// Repository type metadata.
var (
	DnsCaaRecordKind             = "DnsCaaRecord"
	DnsCaaRecordGroupKind        = schema.GroupKind{Group: Group, Kind: DnsCaaRecordKind}.String()
	DnsCaaRecordKindAPIVersion   = DnsCaaRecordKind + "." + GroupVersion.String()
	DnsCaaRecordGroupVersionKind = GroupVersion.WithKind(DnsCaaRecordKind)
)

func init() {
	SchemeBuilder.Register(&DnsCaaRecord{}, &DnsCaaRecordList{})
}
