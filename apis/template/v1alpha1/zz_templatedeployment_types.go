/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type TemplateDeploymentObservation struct {
	Outputs map[string]string `json:"outputs,omitempty" tf:"outputs"`
}

type TemplateDeploymentParameters struct {

	// +kubebuilder:validation:Required
	DeploymentMode string `json:"deploymentMode" tf:"deployment_mode"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Optional
	ParametersBody *string `json:"parametersBody,omitempty" tf:"parameters_body"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	TemplateBody *string `json:"templateBody,omitempty" tf:"template_body"`
}

// TemplateDeploymentSpec defines the desired state of TemplateDeployment
type TemplateDeploymentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       TemplateDeploymentParameters `json:"forProvider"`
}

// TemplateDeploymentStatus defines the observed state of TemplateDeployment.
type TemplateDeploymentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          TemplateDeploymentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TemplateDeployment is the Schema for the TemplateDeployments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type TemplateDeployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TemplateDeploymentSpec   `json:"spec"`
	Status            TemplateDeploymentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TemplateDeploymentList contains a list of TemplateDeployments
type TemplateDeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TemplateDeployment `json:"items"`
}

// Repository type metadata.
var (
	TemplateDeploymentKind             = "TemplateDeployment"
	TemplateDeploymentGroupKind        = schema.GroupKind{Group: Group, Kind: TemplateDeploymentKind}.String()
	TemplateDeploymentKindAPIVersion   = TemplateDeploymentKind + "." + GroupVersion.String()
	TemplateDeploymentGroupVersionKind = GroupVersion.WithKind(TemplateDeploymentKind)
)

func init() {
	SchemeBuilder.Register(&TemplateDeployment{}, &TemplateDeploymentList{})
}
