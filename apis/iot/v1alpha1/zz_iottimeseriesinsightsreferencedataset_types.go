/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IotTimeSeriesInsightsReferenceDataSetObservation struct {
}

type IotTimeSeriesInsightsReferenceDataSetParameters struct {

	// +kubebuilder:validation:Optional
	DataStringComparisonBehavior *string `json:"dataStringComparisonBehavior,omitempty" tf:"data_string_comparison_behavior"`

	// +kubebuilder:validation:Required
	KeyProperty []KeyPropertyParameters `json:"keyProperty" tf:"key_property"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	TimeSeriesInsightsEnvironmentID string `json:"timeSeriesInsightsEnvironmentId" tf:"time_series_insights_environment_id"`
}

type KeyPropertyObservation struct {
}

type KeyPropertyParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

// IotTimeSeriesInsightsReferenceDataSetSpec defines the desired state of IotTimeSeriesInsightsReferenceDataSet
type IotTimeSeriesInsightsReferenceDataSetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       IotTimeSeriesInsightsReferenceDataSetParameters `json:"forProvider"`
}

// IotTimeSeriesInsightsReferenceDataSetStatus defines the observed state of IotTimeSeriesInsightsReferenceDataSet.
type IotTimeSeriesInsightsReferenceDataSetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          IotTimeSeriesInsightsReferenceDataSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IotTimeSeriesInsightsReferenceDataSet is the Schema for the IotTimeSeriesInsightsReferenceDataSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type IotTimeSeriesInsightsReferenceDataSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IotTimeSeriesInsightsReferenceDataSetSpec   `json:"spec"`
	Status            IotTimeSeriesInsightsReferenceDataSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IotTimeSeriesInsightsReferenceDataSetList contains a list of IotTimeSeriesInsightsReferenceDataSets
type IotTimeSeriesInsightsReferenceDataSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IotTimeSeriesInsightsReferenceDataSet `json:"items"`
}

// Repository type metadata.
var (
	IotTimeSeriesInsightsReferenceDataSetKind             = "IotTimeSeriesInsightsReferenceDataSet"
	IotTimeSeriesInsightsReferenceDataSetGroupKind        = schema.GroupKind{Group: Group, Kind: IotTimeSeriesInsightsReferenceDataSetKind}.String()
	IotTimeSeriesInsightsReferenceDataSetKindAPIVersion   = IotTimeSeriesInsightsReferenceDataSetKind + "." + GroupVersion.String()
	IotTimeSeriesInsightsReferenceDataSetGroupVersionKind = GroupVersion.WithKind(IotTimeSeriesInsightsReferenceDataSetKind)
)

func init() {
	SchemeBuilder.Register(&IotTimeSeriesInsightsReferenceDataSet{}, &IotTimeSeriesInsightsReferenceDataSetList{})
}
