/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IotTimeSeriesInsightsEventSourceIothubObservation struct {
}

type IotTimeSeriesInsightsEventSourceIothubParameters struct {

	// +kubebuilder:validation:Required
	ConsumerGroupName string `json:"consumerGroupName" tf:"consumer_group_name"`

	// +kubebuilder:validation:Required
	EnvironmentID string `json:"environmentId" tf:"environment_id"`

	// +kubebuilder:validation:Required
	EventSourceResourceID string `json:"eventSourceResourceId" tf:"event_source_resource_id"`

	// +kubebuilder:validation:Required
	IothubName string `json:"iothubName" tf:"iothub_name"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	SharedAccessKey string `json:"sharedAccessKey" tf:"shared_access_key"`

	// +kubebuilder:validation:Required
	SharedAccessKeyName string `json:"sharedAccessKeyName" tf:"shared_access_key_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TimestampPropertyName *string `json:"timestampPropertyName,omitempty" tf:"timestamp_property_name"`
}

// IotTimeSeriesInsightsEventSourceIothubSpec defines the desired state of IotTimeSeriesInsightsEventSourceIothub
type IotTimeSeriesInsightsEventSourceIothubSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       IotTimeSeriesInsightsEventSourceIothubParameters `json:"forProvider"`
}

// IotTimeSeriesInsightsEventSourceIothubStatus defines the observed state of IotTimeSeriesInsightsEventSourceIothub.
type IotTimeSeriesInsightsEventSourceIothubStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          IotTimeSeriesInsightsEventSourceIothubObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IotTimeSeriesInsightsEventSourceIothub is the Schema for the IotTimeSeriesInsightsEventSourceIothubs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type IotTimeSeriesInsightsEventSourceIothub struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IotTimeSeriesInsightsEventSourceIothubSpec   `json:"spec"`
	Status            IotTimeSeriesInsightsEventSourceIothubStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IotTimeSeriesInsightsEventSourceIothubList contains a list of IotTimeSeriesInsightsEventSourceIothubs
type IotTimeSeriesInsightsEventSourceIothubList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IotTimeSeriesInsightsEventSourceIothub `json:"items"`
}

// Repository type metadata.
var (
	IotTimeSeriesInsightsEventSourceIothubKind             = "IotTimeSeriesInsightsEventSourceIothub"
	IotTimeSeriesInsightsEventSourceIothubGroupKind        = schema.GroupKind{Group: Group, Kind: IotTimeSeriesInsightsEventSourceIothubKind}.String()
	IotTimeSeriesInsightsEventSourceIothubKindAPIVersion   = IotTimeSeriesInsightsEventSourceIothubKind + "." + GroupVersion.String()
	IotTimeSeriesInsightsEventSourceIothubGroupVersionKind = GroupVersion.WithKind(IotTimeSeriesInsightsEventSourceIothubKind)
)

func init() {
	SchemeBuilder.Register(&IotTimeSeriesInsightsEventSourceIothub{}, &IotTimeSeriesInsightsEventSourceIothubList{})
}
