/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IotTimeSeriesInsightsStandardEnvironmentObservation struct {
}

type IotTimeSeriesInsightsStandardEnvironmentParameters struct {

	// +kubebuilder:validation:Required
	DataRetentionTime string `json:"dataRetentionTime" tf:"data_retention_time"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PartitionKey *string `json:"partitionKey,omitempty" tf:"partition_key"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	SkuName string `json:"skuName" tf:"sku_name"`

	// +kubebuilder:validation:Optional
	StorageLimitExceededBehavior *string `json:"storageLimitExceededBehavior,omitempty" tf:"storage_limit_exceeded_behavior"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// IotTimeSeriesInsightsStandardEnvironmentSpec defines the desired state of IotTimeSeriesInsightsStandardEnvironment
type IotTimeSeriesInsightsStandardEnvironmentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       IotTimeSeriesInsightsStandardEnvironmentParameters `json:"forProvider"`
}

// IotTimeSeriesInsightsStandardEnvironmentStatus defines the observed state of IotTimeSeriesInsightsStandardEnvironment.
type IotTimeSeriesInsightsStandardEnvironmentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          IotTimeSeriesInsightsStandardEnvironmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IotTimeSeriesInsightsStandardEnvironment is the Schema for the IotTimeSeriesInsightsStandardEnvironments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type IotTimeSeriesInsightsStandardEnvironment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IotTimeSeriesInsightsStandardEnvironmentSpec   `json:"spec"`
	Status            IotTimeSeriesInsightsStandardEnvironmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IotTimeSeriesInsightsStandardEnvironmentList contains a list of IotTimeSeriesInsightsStandardEnvironments
type IotTimeSeriesInsightsStandardEnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IotTimeSeriesInsightsStandardEnvironment `json:"items"`
}

// Repository type metadata.
var (
	IotTimeSeriesInsightsStandardEnvironmentKind             = "IotTimeSeriesInsightsStandardEnvironment"
	IotTimeSeriesInsightsStandardEnvironmentGroupKind        = schema.GroupKind{Group: Group, Kind: IotTimeSeriesInsightsStandardEnvironmentKind}.String()
	IotTimeSeriesInsightsStandardEnvironmentKindAPIVersion   = IotTimeSeriesInsightsStandardEnvironmentKind + "." + GroupVersion.String()
	IotTimeSeriesInsightsStandardEnvironmentGroupVersionKind = GroupVersion.WithKind(IotTimeSeriesInsightsStandardEnvironmentKind)
)

func init() {
	SchemeBuilder.Register(&IotTimeSeriesInsightsStandardEnvironment{}, &IotTimeSeriesInsightsStandardEnvironmentList{})
}
