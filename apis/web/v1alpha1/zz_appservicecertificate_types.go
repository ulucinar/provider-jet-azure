/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppServiceCertificateObservation struct {
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	HostNames []*string `json:"hostNames,omitempty" tf:"host_names,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IssueDate *string `json:"issueDate,omitempty" tf:"issue_date,omitempty"`

	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	SubjectName *string `json:"subjectName,omitempty" tf:"subject_name,omitempty"`

	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`
}

type AppServiceCertificateParameters struct {

	// +kubebuilder:validation:Optional
	AppServicePlanID *string `json:"appServicePlanId,omitempty" tf:"app_service_plan_id,omitempty"`

	// +kubebuilder:validation:Optional
	HostingEnvironmentProfileID *string `json:"hostingEnvironmentProfileId,omitempty" tf:"hosting_environment_profile_id,omitempty"`

	// +kubebuilder:validation:Optional
	KeyVaultSecretID *string `json:"keyVaultSecretId,omitempty" tf:"key_vault_secret_id,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PfxBlobSecretRef *v1.SecretKeySelector `json:"pfxBlobSecretRef,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// AppServiceCertificateSpec defines the desired state of AppServiceCertificate
type AppServiceCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppServiceCertificateParameters `json:"forProvider"`
}

// AppServiceCertificateStatus defines the observed state of AppServiceCertificate.
type AppServiceCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppServiceCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceCertificate is the Schema for the AppServiceCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type AppServiceCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppServiceCertificateSpec   `json:"spec"`
	Status            AppServiceCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceCertificateList contains a list of AppServiceCertificates
type AppServiceCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppServiceCertificate `json:"items"`
}

// Repository type metadata.
var (
	AppServiceCertificate_Kind             = "AppServiceCertificate"
	AppServiceCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppServiceCertificate_Kind}.String()
	AppServiceCertificate_KindAPIVersion   = AppServiceCertificate_Kind + "." + CRDGroupVersion.String()
	AppServiceCertificate_GroupVersionKind = CRDGroupVersion.WithKind(AppServiceCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&AppServiceCertificate{}, &AppServiceCertificateList{})
}
