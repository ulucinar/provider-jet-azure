/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type LogRetentionPolicyObservation struct {
}

type LogRetentionPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Days *int64 `json:"days,omitempty" tf:"days"`

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`
}

type MetricObservation struct {
}

type MetricParameters struct {

	// +kubebuilder:validation:Required
	Category string `json:"category" tf:"category"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	RetentionPolicy []MetricRetentionPolicyParameters `json:"retentionPolicy,omitempty" tf:"retention_policy"`
}

type MetricRetentionPolicyObservation struct {
}

type MetricRetentionPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Days *int64 `json:"days,omitempty" tf:"days"`

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`
}

type MonitorDiagnosticSettingLogObservation struct {
}

type MonitorDiagnosticSettingLogParameters struct {

	// +kubebuilder:validation:Required
	Category string `json:"category" tf:"category"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	RetentionPolicy []LogRetentionPolicyParameters `json:"retentionPolicy,omitempty" tf:"retention_policy"`
}

type MonitorDiagnosticSettingObservation struct {
}

type MonitorDiagnosticSettingParameters struct {

	// +kubebuilder:validation:Optional
	EventhubAuthorizationRuleID *string `json:"eventhubAuthorizationRuleId,omitempty" tf:"eventhub_authorization_rule_id"`

	// +kubebuilder:validation:Optional
	EventhubName *string `json:"eventhubName,omitempty" tf:"eventhub_name"`

	// +kubebuilder:validation:Optional
	Log []MonitorDiagnosticSettingLogParameters `json:"log,omitempty" tf:"log"`

	// +kubebuilder:validation:Optional
	LogAnalyticsDestinationType *string `json:"logAnalyticsDestinationType,omitempty" tf:"log_analytics_destination_type"`

	// +kubebuilder:validation:Optional
	LogAnalyticsWorkspaceID *string `json:"logAnalyticsWorkspaceId,omitempty" tf:"log_analytics_workspace_id"`

	// +kubebuilder:validation:Optional
	Metric []MetricParameters `json:"metric,omitempty" tf:"metric"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	StorageAccountID *string `json:"storageAccountId,omitempty" tf:"storage_account_id"`

	// +kubebuilder:validation:Required
	TargetResourceID string `json:"targetResourceId" tf:"target_resource_id"`
}

// MonitorDiagnosticSettingSpec defines the desired state of MonitorDiagnosticSetting
type MonitorDiagnosticSettingSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MonitorDiagnosticSettingParameters `json:"forProvider"`
}

// MonitorDiagnosticSettingStatus defines the observed state of MonitorDiagnosticSetting.
type MonitorDiagnosticSettingStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MonitorDiagnosticSettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorDiagnosticSetting is the Schema for the MonitorDiagnosticSettings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MonitorDiagnosticSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitorDiagnosticSettingSpec   `json:"spec"`
	Status            MonitorDiagnosticSettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorDiagnosticSettingList contains a list of MonitorDiagnosticSettings
type MonitorDiagnosticSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorDiagnosticSetting `json:"items"`
}

// Repository type metadata.
var (
	MonitorDiagnosticSettingKind             = "MonitorDiagnosticSetting"
	MonitorDiagnosticSettingGroupKind        = schema.GroupKind{Group: Group, Kind: MonitorDiagnosticSettingKind}.String()
	MonitorDiagnosticSettingKindAPIVersion   = MonitorDiagnosticSettingKind + "." + GroupVersion.String()
	MonitorDiagnosticSettingGroupVersionKind = GroupVersion.WithKind(MonitorDiagnosticSettingKind)
)

func init() {
	SchemeBuilder.Register(&MonitorDiagnosticSetting{}, &MonitorDiagnosticSettingList{})
}
