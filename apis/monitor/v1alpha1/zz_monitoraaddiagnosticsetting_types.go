/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type LogObservation struct {
}

type LogParameters struct {

	// +kubebuilder:validation:Required
	Category string `json:"category" tf:"category"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Required
	RetentionPolicy []RetentionPolicyParameters `json:"retentionPolicy" tf:"retention_policy"`
}

type MonitorAadDiagnosticSettingObservation struct {
}

type MonitorAadDiagnosticSettingParameters struct {

	// +kubebuilder:validation:Optional
	EventhubAuthorizationRuleID *string `json:"eventhubAuthorizationRuleId,omitempty" tf:"eventhub_authorization_rule_id"`

	// +kubebuilder:validation:Optional
	EventhubName *string `json:"eventhubName,omitempty" tf:"eventhub_name"`

	// +kubebuilder:validation:Required
	Log []LogParameters `json:"log" tf:"log"`

	// +kubebuilder:validation:Optional
	LogAnalyticsWorkspaceID *string `json:"logAnalyticsWorkspaceId,omitempty" tf:"log_analytics_workspace_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	StorageAccountID *string `json:"storageAccountId,omitempty" tf:"storage_account_id"`
}

type RetentionPolicyObservation struct {
}

type RetentionPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Days *int64 `json:"days,omitempty" tf:"days"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

// MonitorAadDiagnosticSettingSpec defines the desired state of MonitorAadDiagnosticSetting
type MonitorAadDiagnosticSettingSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MonitorAadDiagnosticSettingParameters `json:"forProvider"`
}

// MonitorAadDiagnosticSettingStatus defines the observed state of MonitorAadDiagnosticSetting.
type MonitorAadDiagnosticSettingStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MonitorAadDiagnosticSettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorAadDiagnosticSetting is the Schema for the MonitorAadDiagnosticSettings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MonitorAadDiagnosticSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitorAadDiagnosticSettingSpec   `json:"spec"`
	Status            MonitorAadDiagnosticSettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorAadDiagnosticSettingList contains a list of MonitorAadDiagnosticSettings
type MonitorAadDiagnosticSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorAadDiagnosticSetting `json:"items"`
}

// Repository type metadata.
var (
	MonitorAadDiagnosticSettingKind             = "MonitorAadDiagnosticSetting"
	MonitorAadDiagnosticSettingGroupKind        = schema.GroupKind{Group: Group, Kind: MonitorAadDiagnosticSettingKind}.String()
	MonitorAadDiagnosticSettingKindAPIVersion   = MonitorAadDiagnosticSettingKind + "." + GroupVersion.String()
	MonitorAadDiagnosticSettingGroupVersionKind = GroupVersion.WithKind(MonitorAadDiagnosticSettingKind)
)

func init() {
	SchemeBuilder.Register(&MonitorAadDiagnosticSetting{}, &MonitorAadDiagnosticSettingList{})
}
