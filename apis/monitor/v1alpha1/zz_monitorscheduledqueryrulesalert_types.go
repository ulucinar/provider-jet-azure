/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MonitorScheduledQueryRulesAlertActionObservation struct {
}

type MonitorScheduledQueryRulesAlertActionParameters struct {

	// +kubebuilder:validation:Required
	ActionGroup []string `json:"actionGroup" tf:"action_group"`

	// +kubebuilder:validation:Optional
	CustomWebhookPayload *string `json:"customWebhookPayload,omitempty" tf:"custom_webhook_payload"`

	// +kubebuilder:validation:Optional
	EmailSubject *string `json:"emailSubject,omitempty" tf:"email_subject"`
}

type MonitorScheduledQueryRulesAlertObservation struct {
}

type MonitorScheduledQueryRulesAlertParameters struct {

	// +kubebuilder:validation:Required
	Action []MonitorScheduledQueryRulesAlertActionParameters `json:"action" tf:"action"`

	// +kubebuilder:validation:Optional
	AuthorizedResourceIds []string `json:"authorizedResourceIds,omitempty" tf:"authorized_resource_ids"`

	// +kubebuilder:validation:Required
	DataSourceID string `json:"dataSourceId" tf:"data_source_id"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Required
	Frequency int64 `json:"frequency" tf:"frequency"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Query string `json:"query" tf:"query"`

	// +kubebuilder:validation:Optional
	QueryType *string `json:"queryType,omitempty" tf:"query_type"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Severity *int64 `json:"severity,omitempty" tf:"severity"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	Throttling *int64 `json:"throttling,omitempty" tf:"throttling"`

	// +kubebuilder:validation:Required
	TimeWindow int64 `json:"timeWindow" tf:"time_window"`

	// +kubebuilder:validation:Required
	Trigger []TriggerParameters `json:"trigger" tf:"trigger"`
}

type TriggerMetricTriggerObservation struct {
}

type TriggerMetricTriggerParameters struct {

	// +kubebuilder:validation:Required
	MetricColumn string `json:"metricColumn" tf:"metric_column"`

	// +kubebuilder:validation:Required
	MetricTriggerType string `json:"metricTriggerType" tf:"metric_trigger_type"`

	// +kubebuilder:validation:Required
	Operator string `json:"operator" tf:"operator"`

	// +kubebuilder:validation:Required
	Threshold float64 `json:"threshold" tf:"threshold"`
}

type TriggerObservation struct {
}

type TriggerParameters struct {

	// +kubebuilder:validation:Optional
	MetricTrigger []TriggerMetricTriggerParameters `json:"metricTrigger,omitempty" tf:"metric_trigger"`

	// +kubebuilder:validation:Required
	Operator string `json:"operator" tf:"operator"`

	// +kubebuilder:validation:Required
	Threshold float64 `json:"threshold" tf:"threshold"`
}

// MonitorScheduledQueryRulesAlertSpec defines the desired state of MonitorScheduledQueryRulesAlert
type MonitorScheduledQueryRulesAlertSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MonitorScheduledQueryRulesAlertParameters `json:"forProvider"`
}

// MonitorScheduledQueryRulesAlertStatus defines the observed state of MonitorScheduledQueryRulesAlert.
type MonitorScheduledQueryRulesAlertStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MonitorScheduledQueryRulesAlertObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorScheduledQueryRulesAlert is the Schema for the MonitorScheduledQueryRulesAlerts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MonitorScheduledQueryRulesAlert struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitorScheduledQueryRulesAlertSpec   `json:"spec"`
	Status            MonitorScheduledQueryRulesAlertStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorScheduledQueryRulesAlertList contains a list of MonitorScheduledQueryRulesAlerts
type MonitorScheduledQueryRulesAlertList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorScheduledQueryRulesAlert `json:"items"`
}

// Repository type metadata.
var (
	MonitorScheduledQueryRulesAlertKind             = "MonitorScheduledQueryRulesAlert"
	MonitorScheduledQueryRulesAlertGroupKind        = schema.GroupKind{Group: Group, Kind: MonitorScheduledQueryRulesAlertKind}.String()
	MonitorScheduledQueryRulesAlertKindAPIVersion   = MonitorScheduledQueryRulesAlertKind + "." + GroupVersion.String()
	MonitorScheduledQueryRulesAlertGroupVersionKind = GroupVersion.WithKind(MonitorScheduledQueryRulesAlertKind)
)

func init() {
	SchemeBuilder.Register(&MonitorScheduledQueryRulesAlert{}, &MonitorScheduledQueryRulesAlertList{})
}
