/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ActionGroupObservation struct {
}

type ActionGroupParameters struct {

	// +kubebuilder:validation:Optional
	EmailSubject *string `json:"emailSubject,omitempty" tf:"email_subject"`

	// +kubebuilder:validation:Required
	Ids []string `json:"ids" tf:"ids"`

	// +kubebuilder:validation:Optional
	WebhookPayload *string `json:"webhookPayload,omitempty" tf:"webhook_payload"`
}

type MonitorSmartDetectorAlertRuleObservation struct {
}

type MonitorSmartDetectorAlertRuleParameters struct {

	// +kubebuilder:validation:Required
	ActionGroup []ActionGroupParameters `json:"actionGroup" tf:"action_group"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	DetectorType string `json:"detectorType" tf:"detector_type"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Required
	Frequency string `json:"frequency" tf:"frequency"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	ScopeResourceIds []string `json:"scopeResourceIds" tf:"scope_resource_ids"`

	// +kubebuilder:validation:Required
	Severity string `json:"severity" tf:"severity"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	ThrottlingDuration *string `json:"throttlingDuration,omitempty" tf:"throttling_duration"`
}

// MonitorSmartDetectorAlertRuleSpec defines the desired state of MonitorSmartDetectorAlertRule
type MonitorSmartDetectorAlertRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MonitorSmartDetectorAlertRuleParameters `json:"forProvider"`
}

// MonitorSmartDetectorAlertRuleStatus defines the observed state of MonitorSmartDetectorAlertRule.
type MonitorSmartDetectorAlertRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MonitorSmartDetectorAlertRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorSmartDetectorAlertRule is the Schema for the MonitorSmartDetectorAlertRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MonitorSmartDetectorAlertRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitorSmartDetectorAlertRuleSpec   `json:"spec"`
	Status            MonitorSmartDetectorAlertRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorSmartDetectorAlertRuleList contains a list of MonitorSmartDetectorAlertRules
type MonitorSmartDetectorAlertRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorSmartDetectorAlertRule `json:"items"`
}

// Repository type metadata.
var (
	MonitorSmartDetectorAlertRuleKind             = "MonitorSmartDetectorAlertRule"
	MonitorSmartDetectorAlertRuleGroupKind        = schema.GroupKind{Group: Group, Kind: MonitorSmartDetectorAlertRuleKind}.String()
	MonitorSmartDetectorAlertRuleKindAPIVersion   = MonitorSmartDetectorAlertRuleKind + "." + GroupVersion.String()
	MonitorSmartDetectorAlertRuleGroupVersionKind = GroupVersion.WithKind(MonitorSmartDetectorAlertRuleKind)
)

func init() {
	SchemeBuilder.Register(&MonitorSmartDetectorAlertRule{}, &MonitorSmartDetectorAlertRuleList{})
}
