/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MonitorLogProfileObservation struct {
}

type MonitorLogProfileParameters struct {

	// +kubebuilder:validation:Required
	Categories []string `json:"categories" tf:"categories"`

	// +kubebuilder:validation:Required
	Locations []string `json:"locations" tf:"locations"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	RetentionPolicy []MonitorLogProfileRetentionPolicyParameters `json:"retentionPolicy" tf:"retention_policy"`

	// +kubebuilder:validation:Optional
	ServicebusRuleID *string `json:"servicebusRuleId,omitempty" tf:"servicebus_rule_id"`

	// +kubebuilder:validation:Optional
	StorageAccountID *string `json:"storageAccountId,omitempty" tf:"storage_account_id"`
}

type MonitorLogProfileRetentionPolicyObservation struct {
}

type MonitorLogProfileRetentionPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Days *int64 `json:"days,omitempty" tf:"days"`

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`
}

// MonitorLogProfileSpec defines the desired state of MonitorLogProfile
type MonitorLogProfileSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MonitorLogProfileParameters `json:"forProvider"`
}

// MonitorLogProfileStatus defines the observed state of MonitorLogProfile.
type MonitorLogProfileStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MonitorLogProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorLogProfile is the Schema for the MonitorLogProfiles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MonitorLogProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitorLogProfileSpec   `json:"spec"`
	Status            MonitorLogProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorLogProfileList contains a list of MonitorLogProfiles
type MonitorLogProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorLogProfile `json:"items"`
}

// Repository type metadata.
var (
	MonitorLogProfileKind             = "MonitorLogProfile"
	MonitorLogProfileGroupKind        = schema.GroupKind{Group: Group, Kind: MonitorLogProfileKind}.String()
	MonitorLogProfileKindAPIVersion   = MonitorLogProfileKind + "." + GroupVersion.String()
	MonitorLogProfileGroupVersionKind = GroupVersion.WithKind(MonitorLogProfileKind)
)

func init() {
	SchemeBuilder.Register(&MonitorLogProfile{}, &MonitorLogProfileList{})
}
