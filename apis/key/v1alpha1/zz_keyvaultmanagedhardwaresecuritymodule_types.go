/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type KeyVaultManagedHardwareSecurityModuleObservation struct {
	HsmURI string `json:"hsmUri,omitempty" tf:"hsm_uri"`
}

type KeyVaultManagedHardwareSecurityModuleParameters struct {

	// +kubebuilder:validation:Required
	AdminObjectIds []string `json:"adminObjectIds" tf:"admin_object_ids"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PurgeProtectionEnabled *bool `json:"purgeProtectionEnabled,omitempty" tf:"purge_protection_enabled"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	SkuName string `json:"skuName" tf:"sku_name"`

	// +kubebuilder:validation:Optional
	SoftDeleteRetentionDays *int64 `json:"softDeleteRetentionDays,omitempty" tf:"soft_delete_retention_days"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	TenantID string `json:"tenantId" tf:"tenant_id"`
}

// KeyVaultManagedHardwareSecurityModuleSpec defines the desired state of KeyVaultManagedHardwareSecurityModule
type KeyVaultManagedHardwareSecurityModuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       KeyVaultManagedHardwareSecurityModuleParameters `json:"forProvider"`
}

// KeyVaultManagedHardwareSecurityModuleStatus defines the observed state of KeyVaultManagedHardwareSecurityModule.
type KeyVaultManagedHardwareSecurityModuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          KeyVaultManagedHardwareSecurityModuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyVaultManagedHardwareSecurityModule is the Schema for the KeyVaultManagedHardwareSecurityModules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type KeyVaultManagedHardwareSecurityModule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyVaultManagedHardwareSecurityModuleSpec   `json:"spec"`
	Status            KeyVaultManagedHardwareSecurityModuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyVaultManagedHardwareSecurityModuleList contains a list of KeyVaultManagedHardwareSecurityModules
type KeyVaultManagedHardwareSecurityModuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyVaultManagedHardwareSecurityModule `json:"items"`
}

// Repository type metadata.
var (
	KeyVaultManagedHardwareSecurityModuleKind             = "KeyVaultManagedHardwareSecurityModule"
	KeyVaultManagedHardwareSecurityModuleGroupKind        = schema.GroupKind{Group: Group, Kind: KeyVaultManagedHardwareSecurityModuleKind}.String()
	KeyVaultManagedHardwareSecurityModuleKindAPIVersion   = KeyVaultManagedHardwareSecurityModuleKind + "." + GroupVersion.String()
	KeyVaultManagedHardwareSecurityModuleGroupVersionKind = GroupVersion.WithKind(KeyVaultManagedHardwareSecurityModuleKind)
)

func init() {
	SchemeBuilder.Register(&KeyVaultManagedHardwareSecurityModule{}, &KeyVaultManagedHardwareSecurityModuleList{})
}
