/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type KeyVaultSecretObservation struct {
	Version string `json:"version,omitempty" tf:"version"`

	VersionlessID string `json:"versionlessId,omitempty" tf:"versionless_id"`
}

type KeyVaultSecretParameters struct {

	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type"`

	// +kubebuilder:validation:Optional
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date"`

	// +kubebuilder:validation:Required
	KeyVaultID string `json:"keyVaultId" tf:"key_vault_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	NotBeforeDate *string `json:"notBeforeDate,omitempty" tf:"not_before_date"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	Value string `json:"value" tf:"value"`
}

// KeyVaultSecretSpec defines the desired state of KeyVaultSecret
type KeyVaultSecretSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       KeyVaultSecretParameters `json:"forProvider"`
}

// KeyVaultSecretStatus defines the observed state of KeyVaultSecret.
type KeyVaultSecretStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          KeyVaultSecretObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyVaultSecret is the Schema for the KeyVaultSecrets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type KeyVaultSecret struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyVaultSecretSpec   `json:"spec"`
	Status            KeyVaultSecretStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyVaultSecretList contains a list of KeyVaultSecrets
type KeyVaultSecretList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyVaultSecret `json:"items"`
}

// Repository type metadata.
var (
	KeyVaultSecretKind             = "KeyVaultSecret"
	KeyVaultSecretGroupKind        = schema.GroupKind{Group: Group, Kind: KeyVaultSecretKind}.String()
	KeyVaultSecretKindAPIVersion   = KeyVaultSecretKind + "." + GroupVersion.String()
	KeyVaultSecretGroupVersionKind = GroupVersion.WithKind(KeyVaultSecretKind)
)

func init() {
	SchemeBuilder.Register(&KeyVaultSecret{}, &KeyVaultSecretList{})
}
