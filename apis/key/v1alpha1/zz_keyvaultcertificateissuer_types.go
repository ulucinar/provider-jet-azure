/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AdminObservation struct {
}

type AdminParameters struct {

	// +kubebuilder:validation:Required
	EmailAddress string `json:"emailAddress" tf:"email_address"`

	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName,omitempty" tf:"first_name"`

	// +kubebuilder:validation:Optional
	LastName *string `json:"lastName,omitempty" tf:"last_name"`

	// +kubebuilder:validation:Optional
	Phone *string `json:"phone,omitempty" tf:"phone"`
}

type KeyVaultCertificateIssuerObservation struct {
}

type KeyVaultCertificateIssuerParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id"`

	// +kubebuilder:validation:Optional
	Admin []AdminParameters `json:"admin,omitempty" tf:"admin"`

	// +kubebuilder:validation:Required
	KeyVaultID string `json:"keyVaultId" tf:"key_vault_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Required
	ProviderName string `json:"providerName" tf:"provider_name"`
}

// KeyVaultCertificateIssuerSpec defines the desired state of KeyVaultCertificateIssuer
type KeyVaultCertificateIssuerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       KeyVaultCertificateIssuerParameters `json:"forProvider"`
}

// KeyVaultCertificateIssuerStatus defines the observed state of KeyVaultCertificateIssuer.
type KeyVaultCertificateIssuerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          KeyVaultCertificateIssuerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyVaultCertificateIssuer is the Schema for the KeyVaultCertificateIssuers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type KeyVaultCertificateIssuer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyVaultCertificateIssuerSpec   `json:"spec"`
	Status            KeyVaultCertificateIssuerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyVaultCertificateIssuerList contains a list of KeyVaultCertificateIssuers
type KeyVaultCertificateIssuerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyVaultCertificateIssuer `json:"items"`
}

// Repository type metadata.
var (
	KeyVaultCertificateIssuerKind             = "KeyVaultCertificateIssuer"
	KeyVaultCertificateIssuerGroupKind        = schema.GroupKind{Group: Group, Kind: KeyVaultCertificateIssuerKind}.String()
	KeyVaultCertificateIssuerKindAPIVersion   = KeyVaultCertificateIssuerKind + "." + GroupVersion.String()
	KeyVaultCertificateIssuerGroupVersionKind = GroupVersion.WithKind(KeyVaultCertificateIssuerKind)
)

func init() {
	SchemeBuilder.Register(&KeyVaultCertificateIssuer{}, &KeyVaultCertificateIssuerList{})
}
