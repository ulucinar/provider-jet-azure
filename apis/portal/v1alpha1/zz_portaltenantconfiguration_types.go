/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type PortalTenantConfigurationObservation struct {
}

type PortalTenantConfigurationParameters struct {

	// +kubebuilder:validation:Required
	PrivateMarkdownStorageEnforced bool `json:"privateMarkdownStorageEnforced" tf:"private_markdown_storage_enforced"`
}

// PortalTenantConfigurationSpec defines the desired state of PortalTenantConfiguration
type PortalTenantConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PortalTenantConfigurationParameters `json:"forProvider"`
}

// PortalTenantConfigurationStatus defines the observed state of PortalTenantConfiguration.
type PortalTenantConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PortalTenantConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PortalTenantConfiguration is the Schema for the PortalTenantConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PortalTenantConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PortalTenantConfigurationSpec   `json:"spec"`
	Status            PortalTenantConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PortalTenantConfigurationList contains a list of PortalTenantConfigurations
type PortalTenantConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PortalTenantConfiguration `json:"items"`
}

// Repository type metadata.
var (
	PortalTenantConfigurationKind             = "PortalTenantConfiguration"
	PortalTenantConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: PortalTenantConfigurationKind}.String()
	PortalTenantConfigurationKindAPIVersion   = PortalTenantConfigurationKind + "." + GroupVersion.String()
	PortalTenantConfigurationGroupVersionKind = GroupVersion.WithKind(PortalTenantConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&PortalTenantConfiguration{}, &PortalTenantConfigurationList{})
}
