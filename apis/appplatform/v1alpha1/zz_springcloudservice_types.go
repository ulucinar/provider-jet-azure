/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigServerGitSettingObservation struct {
}

type ConfigServerGitSettingParameters struct {

	// +kubebuilder:validation:Optional
	HTTPBasicAuth []HTTPBasicAuthParameters `json:"httpBasicAuth,omitempty" tf:"http_basic_auth,omitempty"`

	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// +kubebuilder:validation:Optional
	Repository []RepositoryParameters `json:"repository,omitempty" tf:"repository,omitempty"`

	// +kubebuilder:validation:Optional
	SSHAuth []ConfigServerGitSettingSSHAuthParameters `json:"sshAuth,omitempty" tf:"ssh_auth,omitempty"`

	// +kubebuilder:validation:Optional
	SearchPaths []*string `json:"searchPaths,omitempty" tf:"search_paths,omitempty"`

	// +kubebuilder:validation:Required
	URI *string `json:"uri" tf:"uri,omitempty"`
}

type ConfigServerGitSettingSSHAuthObservation struct {
}

type ConfigServerGitSettingSSHAuthParameters struct {

	// +kubebuilder:validation:Optional
	HostKeyAlgorithm *string `json:"hostKeyAlgorithm,omitempty" tf:"host_key_algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	HostKeySecretRef *v1.SecretKeySelector `json:"hostKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	StrictHostKeyCheckingEnabled *bool `json:"strictHostKeyCheckingEnabled,omitempty" tf:"strict_host_key_checking_enabled,omitempty"`
}

type HTTPBasicAuthObservation struct {
}

type HTTPBasicAuthParameters struct {

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type NetworkObservation struct {
}

type NetworkParameters struct {

	// +kubebuilder:validation:Optional
	AppNetworkResourceGroup *string `json:"appNetworkResourceGroup,omitempty" tf:"app_network_resource_group,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/network/v1alpha2.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-jet-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	AppSubnetID *string `json:"appSubnetId,omitempty" tf:"app_subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	AppSubnetIDRef *v1.Reference `json:"appSubnetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AppSubnetIDSelector *v1.Selector `json:"appSubnetIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	CidrRanges []*string `json:"cidrRanges" tf:"cidr_ranges,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceRuntimeNetworkResourceGroup *string `json:"serviceRuntimeNetworkResourceGroup,omitempty" tf:"service_runtime_network_resource_group,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/network/v1alpha2.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-jet-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ServiceRuntimeSubnetID *string `json:"serviceRuntimeSubnetId,omitempty" tf:"service_runtime_subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceRuntimeSubnetIDRef *v1.Reference `json:"serviceRuntimeSubnetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ServiceRuntimeSubnetIDSelector *v1.Selector `json:"serviceRuntimeSubnetIdSelector,omitempty" tf:"-"`
}

type RepositoryHTTPBasicAuthObservation struct {
}

type RepositoryHTTPBasicAuthParameters struct {

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type RepositoryObservation struct {
}

type RepositoryParameters struct {

	// +kubebuilder:validation:Optional
	HTTPBasicAuth []RepositoryHTTPBasicAuthParameters `json:"httpBasicAuth,omitempty" tf:"http_basic_auth,omitempty"`

	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Pattern []*string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// +kubebuilder:validation:Optional
	SSHAuth []SSHAuthParameters `json:"sshAuth,omitempty" tf:"ssh_auth,omitempty"`

	// +kubebuilder:validation:Optional
	SearchPaths []*string `json:"searchPaths,omitempty" tf:"search_paths,omitempty"`

	// +kubebuilder:validation:Required
	URI *string `json:"uri" tf:"uri,omitempty"`
}

type RequiredNetworkTrafficRulesObservation struct {
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	Fqdns []*string `json:"fqdns,omitempty" tf:"fqdns,omitempty"`

	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type RequiredNetworkTrafficRulesParameters struct {
}

type SSHAuthObservation struct {
}

type SSHAuthParameters struct {

	// +kubebuilder:validation:Optional
	HostKeyAlgorithm *string `json:"hostKeyAlgorithm,omitempty" tf:"host_key_algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	HostKeySecretRef *v1.SecretKeySelector `json:"hostKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	StrictHostKeyCheckingEnabled *bool `json:"strictHostKeyCheckingEnabled,omitempty" tf:"strict_host_key_checking_enabled,omitempty"`
}

type SpringCloudServiceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OutboundPublicIPAddresses []*string `json:"outboundPublicIpAddresses,omitempty" tf:"outbound_public_ip_addresses,omitempty"`

	RequiredNetworkTrafficRules []RequiredNetworkTrafficRulesObservation `json:"requiredNetworkTrafficRules,omitempty" tf:"required_network_traffic_rules,omitempty"`
}

type SpringCloudServiceParameters struct {

	// +kubebuilder:validation:Optional
	ConfigServerGitSetting []ConfigServerGitSettingParameters `json:"configServerGitSetting,omitempty" tf:"config_server_git_setting,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SkuName *string `json:"skuName,omitempty" tf:"sku_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Trace []TraceParameters `json:"trace,omitempty" tf:"trace,omitempty"`
}

type TraceObservation struct {
}

type TraceParameters struct {

	// +kubebuilder:validation:Optional
	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string,omitempty"`

	// +kubebuilder:validation:Optional
	InstrumentationKey *string `json:"instrumentationKey,omitempty" tf:"instrumentation_key,omitempty"`

	// +kubebuilder:validation:Optional
	SampleRate *float64 `json:"sampleRate,omitempty" tf:"sample_rate,omitempty"`
}

// SpringCloudServiceSpec defines the desired state of SpringCloudService
type SpringCloudServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SpringCloudServiceParameters `json:"forProvider"`
}

// SpringCloudServiceStatus defines the observed state of SpringCloudService.
type SpringCloudServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SpringCloudServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SpringCloudService is the Schema for the SpringCloudServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type SpringCloudService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SpringCloudServiceSpec   `json:"spec"`
	Status            SpringCloudServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SpringCloudServiceList contains a list of SpringCloudServices
type SpringCloudServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SpringCloudService `json:"items"`
}

// Repository type metadata.
var (
	SpringCloudService_Kind             = "SpringCloudService"
	SpringCloudService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SpringCloudService_Kind}.String()
	SpringCloudService_KindAPIVersion   = SpringCloudService_Kind + "." + CRDGroupVersion.String()
	SpringCloudService_GroupVersionKind = CRDGroupVersion.WithKind(SpringCloudService_Kind)
)

func init() {
	SchemeBuilder.Register(&SpringCloudService{}, &SpringCloudServiceList{})
}
