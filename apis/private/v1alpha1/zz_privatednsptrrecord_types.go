/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type PrivateDnsPtrRecordObservation struct {
	Fqdn string `json:"fqdn,omitempty" tf:"fqdn"`
}

type PrivateDnsPtrRecordParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Records []string `json:"records" tf:"records"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	TTL int64 `json:"ttl" tf:"ttl"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	ZoneName string `json:"zoneName" tf:"zone_name"`
}

// PrivateDnsPtrRecordSpec defines the desired state of PrivateDnsPtrRecord
type PrivateDnsPtrRecordSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PrivateDnsPtrRecordParameters `json:"forProvider"`
}

// PrivateDnsPtrRecordStatus defines the observed state of PrivateDnsPtrRecord.
type PrivateDnsPtrRecordStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PrivateDnsPtrRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateDnsPtrRecord is the Schema for the PrivateDnsPtrRecords API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PrivateDnsPtrRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrivateDnsPtrRecordSpec   `json:"spec"`
	Status            PrivateDnsPtrRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateDnsPtrRecordList contains a list of PrivateDnsPtrRecords
type PrivateDnsPtrRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivateDnsPtrRecord `json:"items"`
}

// Repository type metadata.
var (
	PrivateDnsPtrRecordKind             = "PrivateDnsPtrRecord"
	PrivateDnsPtrRecordGroupKind        = schema.GroupKind{Group: Group, Kind: PrivateDnsPtrRecordKind}.String()
	PrivateDnsPtrRecordKindAPIVersion   = PrivateDnsPtrRecordKind + "." + GroupVersion.String()
	PrivateDnsPtrRecordGroupVersionKind = GroupVersion.WithKind(PrivateDnsPtrRecordKind)
)

func init() {
	SchemeBuilder.Register(&PrivateDnsPtrRecord{}, &PrivateDnsPtrRecordList{})
}
