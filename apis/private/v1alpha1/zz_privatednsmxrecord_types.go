/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type PrivateDnsMxRecordObservation struct {
	Fqdn string `json:"fqdn,omitempty" tf:"fqdn"`
}

type PrivateDnsMxRecordParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`

	// +kubebuilder:validation:Required
	Record []RecordParameters `json:"record" tf:"record"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	TTL int64 `json:"ttl" tf:"ttl"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	ZoneName string `json:"zoneName" tf:"zone_name"`
}

type RecordObservation struct {
}

type RecordParameters struct {

	// +kubebuilder:validation:Required
	Exchange string `json:"exchange" tf:"exchange"`

	// +kubebuilder:validation:Required
	Preference int64 `json:"preference" tf:"preference"`
}

// PrivateDnsMxRecordSpec defines the desired state of PrivateDnsMxRecord
type PrivateDnsMxRecordSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PrivateDnsMxRecordParameters `json:"forProvider"`
}

// PrivateDnsMxRecordStatus defines the observed state of PrivateDnsMxRecord.
type PrivateDnsMxRecordStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PrivateDnsMxRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateDnsMxRecord is the Schema for the PrivateDnsMxRecords API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PrivateDnsMxRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrivateDnsMxRecordSpec   `json:"spec"`
	Status            PrivateDnsMxRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateDnsMxRecordList contains a list of PrivateDnsMxRecords
type PrivateDnsMxRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivateDnsMxRecord `json:"items"`
}

// Repository type metadata.
var (
	PrivateDnsMxRecordKind             = "PrivateDnsMxRecord"
	PrivateDnsMxRecordGroupKind        = schema.GroupKind{Group: Group, Kind: PrivateDnsMxRecordKind}.String()
	PrivateDnsMxRecordKindAPIVersion   = PrivateDnsMxRecordKind + "." + GroupVersion.String()
	PrivateDnsMxRecordGroupVersionKind = GroupVersion.WithKind(PrivateDnsMxRecordKind)
)

func init() {
	SchemeBuilder.Register(&PrivateDnsMxRecord{}, &PrivateDnsMxRecordList{})
}
