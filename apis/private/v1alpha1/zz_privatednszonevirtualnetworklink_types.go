/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type PrivateDnsZoneVirtualNetworkLinkObservation struct {
}

type PrivateDnsZoneVirtualNetworkLinkParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	PrivateDNSZoneName string `json:"privateDnsZoneName" tf:"private_dns_zone_name"`

	// +kubebuilder:validation:Optional
	RegistrationEnabled *bool `json:"registrationEnabled,omitempty" tf:"registration_enabled"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	VirtualNetworkID string `json:"virtualNetworkId" tf:"virtual_network_id"`
}

// PrivateDnsZoneVirtualNetworkLinkSpec defines the desired state of PrivateDnsZoneVirtualNetworkLink
type PrivateDnsZoneVirtualNetworkLinkSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PrivateDnsZoneVirtualNetworkLinkParameters `json:"forProvider"`
}

// PrivateDnsZoneVirtualNetworkLinkStatus defines the observed state of PrivateDnsZoneVirtualNetworkLink.
type PrivateDnsZoneVirtualNetworkLinkStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PrivateDnsZoneVirtualNetworkLinkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateDnsZoneVirtualNetworkLink is the Schema for the PrivateDnsZoneVirtualNetworkLinks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PrivateDnsZoneVirtualNetworkLink struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrivateDnsZoneVirtualNetworkLinkSpec   `json:"spec"`
	Status            PrivateDnsZoneVirtualNetworkLinkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateDnsZoneVirtualNetworkLinkList contains a list of PrivateDnsZoneVirtualNetworkLinks
type PrivateDnsZoneVirtualNetworkLinkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivateDnsZoneVirtualNetworkLink `json:"items"`
}

// Repository type metadata.
var (
	PrivateDnsZoneVirtualNetworkLinkKind             = "PrivateDnsZoneVirtualNetworkLink"
	PrivateDnsZoneVirtualNetworkLinkGroupKind        = schema.GroupKind{Group: Group, Kind: PrivateDnsZoneVirtualNetworkLinkKind}.String()
	PrivateDnsZoneVirtualNetworkLinkKindAPIVersion   = PrivateDnsZoneVirtualNetworkLinkKind + "." + GroupVersion.String()
	PrivateDnsZoneVirtualNetworkLinkGroupVersionKind = GroupVersion.WithKind(PrivateDnsZoneVirtualNetworkLinkKind)
)

func init() {
	SchemeBuilder.Register(&PrivateDnsZoneVirtualNetworkLink{}, &PrivateDnsZoneVirtualNetworkLinkList{})
}
