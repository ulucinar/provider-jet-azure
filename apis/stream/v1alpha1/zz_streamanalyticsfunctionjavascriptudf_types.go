/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type InputObservation struct {
}

type InputParameters struct {

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type OutputObservation struct {
}

type OutputParameters struct {

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type StreamAnalyticsFunctionJavascriptUdfObservation struct {
}

type StreamAnalyticsFunctionJavascriptUdfParameters struct {

	// +kubebuilder:validation:Required
	Input []InputParameters `json:"input" tf:"input"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Output []OutputParameters `json:"output" tf:"output"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Script string `json:"script" tf:"script"`

	// +kubebuilder:validation:Required
	StreamAnalyticsJobName string `json:"streamAnalyticsJobName" tf:"stream_analytics_job_name"`
}

// StreamAnalyticsFunctionJavascriptUdfSpec defines the desired state of StreamAnalyticsFunctionJavascriptUdf
type StreamAnalyticsFunctionJavascriptUdfSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StreamAnalyticsFunctionJavascriptUdfParameters `json:"forProvider"`
}

// StreamAnalyticsFunctionJavascriptUdfStatus defines the observed state of StreamAnalyticsFunctionJavascriptUdf.
type StreamAnalyticsFunctionJavascriptUdfStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StreamAnalyticsFunctionJavascriptUdfObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StreamAnalyticsFunctionJavascriptUdf is the Schema for the StreamAnalyticsFunctionJavascriptUdfs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type StreamAnalyticsFunctionJavascriptUdf struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StreamAnalyticsFunctionJavascriptUdfSpec   `json:"spec"`
	Status            StreamAnalyticsFunctionJavascriptUdfStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StreamAnalyticsFunctionJavascriptUdfList contains a list of StreamAnalyticsFunctionJavascriptUdfs
type StreamAnalyticsFunctionJavascriptUdfList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StreamAnalyticsFunctionJavascriptUdf `json:"items"`
}

// Repository type metadata.
var (
	StreamAnalyticsFunctionJavascriptUdfKind             = "StreamAnalyticsFunctionJavascriptUdf"
	StreamAnalyticsFunctionJavascriptUdfGroupKind        = schema.GroupKind{Group: Group, Kind: StreamAnalyticsFunctionJavascriptUdfKind}.String()
	StreamAnalyticsFunctionJavascriptUdfKindAPIVersion   = StreamAnalyticsFunctionJavascriptUdfKind + "." + GroupVersion.String()
	StreamAnalyticsFunctionJavascriptUdfGroupVersionKind = GroupVersion.WithKind(StreamAnalyticsFunctionJavascriptUdfKind)
)

func init() {
	SchemeBuilder.Register(&StreamAnalyticsFunctionJavascriptUdf{}, &StreamAnalyticsFunctionJavascriptUdfList{})
}
