/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type StreamAnalyticsOutputServicebusQueueObservation struct {
}

type StreamAnalyticsOutputServicebusQueueParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	QueueName string `json:"queueName" tf:"queue_name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Serialization []StreamAnalyticsOutputServicebusQueueSerializationParameters `json:"serialization" tf:"serialization"`

	// +kubebuilder:validation:Required
	ServicebusNamespace string `json:"servicebusNamespace" tf:"servicebus_namespace"`

	// +kubebuilder:validation:Required
	SharedAccessPolicyKey string `json:"sharedAccessPolicyKey" tf:"shared_access_policy_key"`

	// +kubebuilder:validation:Required
	SharedAccessPolicyName string `json:"sharedAccessPolicyName" tf:"shared_access_policy_name"`

	// +kubebuilder:validation:Required
	StreamAnalyticsJobName string `json:"streamAnalyticsJobName" tf:"stream_analytics_job_name"`
}

type StreamAnalyticsOutputServicebusQueueSerializationObservation struct {
}

type StreamAnalyticsOutputServicebusQueueSerializationParameters struct {

	// +kubebuilder:validation:Optional
	Encoding *string `json:"encoding,omitempty" tf:"encoding"`

	// +kubebuilder:validation:Optional
	FieldDelimiter *string `json:"fieldDelimiter,omitempty" tf:"field_delimiter"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

// StreamAnalyticsOutputServicebusQueueSpec defines the desired state of StreamAnalyticsOutputServicebusQueue
type StreamAnalyticsOutputServicebusQueueSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StreamAnalyticsOutputServicebusQueueParameters `json:"forProvider"`
}

// StreamAnalyticsOutputServicebusQueueStatus defines the observed state of StreamAnalyticsOutputServicebusQueue.
type StreamAnalyticsOutputServicebusQueueStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StreamAnalyticsOutputServicebusQueueObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StreamAnalyticsOutputServicebusQueue is the Schema for the StreamAnalyticsOutputServicebusQueues API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type StreamAnalyticsOutputServicebusQueue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StreamAnalyticsOutputServicebusQueueSpec   `json:"spec"`
	Status            StreamAnalyticsOutputServicebusQueueStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StreamAnalyticsOutputServicebusQueueList contains a list of StreamAnalyticsOutputServicebusQueues
type StreamAnalyticsOutputServicebusQueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StreamAnalyticsOutputServicebusQueue `json:"items"`
}

// Repository type metadata.
var (
	StreamAnalyticsOutputServicebusQueueKind             = "StreamAnalyticsOutputServicebusQueue"
	StreamAnalyticsOutputServicebusQueueGroupKind        = schema.GroupKind{Group: Group, Kind: StreamAnalyticsOutputServicebusQueueKind}.String()
	StreamAnalyticsOutputServicebusQueueKindAPIVersion   = StreamAnalyticsOutputServicebusQueueKind + "." + GroupVersion.String()
	StreamAnalyticsOutputServicebusQueueGroupVersionKind = GroupVersion.WithKind(StreamAnalyticsOutputServicebusQueueKind)
)

func init() {
	SchemeBuilder.Register(&StreamAnalyticsOutputServicebusQueue{}, &StreamAnalyticsOutputServicebusQueueList{})
}
