/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type SerializationObservation struct {
}

type SerializationParameters struct {

	// +kubebuilder:validation:Optional
	Encoding *string `json:"encoding,omitempty" tf:"encoding"`

	// +kubebuilder:validation:Optional
	FieldDelimiter *string `json:"fieldDelimiter,omitempty" tf:"field_delimiter"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type StreamAnalyticsOutputBlobObservation struct {
}

type StreamAnalyticsOutputBlobParameters struct {

	// +kubebuilder:validation:Required
	DateFormat string `json:"dateFormat" tf:"date_format"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	PathPattern string `json:"pathPattern" tf:"path_pattern"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Serialization []SerializationParameters `json:"serialization" tf:"serialization"`

	// +kubebuilder:validation:Required
	StorageAccountKey string `json:"storageAccountKey" tf:"storage_account_key"`

	// +kubebuilder:validation:Required
	StorageAccountName string `json:"storageAccountName" tf:"storage_account_name"`

	// +kubebuilder:validation:Required
	StorageContainerName string `json:"storageContainerName" tf:"storage_container_name"`

	// +kubebuilder:validation:Required
	StreamAnalyticsJobName string `json:"streamAnalyticsJobName" tf:"stream_analytics_job_name"`

	// +kubebuilder:validation:Required
	TimeFormat string `json:"timeFormat" tf:"time_format"`
}

// StreamAnalyticsOutputBlobSpec defines the desired state of StreamAnalyticsOutputBlob
type StreamAnalyticsOutputBlobSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StreamAnalyticsOutputBlobParameters `json:"forProvider"`
}

// StreamAnalyticsOutputBlobStatus defines the observed state of StreamAnalyticsOutputBlob.
type StreamAnalyticsOutputBlobStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StreamAnalyticsOutputBlobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StreamAnalyticsOutputBlob is the Schema for the StreamAnalyticsOutputBlobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type StreamAnalyticsOutputBlob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StreamAnalyticsOutputBlobSpec   `json:"spec"`
	Status            StreamAnalyticsOutputBlobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StreamAnalyticsOutputBlobList contains a list of StreamAnalyticsOutputBlobs
type StreamAnalyticsOutputBlobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StreamAnalyticsOutputBlob `json:"items"`
}

// Repository type metadata.
var (
	StreamAnalyticsOutputBlobKind             = "StreamAnalyticsOutputBlob"
	StreamAnalyticsOutputBlobGroupKind        = schema.GroupKind{Group: Group, Kind: StreamAnalyticsOutputBlobKind}.String()
	StreamAnalyticsOutputBlobKindAPIVersion   = StreamAnalyticsOutputBlobKind + "." + GroupVersion.String()
	StreamAnalyticsOutputBlobGroupVersionKind = GroupVersion.WithKind(StreamAnalyticsOutputBlobKind)
)

func init() {
	SchemeBuilder.Register(&StreamAnalyticsOutputBlob{}, &StreamAnalyticsOutputBlobList{})
}
