/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type StreamAnalyticsJobObservation struct {
	JobID string `json:"jobId,omitempty" tf:"job_id"`
}

type StreamAnalyticsJobParameters struct {

	// +kubebuilder:validation:Optional
	CompatibilityLevel *string `json:"compatibilityLevel,omitempty" tf:"compatibility_level"`

	// +kubebuilder:validation:Optional
	DataLocale *string `json:"dataLocale,omitempty" tf:"data_locale"`

	// +kubebuilder:validation:Optional
	EventsLateArrivalMaxDelayInSeconds *int64 `json:"eventsLateArrivalMaxDelayInSeconds,omitempty" tf:"events_late_arrival_max_delay_in_seconds"`

	// +kubebuilder:validation:Optional
	EventsOutOfOrderMaxDelayInSeconds *int64 `json:"eventsOutOfOrderMaxDelayInSeconds,omitempty" tf:"events_out_of_order_max_delay_in_seconds"`

	// +kubebuilder:validation:Optional
	EventsOutOfOrderPolicy *string `json:"eventsOutOfOrderPolicy,omitempty" tf:"events_out_of_order_policy"`

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	OutputErrorPolicy *string `json:"outputErrorPolicy,omitempty" tf:"output_error_policy"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	StreamingUnits int64 `json:"streamingUnits" tf:"streaming_units"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	TransformationQuery string `json:"transformationQuery" tf:"transformation_query"`
}

// StreamAnalyticsJobSpec defines the desired state of StreamAnalyticsJob
type StreamAnalyticsJobSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StreamAnalyticsJobParameters `json:"forProvider"`
}

// StreamAnalyticsJobStatus defines the observed state of StreamAnalyticsJob.
type StreamAnalyticsJobStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StreamAnalyticsJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StreamAnalyticsJob is the Schema for the StreamAnalyticsJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type StreamAnalyticsJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StreamAnalyticsJobSpec   `json:"spec"`
	Status            StreamAnalyticsJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StreamAnalyticsJobList contains a list of StreamAnalyticsJobs
type StreamAnalyticsJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StreamAnalyticsJob `json:"items"`
}

// Repository type metadata.
var (
	StreamAnalyticsJobKind             = "StreamAnalyticsJob"
	StreamAnalyticsJobGroupKind        = schema.GroupKind{Group: Group, Kind: StreamAnalyticsJobKind}.String()
	StreamAnalyticsJobKindAPIVersion   = StreamAnalyticsJobKind + "." + GroupVersion.String()
	StreamAnalyticsJobGroupVersionKind = GroupVersion.WithKind(StreamAnalyticsJobKind)
)

func init() {
	SchemeBuilder.Register(&StreamAnalyticsJob{}, &StreamAnalyticsJobList{})
}
