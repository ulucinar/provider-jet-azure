/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type SubscriptionPolicyAssignmentObservation struct {
}

type SubscriptionPolicyAssignmentParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`

	// +kubebuilder:validation:Optional
	Enforce *bool `json:"enforce,omitempty" tf:"enforce"`

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location"`

	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	NotScopes []string `json:"notScopes,omitempty" tf:"not_scopes"`

	// +kubebuilder:validation:Optional
	Parameters *string `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	PolicyDefinitionID string `json:"policyDefinitionId" tf:"policy_definition_id"`

	// +kubebuilder:validation:Required
	SubscriptionID string `json:"subscriptionId" tf:"subscription_id"`
}

// SubscriptionPolicyAssignmentSpec defines the desired state of SubscriptionPolicyAssignment
type SubscriptionPolicyAssignmentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SubscriptionPolicyAssignmentParameters `json:"forProvider"`
}

// SubscriptionPolicyAssignmentStatus defines the observed state of SubscriptionPolicyAssignment.
type SubscriptionPolicyAssignmentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SubscriptionPolicyAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionPolicyAssignment is the Schema for the SubscriptionPolicyAssignments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SubscriptionPolicyAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SubscriptionPolicyAssignmentSpec   `json:"spec"`
	Status            SubscriptionPolicyAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionPolicyAssignmentList contains a list of SubscriptionPolicyAssignments
type SubscriptionPolicyAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SubscriptionPolicyAssignment `json:"items"`
}

// Repository type metadata.
var (
	SubscriptionPolicyAssignmentKind             = "SubscriptionPolicyAssignment"
	SubscriptionPolicyAssignmentGroupKind        = schema.GroupKind{Group: Group, Kind: SubscriptionPolicyAssignmentKind}.String()
	SubscriptionPolicyAssignmentKindAPIVersion   = SubscriptionPolicyAssignmentKind + "." + GroupVersion.String()
	SubscriptionPolicyAssignmentGroupVersionKind = GroupVersion.WithKind(SubscriptionPolicyAssignmentKind)
)

func init() {
	SchemeBuilder.Register(&SubscriptionPolicyAssignment{}, &SubscriptionPolicyAssignmentList{})
}
