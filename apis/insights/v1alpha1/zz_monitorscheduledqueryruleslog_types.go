/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DimensionObservation struct {
}

type DimensionParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type MonitorScheduledQueryRulesLogCriteriaObservation struct {
}

type MonitorScheduledQueryRulesLogCriteriaParameters struct {

	// +kubebuilder:validation:Required
	Dimension []DimensionParameters `json:"dimension" tf:"dimension,omitempty"`

	// +kubebuilder:validation:Required
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`
}

type MonitorScheduledQueryRulesLogObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MonitorScheduledQueryRulesLogParameters struct {

	// +kubebuilder:validation:Optional
	AuthorizedResourceIds []*string `json:"authorizedResourceIds,omitempty" tf:"authorized_resource_ids,omitempty"`

	// +kubebuilder:validation:Required
	Criteria []MonitorScheduledQueryRulesLogCriteriaParameters `json:"criteria" tf:"criteria,omitempty"`

	// +kubebuilder:validation:Required
	DataSourceID *string `json:"dataSourceId" tf:"data_source_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// MonitorScheduledQueryRulesLogSpec defines the desired state of MonitorScheduledQueryRulesLog
type MonitorScheduledQueryRulesLogSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MonitorScheduledQueryRulesLogParameters `json:"forProvider"`
}

// MonitorScheduledQueryRulesLogStatus defines the observed state of MonitorScheduledQueryRulesLog.
type MonitorScheduledQueryRulesLogStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MonitorScheduledQueryRulesLogObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorScheduledQueryRulesLog is the Schema for the MonitorScheduledQueryRulesLogs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type MonitorScheduledQueryRulesLog struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitorScheduledQueryRulesLogSpec   `json:"spec"`
	Status            MonitorScheduledQueryRulesLogStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorScheduledQueryRulesLogList contains a list of MonitorScheduledQueryRulesLogs
type MonitorScheduledQueryRulesLogList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorScheduledQueryRulesLog `json:"items"`
}

// Repository type metadata.
var (
	MonitorScheduledQueryRulesLog_Kind             = "MonitorScheduledQueryRulesLog"
	MonitorScheduledQueryRulesLog_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MonitorScheduledQueryRulesLog_Kind}.String()
	MonitorScheduledQueryRulesLog_KindAPIVersion   = MonitorScheduledQueryRulesLog_Kind + "." + CRDGroupVersion.String()
	MonitorScheduledQueryRulesLog_GroupVersionKind = CRDGroupVersion.WithKind(MonitorScheduledQueryRulesLog_Kind)
)

func init() {
	SchemeBuilder.Register(&MonitorScheduledQueryRulesLog{}, &MonitorScheduledQueryRulesLogList{})
}
