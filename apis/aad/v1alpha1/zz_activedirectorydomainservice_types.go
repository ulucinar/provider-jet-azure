/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActiveDirectoryDomainServiceObservation struct {
	DeploymentID *string `json:"deploymentId,omitempty" tf:"deployment_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	SyncOwner *string `json:"syncOwner,omitempty" tf:"sync_owner,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	Version *int64 `json:"version,omitempty" tf:"version,omitempty"`
}

type ActiveDirectoryDomainServiceParameters struct {

	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName" tf:"domain_name,omitempty"`

	// +kubebuilder:validation:Optional
	FilteredSyncEnabled *bool `json:"filteredSyncEnabled,omitempty" tf:"filtered_sync_enabled,omitempty"`

	// +kubebuilder:validation:Required
	InitialReplicaSet []InitialReplicaSetParameters `json:"initialReplicaSet" tf:"initial_replica_set,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Notifications []NotificationsParameters `json:"notifications,omitempty" tf:"notifications,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SecureLdap []SecureLdapParameters `json:"secureLdap,omitempty" tf:"secure_ldap,omitempty"`

	// +kubebuilder:validation:Optional
	Security []SecurityParameters `json:"security,omitempty" tf:"security,omitempty"`

	// +kubebuilder:validation:Required
	Sku *string `json:"sku" tf:"sku,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type InitialReplicaSetObservation struct {
	DomainControllerIPAddresses []*string `json:"domainControllerIpAddresses,omitempty" tf:"domain_controller_ip_addresses,omitempty"`

	ExternalAccessIPAddress *string `json:"externalAccessIpAddress,omitempty" tf:"external_access_ip_address,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	ServiceStatus *string `json:"serviceStatus,omitempty" tf:"service_status,omitempty"`
}

type InitialReplicaSetParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/network/v1alpha2.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-jet-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type NotificationsObservation struct {
}

type NotificationsParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// +kubebuilder:validation:Optional
	NotifyDcAdmins *bool `json:"notifyDcAdmins,omitempty" tf:"notify_dc_admins,omitempty"`

	// +kubebuilder:validation:Optional
	NotifyGlobalAdmins *bool `json:"notifyGlobalAdmins,omitempty" tf:"notify_global_admins,omitempty"`
}

type SecureLdapObservation struct {
	CertificateExpiry *string `json:"certificateExpiry,omitempty" tf:"certificate_expiry,omitempty"`

	CertificateThumbprint *string `json:"certificateThumbprint,omitempty" tf:"certificate_thumbprint,omitempty"`

	PublicCertificate *string `json:"publicCertificate,omitempty" tf:"public_certificate,omitempty"`
}

type SecureLdapParameters struct {

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ExternalAccessEnabled *bool `json:"externalAccessEnabled,omitempty" tf:"external_access_enabled,omitempty"`

	// +kubebuilder:validation:Required
	PfxCertificatePasswordSecretRef v1.SecretKeySelector `json:"pfxCertificatePasswordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	PfxCertificateSecretRef v1.SecretKeySelector `json:"pfxCertificateSecretRef" tf:"-"`
}

type SecurityObservation struct {
}

type SecurityParameters struct {

	// +kubebuilder:validation:Optional
	NtlmV1Enabled *bool `json:"ntlmV1Enabled,omitempty" tf:"ntlm_v1_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	SyncKerberosPasswords *bool `json:"syncKerberosPasswords,omitempty" tf:"sync_kerberos_passwords,omitempty"`

	// +kubebuilder:validation:Optional
	SyncNtlmPasswords *bool `json:"syncNtlmPasswords,omitempty" tf:"sync_ntlm_passwords,omitempty"`

	// +kubebuilder:validation:Optional
	SyncOnPremPasswords *bool `json:"syncOnPremPasswords,omitempty" tf:"sync_on_prem_passwords,omitempty"`

	// +kubebuilder:validation:Optional
	TLSV1Enabled *bool `json:"tlsV1Enabled,omitempty" tf:"tls_v1_enabled,omitempty"`
}

// ActiveDirectoryDomainServiceSpec defines the desired state of ActiveDirectoryDomainService
type ActiveDirectoryDomainServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ActiveDirectoryDomainServiceParameters `json:"forProvider"`
}

// ActiveDirectoryDomainServiceStatus defines the observed state of ActiveDirectoryDomainService.
type ActiveDirectoryDomainServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ActiveDirectoryDomainServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ActiveDirectoryDomainService is the Schema for the ActiveDirectoryDomainServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ActiveDirectoryDomainService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ActiveDirectoryDomainServiceSpec   `json:"spec"`
	Status            ActiveDirectoryDomainServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ActiveDirectoryDomainServiceList contains a list of ActiveDirectoryDomainServices
type ActiveDirectoryDomainServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ActiveDirectoryDomainService `json:"items"`
}

// Repository type metadata.
var (
	ActiveDirectoryDomainService_Kind             = "ActiveDirectoryDomainService"
	ActiveDirectoryDomainService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ActiveDirectoryDomainService_Kind}.String()
	ActiveDirectoryDomainService_KindAPIVersion   = ActiveDirectoryDomainService_Kind + "." + CRDGroupVersion.String()
	ActiveDirectoryDomainService_GroupVersionKind = CRDGroupVersion.WithKind(ActiveDirectoryDomainService_Kind)
)

func init() {
	SchemeBuilder.Register(&ActiveDirectoryDomainService{}, &ActiveDirectoryDomainServiceList{})
}
