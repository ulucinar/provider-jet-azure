/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiManagementApiOperationObservation struct {
}

type ApiManagementApiOperationParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName string `json:"apiManagementName" tf:"api_management_name"`

	// +kubebuilder:validation:Required
	APIName string `json:"apiName" tf:"api_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	DisplayName string `json:"displayName" tf:"display_name"`

	// +kubebuilder:validation:Required
	Method string `json:"method" tf:"method"`

	// +kubebuilder:validation:Required
	OperationID string `json:"operationId" tf:"operation_id"`

	// +kubebuilder:validation:Optional
	Request []RequestParameters `json:"request,omitempty" tf:"request"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Response []ResponseParameters `json:"response,omitempty" tf:"response"`

	// +kubebuilder:validation:Optional
	TemplateParameter []TemplateParameterParameters `json:"templateParameter,omitempty" tf:"template_parameter"`

	// +kubebuilder:validation:Required
	URLTemplate string `json:"urlTemplate" tf:"url_template"`
}

type FormParameterObservation struct {
}

type FormParameterParameters struct {

	// +kubebuilder:validation:Optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Required bool `json:"required" tf:"required"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`

	// +kubebuilder:validation:Optional
	Values []string `json:"values,omitempty" tf:"values"`
}

type HeaderObservation struct {
}

type HeaderParameters struct {

	// +kubebuilder:validation:Optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Required bool `json:"required" tf:"required"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`

	// +kubebuilder:validation:Optional
	Values []string `json:"values,omitempty" tf:"values"`
}

type QueryParameterObservation struct {
}

type QueryParameterParameters struct {

	// +kubebuilder:validation:Optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Required bool `json:"required" tf:"required"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`

	// +kubebuilder:validation:Optional
	Values []string `json:"values,omitempty" tf:"values"`
}

type RepresentationFormParameterObservation struct {
}

type RepresentationFormParameterParameters struct {

	// +kubebuilder:validation:Optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Required bool `json:"required" tf:"required"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`

	// +kubebuilder:validation:Optional
	Values []string `json:"values,omitempty" tf:"values"`
}

type RepresentationObservation struct {
}

type RepresentationParameters struct {

	// +kubebuilder:validation:Required
	ContentType string `json:"contentType" tf:"content_type"`

	// +kubebuilder:validation:Optional
	FormParameter []FormParameterParameters `json:"formParameter,omitempty" tf:"form_parameter"`

	// +kubebuilder:validation:Optional
	Sample *string `json:"sample,omitempty" tf:"sample"`

	// +kubebuilder:validation:Optional
	SchemaID *string `json:"schemaId,omitempty" tf:"schema_id"`

	// +kubebuilder:validation:Optional
	TypeName *string `json:"typeName,omitempty" tf:"type_name"`
}

type RequestObservation struct {
}

type RequestParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	Header []HeaderParameters `json:"header,omitempty" tf:"header"`

	// +kubebuilder:validation:Optional
	QueryParameter []QueryParameterParameters `json:"queryParameter,omitempty" tf:"query_parameter"`

	// +kubebuilder:validation:Optional
	Representation []RepresentationParameters `json:"representation,omitempty" tf:"representation"`
}

type ResponseHeaderObservation struct {
}

type ResponseHeaderParameters struct {

	// +kubebuilder:validation:Optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Required bool `json:"required" tf:"required"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`

	// +kubebuilder:validation:Optional
	Values []string `json:"values,omitempty" tf:"values"`
}

type ResponseObservation struct {
}

type ResponseParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	Header []ResponseHeaderParameters `json:"header,omitempty" tf:"header"`

	// +kubebuilder:validation:Optional
	Representation []ResponseRepresentationParameters `json:"representation,omitempty" tf:"representation"`

	// +kubebuilder:validation:Required
	StatusCode int64 `json:"statusCode" tf:"status_code"`
}

type ResponseRepresentationObservation struct {
}

type ResponseRepresentationParameters struct {

	// +kubebuilder:validation:Required
	ContentType string `json:"contentType" tf:"content_type"`

	// +kubebuilder:validation:Optional
	FormParameter []RepresentationFormParameterParameters `json:"formParameter,omitempty" tf:"form_parameter"`

	// +kubebuilder:validation:Optional
	Sample *string `json:"sample,omitempty" tf:"sample"`

	// +kubebuilder:validation:Optional
	SchemaID *string `json:"schemaId,omitempty" tf:"schema_id"`

	// +kubebuilder:validation:Optional
	TypeName *string `json:"typeName,omitempty" tf:"type_name"`
}

type TemplateParameterObservation struct {
}

type TemplateParameterParameters struct {

	// +kubebuilder:validation:Optional
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Required bool `json:"required" tf:"required"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`

	// +kubebuilder:validation:Optional
	Values []string `json:"values,omitempty" tf:"values"`
}

// ApiManagementApiOperationSpec defines the desired state of ApiManagementApiOperation
type ApiManagementApiOperationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiManagementApiOperationParameters `json:"forProvider"`
}

// ApiManagementApiOperationStatus defines the observed state of ApiManagementApiOperation.
type ApiManagementApiOperationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiManagementApiOperationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementApiOperation is the Schema for the ApiManagementApiOperations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApiManagementApiOperation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiManagementApiOperationSpec   `json:"spec"`
	Status            ApiManagementApiOperationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementApiOperationList contains a list of ApiManagementApiOperations
type ApiManagementApiOperationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiManagementApiOperation `json:"items"`
}

// Repository type metadata.
var (
	ApiManagementApiOperationKind             = "ApiManagementApiOperation"
	ApiManagementApiOperationGroupKind        = schema.GroupKind{Group: Group, Kind: ApiManagementApiOperationKind}.String()
	ApiManagementApiOperationKindAPIVersion   = ApiManagementApiOperationKind + "." + GroupVersion.String()
	ApiManagementApiOperationGroupVersionKind = GroupVersion.WithKind(ApiManagementApiOperationKind)
)

func init() {
	SchemeBuilder.Register(&ApiManagementApiOperation{}, &ApiManagementApiOperationList{})
}
