/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiManagementPolicyObservation struct {
}

type ApiManagementPolicyParameters struct {

	// +kubebuilder:validation:Required
	APIManagementID string `json:"apiManagementId" tf:"api_management_id"`

	// +kubebuilder:validation:Optional
	XMLContent *string `json:"xmlContent,omitempty" tf:"xml_content"`

	// +kubebuilder:validation:Optional
	XMLLink *string `json:"xmlLink,omitempty" tf:"xml_link"`
}

// ApiManagementPolicySpec defines the desired state of ApiManagementPolicy
type ApiManagementPolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiManagementPolicyParameters `json:"forProvider"`
}

// ApiManagementPolicyStatus defines the observed state of ApiManagementPolicy.
type ApiManagementPolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiManagementPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementPolicy is the Schema for the ApiManagementPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApiManagementPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiManagementPolicySpec   `json:"spec"`
	Status            ApiManagementPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementPolicyList contains a list of ApiManagementPolicys
type ApiManagementPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiManagementPolicy `json:"items"`
}

// Repository type metadata.
var (
	ApiManagementPolicyKind             = "ApiManagementPolicy"
	ApiManagementPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: ApiManagementPolicyKind}.String()
	ApiManagementPolicyKindAPIVersion   = ApiManagementPolicyKind + "." + GroupVersion.String()
	ApiManagementPolicyGroupVersionKind = GroupVersion.WithKind(ApiManagementPolicyKind)
)

func init() {
	SchemeBuilder.Register(&ApiManagementPolicy{}, &ApiManagementPolicyList{})
}
