/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiManagementTagObservation struct {
}

type ApiManagementTagParameters struct {

	// +kubebuilder:validation:Required
	APIManagementID string `json:"apiManagementId" tf:"api_management_id"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`
}

// ApiManagementTagSpec defines the desired state of ApiManagementTag
type ApiManagementTagSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiManagementTagParameters `json:"forProvider"`
}

// ApiManagementTagStatus defines the observed state of ApiManagementTag.
type ApiManagementTagStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiManagementTagObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementTag is the Schema for the ApiManagementTags API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApiManagementTag struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiManagementTagSpec   `json:"spec"`
	Status            ApiManagementTagStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementTagList contains a list of ApiManagementTags
type ApiManagementTagList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiManagementTag `json:"items"`
}

// Repository type metadata.
var (
	ApiManagementTagKind             = "ApiManagementTag"
	ApiManagementTagGroupKind        = schema.GroupKind{Group: Group, Kind: ApiManagementTagKind}.String()
	ApiManagementTagKindAPIVersion   = ApiManagementTagKind + "." + GroupVersion.String()
	ApiManagementTagGroupVersionKind = GroupVersion.WithKind(ApiManagementTagKind)
)

func init() {
	SchemeBuilder.Register(&ApiManagementTag{}, &ApiManagementTagList{})
}
