/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AdditionalLocationObservation struct {
	GatewayRegionalURL string `json:"gatewayRegionalUrl,omitempty" tf:"gateway_regional_url"`

	PrivateIPAddresses []string `json:"privateIpAddresses,omitempty" tf:"private_ip_addresses"`

	PublicIPAddresses []string `json:"publicIpAddresses,omitempty" tf:"public_ip_addresses"`
}

type AdditionalLocationParameters struct {

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	VirtualNetworkConfiguration []VirtualNetworkConfigurationParameters `json:"virtualNetworkConfiguration,omitempty" tf:"virtual_network_configuration"`
}

type ApiManagementObservation struct {
	DeveloperPortalURL string `json:"developerPortalUrl,omitempty" tf:"developer_portal_url"`

	GatewayRegionalURL string `json:"gatewayRegionalUrl,omitempty" tf:"gateway_regional_url"`

	GatewayURL string `json:"gatewayUrl,omitempty" tf:"gateway_url"`

	ManagementAPIURL string `json:"managementApiUrl,omitempty" tf:"management_api_url"`

	PortalURL string `json:"portalUrl,omitempty" tf:"portal_url"`

	PrivateIPAddresses []string `json:"privateIpAddresses,omitempty" tf:"private_ip_addresses"`

	PublicIPAddresses []string `json:"publicIpAddresses,omitempty" tf:"public_ip_addresses"`

	ScmURL string `json:"scmUrl,omitempty" tf:"scm_url"`
}

type ApiManagementParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalLocation []AdditionalLocationParameters `json:"additionalLocation,omitempty" tf:"additional_location"`

	// +kubebuilder:validation:Optional
	Certificate []CertificateParameters `json:"certificate,omitempty" tf:"certificate"`

	// +kubebuilder:validation:Optional
	ClientCertificateEnabled *bool `json:"clientCertificateEnabled,omitempty" tf:"client_certificate_enabled"`

	// +kubebuilder:validation:Optional
	GatewayDisabled *bool `json:"gatewayDisabled,omitempty" tf:"gateway_disabled"`

	// +kubebuilder:validation:Optional
	HostnameConfiguration []HostnameConfigurationParameters `json:"hostnameConfiguration,omitempty" tf:"hostname_configuration"`

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	MinAPIVersion *string `json:"minApiVersion,omitempty" tf:"min_api_version"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	NotificationSenderEmail *string `json:"notificationSenderEmail,omitempty" tf:"notification_sender_email"`

	// +kubebuilder:validation:Optional
	Policy []PolicyParameters `json:"policy,omitempty" tf:"policy"`

	// +kubebuilder:validation:Optional
	Protocols []ProtocolsParameters `json:"protocols,omitempty" tf:"protocols"`

	// +kubebuilder:validation:Required
	PublisherEmail string `json:"publisherEmail" tf:"publisher_email"`

	// +kubebuilder:validation:Required
	PublisherName string `json:"publisherName" tf:"publisher_name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Security []SecurityParameters `json:"security,omitempty" tf:"security"`

	// +kubebuilder:validation:Optional
	SignIn []SignInParameters `json:"signIn,omitempty" tf:"sign_in"`

	// +kubebuilder:validation:Optional
	SignUp []SignUpParameters `json:"signUp,omitempty" tf:"sign_up"`

	// +kubebuilder:validation:Required
	SkuName string `json:"skuName" tf:"sku_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TenantAccess []TenantAccessParameters `json:"tenantAccess,omitempty" tf:"tenant_access"`

	// +kubebuilder:validation:Optional
	VirtualNetworkConfiguration []ApiManagementVirtualNetworkConfigurationParameters `json:"virtualNetworkConfiguration,omitempty" tf:"virtual_network_configuration"`

	// +kubebuilder:validation:Optional
	VirtualNetworkType *string `json:"virtualNetworkType,omitempty" tf:"virtual_network_type"`

	// +kubebuilder:validation:Optional
	Zones []string `json:"zones,omitempty" tf:"zones"`
}

type ApiManagementVirtualNetworkConfigurationObservation struct {
}

type ApiManagementVirtualNetworkConfigurationParameters struct {

	// +kubebuilder:validation:Required
	SubnetID string `json:"subnetId" tf:"subnet_id"`
}

type CertificateObservation struct {
	Expiry string `json:"expiry,omitempty" tf:"expiry"`

	Subject string `json:"subject,omitempty" tf:"subject"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type CertificateParameters struct {

	// +kubebuilder:validation:Optional
	CertificatePassword *string `json:"certificatePassword,omitempty" tf:"certificate_password"`

	// +kubebuilder:validation:Required
	EncodedCertificate string `json:"encodedCertificate" tf:"encoded_certificate"`

	// +kubebuilder:validation:Required
	StoreName string `json:"storeName" tf:"store_name"`
}

type DeveloperPortalObservation struct {
	Expiry string `json:"expiry,omitempty" tf:"expiry"`

	Subject string `json:"subject,omitempty" tf:"subject"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type DeveloperPortalParameters struct {

	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate"`

	// +kubebuilder:validation:Optional
	CertificatePassword *string `json:"certificatePassword,omitempty" tf:"certificate_password"`

	// +kubebuilder:validation:Required
	HostName string `json:"hostName" tf:"host_name"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate"`

	// +kubebuilder:validation:Optional
	SslKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id"`
}

type HostnameConfigurationObservation struct {
}

type HostnameConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	DeveloperPortal []DeveloperPortalParameters `json:"developerPortal,omitempty" tf:"developer_portal"`

	// +kubebuilder:validation:Optional
	Management []ManagementParameters `json:"management,omitempty" tf:"management"`

	// +kubebuilder:validation:Optional
	Portal []PortalParameters `json:"portal,omitempty" tf:"portal"`

	// +kubebuilder:validation:Optional
	Proxy []ProxyParameters `json:"proxy,omitempty" tf:"proxy"`

	// +kubebuilder:validation:Optional
	Scm []ScmParameters `json:"scm,omitempty" tf:"scm"`
}

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Optional
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type ManagementObservation struct {
	Expiry string `json:"expiry,omitempty" tf:"expiry"`

	Subject string `json:"subject,omitempty" tf:"subject"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type ManagementParameters struct {

	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate"`

	// +kubebuilder:validation:Optional
	CertificatePassword *string `json:"certificatePassword,omitempty" tf:"certificate_password"`

	// +kubebuilder:validation:Required
	HostName string `json:"hostName" tf:"host_name"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate"`

	// +kubebuilder:validation:Optional
	SslKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id"`
}

type PolicyObservation struct {
}

type PolicyParameters struct {

	// +kubebuilder:validation:Optional
	XMLContent *string `json:"xmlContent,omitempty" tf:"xml_content"`

	// +kubebuilder:validation:Optional
	XMLLink *string `json:"xmlLink,omitempty" tf:"xml_link"`
}

type PortalObservation struct {
	Expiry string `json:"expiry,omitempty" tf:"expiry"`

	Subject string `json:"subject,omitempty" tf:"subject"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type PortalParameters struct {

	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate"`

	// +kubebuilder:validation:Optional
	CertificatePassword *string `json:"certificatePassword,omitempty" tf:"certificate_password"`

	// +kubebuilder:validation:Required
	HostName string `json:"hostName" tf:"host_name"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate"`

	// +kubebuilder:validation:Optional
	SslKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id"`
}

type ProtocolsObservation struct {
}

type ProtocolsParameters struct {

	// +kubebuilder:validation:Optional
	EnableHttp2 *bool `json:"enableHttp2,omitempty" tf:"enable_http2"`
}

type ProxyObservation struct {
	Expiry string `json:"expiry,omitempty" tf:"expiry"`

	Subject string `json:"subject,omitempty" tf:"subject"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type ProxyParameters struct {

	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate"`

	// +kubebuilder:validation:Optional
	CertificatePassword *string `json:"certificatePassword,omitempty" tf:"certificate_password"`

	// +kubebuilder:validation:Optional
	DefaultSslBinding *bool `json:"defaultSslBinding,omitempty" tf:"default_ssl_binding"`

	// +kubebuilder:validation:Required
	HostName string `json:"hostName" tf:"host_name"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate"`

	// +kubebuilder:validation:Optional
	SslKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id"`
}

type ScmObservation struct {
	Expiry string `json:"expiry,omitempty" tf:"expiry"`

	Subject string `json:"subject,omitempty" tf:"subject"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type ScmParameters struct {

	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate"`

	// +kubebuilder:validation:Optional
	CertificatePassword *string `json:"certificatePassword,omitempty" tf:"certificate_password"`

	// +kubebuilder:validation:Required
	HostName string `json:"hostName" tf:"host_name"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate"`

	// +kubebuilder:validation:Optional
	SslKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id"`
}

type SecurityObservation struct {
}

type SecurityParameters struct {

	// +kubebuilder:validation:Optional
	EnableBackendSsl30 *bool `json:"enableBackendSsl30,omitempty" tf:"enable_backend_ssl30"`

	// +kubebuilder:validation:Optional
	EnableBackendTls10 *bool `json:"enableBackendTls10,omitempty" tf:"enable_backend_tls10"`

	// +kubebuilder:validation:Optional
	EnableBackendTls11 *bool `json:"enableBackendTls11,omitempty" tf:"enable_backend_tls11"`

	// +kubebuilder:validation:Optional
	EnableFrontendSsl30 *bool `json:"enableFrontendSsl30,omitempty" tf:"enable_frontend_ssl30"`

	// +kubebuilder:validation:Optional
	EnableFrontendTls10 *bool `json:"enableFrontendTls10,omitempty" tf:"enable_frontend_tls10"`

	// +kubebuilder:validation:Optional
	EnableFrontendTls11 *bool `json:"enableFrontendTls11,omitempty" tf:"enable_frontend_tls11"`

	// +kubebuilder:validation:Optional
	EnableTripleDesCiphers *bool `json:"enableTripleDesCiphers,omitempty" tf:"enable_triple_des_ciphers"`

	// +kubebuilder:validation:Optional
	TLSEcdheEcdsaWithAes128CbcShaCiphersEnabled *bool `json:"tlsEcdheEcdsaWithAes128CbcShaCiphersEnabled,omitempty" tf:"tls_ecdhe_ecdsa_with_aes128_cbc_sha_ciphers_enabled"`

	// +kubebuilder:validation:Optional
	TLSEcdheEcdsaWithAes256CbcShaCiphersEnabled *bool `json:"tlsEcdheEcdsaWithAes256CbcShaCiphersEnabled,omitempty" tf:"tls_ecdhe_ecdsa_with_aes256_cbc_sha_ciphers_enabled"`

	// +kubebuilder:validation:Optional
	TLSEcdheRsaWithAes128CbcShaCiphersEnabled *bool `json:"tlsEcdheRsaWithAes128CbcShaCiphersEnabled,omitempty" tf:"tls_ecdhe_rsa_with_aes128_cbc_sha_ciphers_enabled"`

	// +kubebuilder:validation:Optional
	TLSEcdheRsaWithAes256CbcShaCiphersEnabled *bool `json:"tlsEcdheRsaWithAes256CbcShaCiphersEnabled,omitempty" tf:"tls_ecdhe_rsa_with_aes256_cbc_sha_ciphers_enabled"`

	// +kubebuilder:validation:Optional
	TLSRsaWithAes128CbcSha256CiphersEnabled *bool `json:"tlsRsaWithAes128CbcSha256CiphersEnabled,omitempty" tf:"tls_rsa_with_aes128_cbc_sha256_ciphers_enabled"`

	// +kubebuilder:validation:Optional
	TLSRsaWithAes128CbcShaCiphersEnabled *bool `json:"tlsRsaWithAes128CbcShaCiphersEnabled,omitempty" tf:"tls_rsa_with_aes128_cbc_sha_ciphers_enabled"`

	// +kubebuilder:validation:Optional
	TLSRsaWithAes128GcmSha256CiphersEnabled *bool `json:"tlsRsaWithAes128GcmSha256CiphersEnabled,omitempty" tf:"tls_rsa_with_aes128_gcm_sha256_ciphers_enabled"`

	// +kubebuilder:validation:Optional
	TLSRsaWithAes256CbcSha256CiphersEnabled *bool `json:"tlsRsaWithAes256CbcSha256CiphersEnabled,omitempty" tf:"tls_rsa_with_aes256_cbc_sha256_ciphers_enabled"`

	// +kubebuilder:validation:Optional
	TLSRsaWithAes256CbcShaCiphersEnabled *bool `json:"tlsRsaWithAes256CbcShaCiphersEnabled,omitempty" tf:"tls_rsa_with_aes256_cbc_sha_ciphers_enabled"`

	// +kubebuilder:validation:Optional
	TripleDesCiphersEnabled *bool `json:"tripleDesCiphersEnabled,omitempty" tf:"triple_des_ciphers_enabled"`
}

type SignInObservation struct {
}

type SignInParameters struct {

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`
}

type SignUpObservation struct {
}

type SignUpParameters struct {

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`

	// +kubebuilder:validation:Required
	TermsOfService []TermsOfServiceParameters `json:"termsOfService" tf:"terms_of_service"`
}

type TenantAccessObservation struct {
	PrimaryKey string `json:"primaryKey,omitempty" tf:"primary_key"`

	SecondaryKey string `json:"secondaryKey,omitempty" tf:"secondary_key"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type TenantAccessParameters struct {

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`
}

type TermsOfServiceObservation struct {
}

type TermsOfServiceParameters struct {

	// +kubebuilder:validation:Required
	ConsentRequired bool `json:"consentRequired" tf:"consent_required"`

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`

	// +kubebuilder:validation:Optional
	Text *string `json:"text,omitempty" tf:"text"`
}

type VirtualNetworkConfigurationObservation struct {
}

type VirtualNetworkConfigurationParameters struct {

	// +kubebuilder:validation:Required
	SubnetID string `json:"subnetId" tf:"subnet_id"`
}

// ApiManagementSpec defines the desired state of ApiManagement
type ApiManagementSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiManagementParameters `json:"forProvider"`
}

// ApiManagementStatus defines the observed state of ApiManagement.
type ApiManagementStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiManagementObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagement is the Schema for the ApiManagements API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApiManagement struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiManagementSpec   `json:"spec"`
	Status            ApiManagementStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementList contains a list of ApiManagements
type ApiManagementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiManagement `json:"items"`
}

// Repository type metadata.
var (
	ApiManagementKind             = "ApiManagement"
	ApiManagementGroupKind        = schema.GroupKind{Group: Group, Kind: ApiManagementKind}.String()
	ApiManagementKindAPIVersion   = ApiManagementKind + "." + GroupVersion.String()
	ApiManagementGroupVersionKind = GroupVersion.WithKind(ApiManagementKind)
)

func init() {
	SchemeBuilder.Register(&ApiManagement{}, &ApiManagementList{})
}
