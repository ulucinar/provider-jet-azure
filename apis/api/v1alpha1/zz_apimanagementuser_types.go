/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiManagementUserObservation struct {
}

type ApiManagementUserParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName string `json:"apiManagementName" tf:"api_management_name"`

	// +kubebuilder:validation:Optional
	Confirmation *string `json:"confirmation,omitempty" tf:"confirmation"`

	// +kubebuilder:validation:Required
	Email string `json:"email" tf:"email"`

	// +kubebuilder:validation:Required
	FirstName string `json:"firstName" tf:"first_name"`

	// +kubebuilder:validation:Required
	LastName string `json:"lastName" tf:"last_name"`

	// +kubebuilder:validation:Optional
	Note *string `json:"note,omitempty" tf:"note"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state"`

	// +kubebuilder:validation:Required
	UserID string `json:"userId" tf:"user_id"`
}

// ApiManagementUserSpec defines the desired state of ApiManagementUser
type ApiManagementUserSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiManagementUserParameters `json:"forProvider"`
}

// ApiManagementUserStatus defines the observed state of ApiManagementUser.
type ApiManagementUserStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiManagementUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementUser is the Schema for the ApiManagementUsers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApiManagementUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiManagementUserSpec   `json:"spec"`
	Status            ApiManagementUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementUserList contains a list of ApiManagementUsers
type ApiManagementUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiManagementUser `json:"items"`
}

// Repository type metadata.
var (
	ApiManagementUserKind             = "ApiManagementUser"
	ApiManagementUserGroupKind        = schema.GroupKind{Group: Group, Kind: ApiManagementUserKind}.String()
	ApiManagementUserKindAPIVersion   = ApiManagementUserKind + "." + GroupVersion.String()
	ApiManagementUserGroupVersionKind = GroupVersion.WithKind(ApiManagementUserKind)
)

func init() {
	SchemeBuilder.Register(&ApiManagementUser{}, &ApiManagementUserList{})
}
