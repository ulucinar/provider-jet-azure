/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiManagementPropertyObservation struct {
}

type ApiManagementPropertyParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName string `json:"apiManagementName" tf:"api_management_name"`

	// +kubebuilder:validation:Required
	DisplayName string `json:"displayName" tf:"display_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Secret *bool `json:"secret,omitempty" tf:"secret"`

	// +kubebuilder:validation:Optional
	Tags []string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	Value string `json:"value" tf:"value"`
}

// ApiManagementPropertySpec defines the desired state of ApiManagementProperty
type ApiManagementPropertySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiManagementPropertyParameters `json:"forProvider"`
}

// ApiManagementPropertyStatus defines the observed state of ApiManagementProperty.
type ApiManagementPropertyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiManagementPropertyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementProperty is the Schema for the ApiManagementPropertys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApiManagementProperty struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiManagementPropertySpec   `json:"spec"`
	Status            ApiManagementPropertyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementPropertyList contains a list of ApiManagementPropertys
type ApiManagementPropertyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiManagementProperty `json:"items"`
}

// Repository type metadata.
var (
	ApiManagementPropertyKind             = "ApiManagementProperty"
	ApiManagementPropertyGroupKind        = schema.GroupKind{Group: Group, Kind: ApiManagementPropertyKind}.String()
	ApiManagementPropertyKindAPIVersion   = ApiManagementPropertyKind + "." + GroupVersion.String()
	ApiManagementPropertyGroupVersionKind = GroupVersion.WithKind(ApiManagementPropertyKind)
)

func init() {
	SchemeBuilder.Register(&ApiManagementProperty{}, &ApiManagementPropertyList{})
}
