/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiManagementApiSchemaObservation struct {
}

type ApiManagementApiSchemaParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName string `json:"apiManagementName" tf:"api_management_name"`

	// +kubebuilder:validation:Required
	APIName string `json:"apiName" tf:"api_name"`

	// +kubebuilder:validation:Required
	ContentType string `json:"contentType" tf:"content_type"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	SchemaID string `json:"schemaId" tf:"schema_id"`

	// +kubebuilder:validation:Required
	Value string `json:"value" tf:"value"`
}

// ApiManagementApiSchemaSpec defines the desired state of ApiManagementApiSchema
type ApiManagementApiSchemaSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiManagementApiSchemaParameters `json:"forProvider"`
}

// ApiManagementApiSchemaStatus defines the observed state of ApiManagementApiSchema.
type ApiManagementApiSchemaStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiManagementApiSchemaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementApiSchema is the Schema for the ApiManagementApiSchemas API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApiManagementApiSchema struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiManagementApiSchemaSpec   `json:"spec"`
	Status            ApiManagementApiSchemaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementApiSchemaList contains a list of ApiManagementApiSchemas
type ApiManagementApiSchemaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiManagementApiSchema `json:"items"`
}

// Repository type metadata.
var (
	ApiManagementApiSchemaKind             = "ApiManagementApiSchema"
	ApiManagementApiSchemaGroupKind        = schema.GroupKind{Group: Group, Kind: ApiManagementApiSchemaKind}.String()
	ApiManagementApiSchemaKindAPIVersion   = ApiManagementApiSchemaKind + "." + GroupVersion.String()
	ApiManagementApiSchemaGroupVersionKind = GroupVersion.WithKind(ApiManagementApiSchemaKind)
)

func init() {
	SchemeBuilder.Register(&ApiManagementApiSchema{}, &ApiManagementApiSchemaList{})
}
