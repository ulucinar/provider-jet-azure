/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiManagementProductApiObservation struct {
}

type ApiManagementProductApiParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName string `json:"apiManagementName" tf:"api_management_name"`

	// +kubebuilder:validation:Required
	APIName string `json:"apiName" tf:"api_name"`

	// +kubebuilder:validation:Required
	ProductID string `json:"productId" tf:"product_id"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

// ApiManagementProductApiSpec defines the desired state of ApiManagementProductApi
type ApiManagementProductApiSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiManagementProductApiParameters `json:"forProvider"`
}

// ApiManagementProductApiStatus defines the observed state of ApiManagementProductApi.
type ApiManagementProductApiStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiManagementProductApiObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementProductApi is the Schema for the ApiManagementProductApis API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApiManagementProductApi struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiManagementProductApiSpec   `json:"spec"`
	Status            ApiManagementProductApiStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementProductApiList contains a list of ApiManagementProductApis
type ApiManagementProductApiList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiManagementProductApi `json:"items"`
}

// Repository type metadata.
var (
	ApiManagementProductApiKind             = "ApiManagementProductApi"
	ApiManagementProductApiGroupKind        = schema.GroupKind{Group: Group, Kind: ApiManagementProductApiKind}.String()
	ApiManagementProductApiKindAPIVersion   = ApiManagementProductApiKind + "." + GroupVersion.String()
	ApiManagementProductApiGroupVersionKind = GroupVersion.WithKind(ApiManagementProductApiKind)
)

func init() {
	SchemeBuilder.Register(&ApiManagementProductApi{}, &ApiManagementProductApiList{})
}
