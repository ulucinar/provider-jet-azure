/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiManagementCertificateObservation struct {
	Expiration string `json:"expiration,omitempty" tf:"expiration"`

	Subject string `json:"subject,omitempty" tf:"subject"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type ApiManagementCertificateParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName string `json:"apiManagementName" tf:"api_management_name"`

	// +kubebuilder:validation:Optional
	Data *string `json:"data,omitempty" tf:"data"`

	// +kubebuilder:validation:Optional
	KeyVaultIdentityClientID *string `json:"keyVaultIdentityClientId,omitempty" tf:"key_vault_identity_client_id"`

	// +kubebuilder:validation:Optional
	KeyVaultSecretID *string `json:"keyVaultSecretId,omitempty" tf:"key_vault_secret_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

// ApiManagementCertificateSpec defines the desired state of ApiManagementCertificate
type ApiManagementCertificateSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiManagementCertificateParameters `json:"forProvider"`
}

// ApiManagementCertificateStatus defines the observed state of ApiManagementCertificate.
type ApiManagementCertificateStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiManagementCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementCertificate is the Schema for the ApiManagementCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApiManagementCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiManagementCertificateSpec   `json:"spec"`
	Status            ApiManagementCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementCertificateList contains a list of ApiManagementCertificates
type ApiManagementCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiManagementCertificate `json:"items"`
}

// Repository type metadata.
var (
	ApiManagementCertificateKind             = "ApiManagementCertificate"
	ApiManagementCertificateGroupKind        = schema.GroupKind{Group: Group, Kind: ApiManagementCertificateKind}.String()
	ApiManagementCertificateKindAPIVersion   = ApiManagementCertificateKind + "." + GroupVersion.String()
	ApiManagementCertificateGroupVersionKind = GroupVersion.WithKind(ApiManagementCertificateKind)
)

func init() {
	SchemeBuilder.Register(&ApiManagementCertificate{}, &ApiManagementCertificateList{})
}
