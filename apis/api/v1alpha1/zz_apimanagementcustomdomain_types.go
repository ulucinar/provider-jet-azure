/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiManagementCustomDomainDeveloperPortalObservation struct {
	Expiry string `json:"expiry,omitempty" tf:"expiry"`

	Subject string `json:"subject,omitempty" tf:"subject"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type ApiManagementCustomDomainDeveloperPortalParameters struct {

	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate"`

	// +kubebuilder:validation:Optional
	CertificatePassword *string `json:"certificatePassword,omitempty" tf:"certificate_password"`

	// +kubebuilder:validation:Required
	HostName string `json:"hostName" tf:"host_name"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate"`

	// +kubebuilder:validation:Optional
	SslKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id"`
}

type ApiManagementCustomDomainManagementObservation struct {
	Expiry string `json:"expiry,omitempty" tf:"expiry"`

	Subject string `json:"subject,omitempty" tf:"subject"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type ApiManagementCustomDomainManagementParameters struct {

	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate"`

	// +kubebuilder:validation:Optional
	CertificatePassword *string `json:"certificatePassword,omitempty" tf:"certificate_password"`

	// +kubebuilder:validation:Required
	HostName string `json:"hostName" tf:"host_name"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate"`

	// +kubebuilder:validation:Optional
	SslKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id"`
}

type ApiManagementCustomDomainObservation struct {
}

type ApiManagementCustomDomainParameters struct {

	// +kubebuilder:validation:Required
	APIManagementID string `json:"apiManagementId" tf:"api_management_id"`

	// +kubebuilder:validation:Optional
	DeveloperPortal []ApiManagementCustomDomainDeveloperPortalParameters `json:"developerPortal,omitempty" tf:"developer_portal"`

	// +kubebuilder:validation:Optional
	Management []ApiManagementCustomDomainManagementParameters `json:"management,omitempty" tf:"management"`

	// +kubebuilder:validation:Optional
	Portal []ApiManagementCustomDomainPortalParameters `json:"portal,omitempty" tf:"portal"`

	// +kubebuilder:validation:Optional
	Proxy []ApiManagementCustomDomainProxyParameters `json:"proxy,omitempty" tf:"proxy"`

	// +kubebuilder:validation:Optional
	Scm []ApiManagementCustomDomainScmParameters `json:"scm,omitempty" tf:"scm"`
}

type ApiManagementCustomDomainPortalObservation struct {
	Expiry string `json:"expiry,omitempty" tf:"expiry"`

	Subject string `json:"subject,omitempty" tf:"subject"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type ApiManagementCustomDomainPortalParameters struct {

	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate"`

	// +kubebuilder:validation:Optional
	CertificatePassword *string `json:"certificatePassword,omitempty" tf:"certificate_password"`

	// +kubebuilder:validation:Required
	HostName string `json:"hostName" tf:"host_name"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate"`

	// +kubebuilder:validation:Optional
	SslKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id"`
}

type ApiManagementCustomDomainProxyObservation struct {
	Expiry string `json:"expiry,omitempty" tf:"expiry"`

	Subject string `json:"subject,omitempty" tf:"subject"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type ApiManagementCustomDomainProxyParameters struct {

	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate"`

	// +kubebuilder:validation:Optional
	CertificatePassword *string `json:"certificatePassword,omitempty" tf:"certificate_password"`

	// +kubebuilder:validation:Optional
	DefaultSslBinding *bool `json:"defaultSslBinding,omitempty" tf:"default_ssl_binding"`

	// +kubebuilder:validation:Required
	HostName string `json:"hostName" tf:"host_name"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate"`

	// +kubebuilder:validation:Optional
	SslKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id"`
}

type ApiManagementCustomDomainScmObservation struct {
	Expiry string `json:"expiry,omitempty" tf:"expiry"`

	Subject string `json:"subject,omitempty" tf:"subject"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type ApiManagementCustomDomainScmParameters struct {

	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate"`

	// +kubebuilder:validation:Optional
	CertificatePassword *string `json:"certificatePassword,omitempty" tf:"certificate_password"`

	// +kubebuilder:validation:Required
	HostName string `json:"hostName" tf:"host_name"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate"`

	// +kubebuilder:validation:Optional
	SslKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id"`
}

// ApiManagementCustomDomainSpec defines the desired state of ApiManagementCustomDomain
type ApiManagementCustomDomainSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiManagementCustomDomainParameters `json:"forProvider"`
}

// ApiManagementCustomDomainStatus defines the observed state of ApiManagementCustomDomain.
type ApiManagementCustomDomainStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiManagementCustomDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementCustomDomain is the Schema for the ApiManagementCustomDomains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApiManagementCustomDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiManagementCustomDomainSpec   `json:"spec"`
	Status            ApiManagementCustomDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementCustomDomainList contains a list of ApiManagementCustomDomains
type ApiManagementCustomDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiManagementCustomDomain `json:"items"`
}

// Repository type metadata.
var (
	ApiManagementCustomDomainKind             = "ApiManagementCustomDomain"
	ApiManagementCustomDomainGroupKind        = schema.GroupKind{Group: Group, Kind: ApiManagementCustomDomainKind}.String()
	ApiManagementCustomDomainKindAPIVersion   = ApiManagementCustomDomainKind + "." + GroupVersion.String()
	ApiManagementCustomDomainGroupVersionKind = GroupVersion.WithKind(ApiManagementCustomDomainKind)
)

func init() {
	SchemeBuilder.Register(&ApiManagementCustomDomain{}, &ApiManagementCustomDomainList{})
}
