/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiManagementApiObservation struct {
	IsCurrent bool `json:"isCurrent,omitempty" tf:"is_current"`

	IsOnline bool `json:"isOnline,omitempty" tf:"is_online"`
}

type ApiManagementApiParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName string `json:"apiManagementName" tf:"api_management_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`

	// +kubebuilder:validation:Optional
	Import []ImportParameters `json:"import,omitempty" tf:"import"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Oauth2Authorization []Oauth2AuthorizationParameters `json:"oauth2Authorization,omitempty" tf:"oauth2_authorization"`

	// +kubebuilder:validation:Optional
	OpenidAuthentication []OpenidAuthenticationParameters `json:"openidAuthentication,omitempty" tf:"openid_authentication"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path"`

	// +kubebuilder:validation:Optional
	Protocols []string `json:"protocols,omitempty" tf:"protocols"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Revision string `json:"revision" tf:"revision"`

	// +kubebuilder:validation:Optional
	RevisionDescription *string `json:"revisionDescription,omitempty" tf:"revision_description"`

	// +kubebuilder:validation:Optional
	ServiceURL *string `json:"serviceUrl,omitempty" tf:"service_url"`

	// +kubebuilder:validation:Optional
	SoapPassThrough *bool `json:"soapPassThrough,omitempty" tf:"soap_pass_through"`

	// +kubebuilder:validation:Optional
	SourceAPIID *string `json:"sourceApiId,omitempty" tf:"source_api_id"`

	// +kubebuilder:validation:Optional
	SubscriptionKeyParameterNames []SubscriptionKeyParameterNamesParameters `json:"subscriptionKeyParameterNames,omitempty" tf:"subscription_key_parameter_names"`

	// +kubebuilder:validation:Optional
	SubscriptionRequired *bool `json:"subscriptionRequired,omitempty" tf:"subscription_required"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version"`

	// +kubebuilder:validation:Optional
	VersionDescription *string `json:"versionDescription,omitempty" tf:"version_description"`

	// +kubebuilder:validation:Optional
	VersionSetID *string `json:"versionSetId,omitempty" tf:"version_set_id"`
}

type ImportObservation struct {
}

type ImportParameters struct {

	// +kubebuilder:validation:Required
	ContentFormat string `json:"contentFormat" tf:"content_format"`

	// +kubebuilder:validation:Required
	ContentValue string `json:"contentValue" tf:"content_value"`

	// +kubebuilder:validation:Optional
	WsdlSelector []WsdlSelectorParameters `json:"wsdlSelector,omitempty" tf:"wsdl_selector"`
}

type Oauth2AuthorizationObservation struct {
}

type Oauth2AuthorizationParameters struct {

	// +kubebuilder:validation:Required
	AuthorizationServerName string `json:"authorizationServerName" tf:"authorization_server_name"`

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope"`
}

type OpenidAuthenticationObservation struct {
}

type OpenidAuthenticationParameters struct {

	// +kubebuilder:validation:Optional
	BearerTokenSendingMethods []string `json:"bearerTokenSendingMethods,omitempty" tf:"bearer_token_sending_methods"`

	// +kubebuilder:validation:Required
	OpenidProviderName string `json:"openidProviderName" tf:"openid_provider_name"`
}

type SubscriptionKeyParameterNamesObservation struct {
}

type SubscriptionKeyParameterNamesParameters struct {

	// +kubebuilder:validation:Required
	Header string `json:"header" tf:"header"`

	// +kubebuilder:validation:Required
	Query string `json:"query" tf:"query"`
}

type WsdlSelectorObservation struct {
}

type WsdlSelectorParameters struct {

	// +kubebuilder:validation:Required
	EndpointName string `json:"endpointName" tf:"endpoint_name"`

	// +kubebuilder:validation:Required
	ServiceName string `json:"serviceName" tf:"service_name"`
}

// ApiManagementApiSpec defines the desired state of ApiManagementApi
type ApiManagementApiSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiManagementApiParameters `json:"forProvider"`
}

// ApiManagementApiStatus defines the observed state of ApiManagementApi.
type ApiManagementApiStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiManagementApiObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementApi is the Schema for the ApiManagementApis API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApiManagementApi struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiManagementApiSpec   `json:"spec"`
	Status            ApiManagementApiStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementApiList contains a list of ApiManagementApis
type ApiManagementApiList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiManagementApi `json:"items"`
}

// Repository type metadata.
var (
	ApiManagementApiKind             = "ApiManagementApi"
	ApiManagementApiGroupKind        = schema.GroupKind{Group: Group, Kind: ApiManagementApiKind}.String()
	ApiManagementApiKindAPIVersion   = ApiManagementApiKind + "." + GroupVersion.String()
	ApiManagementApiGroupVersionKind = GroupVersion.WithKind(ApiManagementApiKind)
)

func init() {
	SchemeBuilder.Register(&ApiManagementApi{}, &ApiManagementApiList{})
}
