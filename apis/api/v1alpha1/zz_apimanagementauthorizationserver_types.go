/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiManagementAuthorizationServerObservation struct {
}

type ApiManagementAuthorizationServerParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName string `json:"apiManagementName" tf:"api_management_name"`

	// +kubebuilder:validation:Required
	AuthorizationEndpoint string `json:"authorizationEndpoint" tf:"authorization_endpoint"`

	// +kubebuilder:validation:Required
	AuthorizationMethods []string `json:"authorizationMethods" tf:"authorization_methods"`

	// +kubebuilder:validation:Optional
	BearerTokenSendingMethods []string `json:"bearerTokenSendingMethods,omitempty" tf:"bearer_token_sending_methods"`

	// +kubebuilder:validation:Optional
	ClientAuthenticationMethod []string `json:"clientAuthenticationMethod,omitempty" tf:"client_authentication_method"`

	// +kubebuilder:validation:Required
	ClientID string `json:"clientId" tf:"client_id"`

	// +kubebuilder:validation:Required
	ClientRegistrationEndpoint string `json:"clientRegistrationEndpoint" tf:"client_registration_endpoint"`

	// +kubebuilder:validation:Optional
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret"`

	// +kubebuilder:validation:Optional
	DefaultScope *string `json:"defaultScope,omitempty" tf:"default_scope"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	DisplayName string `json:"displayName" tf:"display_name"`

	// +kubebuilder:validation:Required
	GrantTypes []string `json:"grantTypes" tf:"grant_types"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	ResourceOwnerPassword *string `json:"resourceOwnerPassword,omitempty" tf:"resource_owner_password"`

	// +kubebuilder:validation:Optional
	ResourceOwnerUsername *string `json:"resourceOwnerUsername,omitempty" tf:"resource_owner_username"`

	// +kubebuilder:validation:Optional
	SupportState *bool `json:"supportState,omitempty" tf:"support_state"`

	// +kubebuilder:validation:Optional
	TokenBodyParameter []TokenBodyParameterParameters `json:"tokenBodyParameter,omitempty" tf:"token_body_parameter"`

	// +kubebuilder:validation:Optional
	TokenEndpoint *string `json:"tokenEndpoint,omitempty" tf:"token_endpoint"`
}

type TokenBodyParameterObservation struct {
}

type TokenBodyParameterParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Value string `json:"value" tf:"value"`
}

// ApiManagementAuthorizationServerSpec defines the desired state of ApiManagementAuthorizationServer
type ApiManagementAuthorizationServerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiManagementAuthorizationServerParameters `json:"forProvider"`
}

// ApiManagementAuthorizationServerStatus defines the observed state of ApiManagementAuthorizationServer.
type ApiManagementAuthorizationServerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiManagementAuthorizationServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementAuthorizationServer is the Schema for the ApiManagementAuthorizationServers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApiManagementAuthorizationServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiManagementAuthorizationServerSpec   `json:"spec"`
	Status            ApiManagementAuthorizationServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementAuthorizationServerList contains a list of ApiManagementAuthorizationServers
type ApiManagementAuthorizationServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiManagementAuthorizationServer `json:"items"`
}

// Repository type metadata.
var (
	ApiManagementAuthorizationServerKind             = "ApiManagementAuthorizationServer"
	ApiManagementAuthorizationServerGroupKind        = schema.GroupKind{Group: Group, Kind: ApiManagementAuthorizationServerKind}.String()
	ApiManagementAuthorizationServerKindAPIVersion   = ApiManagementAuthorizationServerKind + "." + GroupVersion.String()
	ApiManagementAuthorizationServerGroupVersionKind = GroupVersion.WithKind(ApiManagementAuthorizationServerKind)
)

func init() {
	SchemeBuilder.Register(&ApiManagementAuthorizationServer{}, &ApiManagementAuthorizationServerList{})
}
