/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiManagementIdentityProviderAadb2CObservation struct {
}

type ApiManagementIdentityProviderAadb2CParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName string `json:"apiManagementName" tf:"api_management_name"`

	// +kubebuilder:validation:Required
	AllowedTenant string `json:"allowedTenant" tf:"allowed_tenant"`

	// +kubebuilder:validation:Required
	Authority string `json:"authority" tf:"authority"`

	// +kubebuilder:validation:Required
	ClientID string `json:"clientId" tf:"client_id"`

	// +kubebuilder:validation:Required
	ClientSecret string `json:"clientSecret" tf:"client_secret"`

	// +kubebuilder:validation:Optional
	PasswordResetPolicy *string `json:"passwordResetPolicy,omitempty" tf:"password_reset_policy"`

	// +kubebuilder:validation:Optional
	ProfileEditingPolicy *string `json:"profileEditingPolicy,omitempty" tf:"profile_editing_policy"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	SigninPolicy string `json:"signinPolicy" tf:"signin_policy"`

	// +kubebuilder:validation:Required
	SigninTenant string `json:"signinTenant" tf:"signin_tenant"`

	// +kubebuilder:validation:Required
	SignupPolicy string `json:"signupPolicy" tf:"signup_policy"`
}

// ApiManagementIdentityProviderAadb2CSpec defines the desired state of ApiManagementIdentityProviderAadb2C
type ApiManagementIdentityProviderAadb2CSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiManagementIdentityProviderAadb2CParameters `json:"forProvider"`
}

// ApiManagementIdentityProviderAadb2CStatus defines the observed state of ApiManagementIdentityProviderAadb2C.
type ApiManagementIdentityProviderAadb2CStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiManagementIdentityProviderAadb2CObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementIdentityProviderAadb2C is the Schema for the ApiManagementIdentityProviderAadb2Cs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApiManagementIdentityProviderAadb2C struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiManagementIdentityProviderAadb2CSpec   `json:"spec"`
	Status            ApiManagementIdentityProviderAadb2CStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiManagementIdentityProviderAadb2CList contains a list of ApiManagementIdentityProviderAadb2Cs
type ApiManagementIdentityProviderAadb2CList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiManagementIdentityProviderAadb2C `json:"items"`
}

// Repository type metadata.
var (
	ApiManagementIdentityProviderAadb2CKind             = "ApiManagementIdentityProviderAadb2C"
	ApiManagementIdentityProviderAadb2CGroupKind        = schema.GroupKind{Group: Group, Kind: ApiManagementIdentityProviderAadb2CKind}.String()
	ApiManagementIdentityProviderAadb2CKindAPIVersion   = ApiManagementIdentityProviderAadb2CKind + "." + GroupVersion.String()
	ApiManagementIdentityProviderAadb2CGroupVersionKind = GroupVersion.WithKind(ApiManagementIdentityProviderAadb2CKind)
)

func init() {
	SchemeBuilder.Register(&ApiManagementIdentityProviderAadb2C{}, &ApiManagementIdentityProviderAadb2CList{})
}
