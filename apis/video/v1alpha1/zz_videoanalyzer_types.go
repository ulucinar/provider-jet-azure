/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IdentityObservation struct {
}

type IdentityParameters struct {

	// +kubebuilder:validation:Required
	IdentityIds []string `json:"identityIds" tf:"identity_ids"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type StorageAccountObservation struct {
}

type StorageAccountParameters struct {

	// +kubebuilder:validation:Required
	ID string `json:"id" tf:"id"`

	// +kubebuilder:validation:Required
	UserAssignedIdentityID string `json:"userAssignedIdentityId" tf:"user_assigned_identity_id"`
}

type VideoAnalyzerObservation struct {
}

type VideoAnalyzerParameters struct {

	// +kubebuilder:validation:Required
	Identity []IdentityParameters `json:"identity" tf:"identity"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	StorageAccount []StorageAccountParameters `json:"storageAccount" tf:"storage_account"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// VideoAnalyzerSpec defines the desired state of VideoAnalyzer
type VideoAnalyzerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VideoAnalyzerParameters `json:"forProvider"`
}

// VideoAnalyzerStatus defines the observed state of VideoAnalyzer.
type VideoAnalyzerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VideoAnalyzerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VideoAnalyzer is the Schema for the VideoAnalyzers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VideoAnalyzer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VideoAnalyzerSpec   `json:"spec"`
	Status            VideoAnalyzerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VideoAnalyzerList contains a list of VideoAnalyzers
type VideoAnalyzerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VideoAnalyzer `json:"items"`
}

// Repository type metadata.
var (
	VideoAnalyzerKind             = "VideoAnalyzer"
	VideoAnalyzerGroupKind        = schema.GroupKind{Group: Group, Kind: VideoAnalyzerKind}.String()
	VideoAnalyzerKindAPIVersion   = VideoAnalyzerKind + "." + GroupVersion.String()
	VideoAnalyzerGroupVersionKind = GroupVersion.WithKind(VideoAnalyzerKind)
)

func init() {
	SchemeBuilder.Register(&VideoAnalyzer{}, &VideoAnalyzerList{})
}
