/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this VideoAnalyzer.
func (mg *VideoAnalyzer) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this VideoAnalyzer.
func (mg *VideoAnalyzer) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this VideoAnalyzer.
func (mg *VideoAnalyzer) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this VideoAnalyzer.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *VideoAnalyzer) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this VideoAnalyzer.
func (mg *VideoAnalyzer) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this VideoAnalyzer.
func (mg *VideoAnalyzer) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this VideoAnalyzer.
func (mg *VideoAnalyzer) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this VideoAnalyzer.
func (mg *VideoAnalyzer) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this VideoAnalyzer.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *VideoAnalyzer) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this VideoAnalyzer.
func (mg *VideoAnalyzer) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this VideoAnalyzerEdgeModule.
func (mg *VideoAnalyzerEdgeModule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this VideoAnalyzerEdgeModule.
func (mg *VideoAnalyzerEdgeModule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this VideoAnalyzerEdgeModule.
func (mg *VideoAnalyzerEdgeModule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this VideoAnalyzerEdgeModule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *VideoAnalyzerEdgeModule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this VideoAnalyzerEdgeModule.
func (mg *VideoAnalyzerEdgeModule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this VideoAnalyzerEdgeModule.
func (mg *VideoAnalyzerEdgeModule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this VideoAnalyzerEdgeModule.
func (mg *VideoAnalyzerEdgeModule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this VideoAnalyzerEdgeModule.
func (mg *VideoAnalyzerEdgeModule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this VideoAnalyzerEdgeModule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *VideoAnalyzerEdgeModule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this VideoAnalyzerEdgeModule.
func (mg *VideoAnalyzerEdgeModule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
