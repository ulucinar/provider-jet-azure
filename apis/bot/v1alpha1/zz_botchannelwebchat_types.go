/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BotChannelWebChatObservation struct {
}

type BotChannelWebChatParameters struct {

	// +kubebuilder:validation:Required
	BotName string `json:"botName" tf:"bot_name"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	SiteNames []string `json:"siteNames" tf:"site_names"`
}

// BotChannelWebChatSpec defines the desired state of BotChannelWebChat
type BotChannelWebChatSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BotChannelWebChatParameters `json:"forProvider"`
}

// BotChannelWebChatStatus defines the observed state of BotChannelWebChat.
type BotChannelWebChatStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BotChannelWebChatObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BotChannelWebChat is the Schema for the BotChannelWebChats API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type BotChannelWebChat struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BotChannelWebChatSpec   `json:"spec"`
	Status            BotChannelWebChatStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BotChannelWebChatList contains a list of BotChannelWebChats
type BotChannelWebChatList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BotChannelWebChat `json:"items"`
}

// Repository type metadata.
var (
	BotChannelWebChatKind             = "BotChannelWebChat"
	BotChannelWebChatGroupKind        = schema.GroupKind{Group: Group, Kind: BotChannelWebChatKind}.String()
	BotChannelWebChatKindAPIVersion   = BotChannelWebChatKind + "." + GroupVersion.String()
	BotChannelWebChatGroupVersionKind = GroupVersion.WithKind(BotChannelWebChatKind)
)

func init() {
	SchemeBuilder.Register(&BotChannelWebChat{}, &BotChannelWebChatList{})
}
