/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BotWebAppObservation struct {
}

type BotWebAppParameters struct {

	// +kubebuilder:validation:Optional
	DeveloperAppInsightsAPIKey *string `json:"developerAppInsightsApiKey,omitempty" tf:"developer_app_insights_api_key"`

	// +kubebuilder:validation:Optional
	DeveloperAppInsightsApplicationID *string `json:"developerAppInsightsApplicationId,omitempty" tf:"developer_app_insights_application_id"`

	// +kubebuilder:validation:Optional
	DeveloperAppInsightsKey *string `json:"developerAppInsightsKey,omitempty" tf:"developer_app_insights_key"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`

	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	LuisAppIds []string `json:"luisAppIds,omitempty" tf:"luis_app_ids"`

	// +kubebuilder:validation:Optional
	LuisKey *string `json:"luisKey,omitempty" tf:"luis_key"`

	// +kubebuilder:validation:Required
	MicrosoftAppID string `json:"microsoftAppId" tf:"microsoft_app_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Sku string `json:"sku" tf:"sku"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// BotWebAppSpec defines the desired state of BotWebApp
type BotWebAppSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BotWebAppParameters `json:"forProvider"`
}

// BotWebAppStatus defines the observed state of BotWebApp.
type BotWebAppStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BotWebAppObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BotWebApp is the Schema for the BotWebApps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type BotWebApp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BotWebAppSpec   `json:"spec"`
	Status            BotWebAppStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BotWebAppList contains a list of BotWebApps
type BotWebAppList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BotWebApp `json:"items"`
}

// Repository type metadata.
var (
	BotWebAppKind             = "BotWebApp"
	BotWebAppGroupKind        = schema.GroupKind{Group: Group, Kind: BotWebAppKind}.String()
	BotWebAppKindAPIVersion   = BotWebAppKind + "." + GroupVersion.String()
	BotWebAppGroupVersionKind = GroupVersion.WithKind(BotWebAppKind)
)

func init() {
	SchemeBuilder.Register(&BotWebApp{}, &BotWebAppList{})
}
