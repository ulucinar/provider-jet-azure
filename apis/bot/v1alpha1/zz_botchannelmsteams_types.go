/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BotChannelMsTeamsObservation struct {
}

type BotChannelMsTeamsParameters struct {

	// +kubebuilder:validation:Required
	BotName string `json:"botName" tf:"bot_name"`

	// +kubebuilder:validation:Optional
	CallingWebHook *string `json:"callingWebHook,omitempty" tf:"calling_web_hook"`

	// +kubebuilder:validation:Optional
	EnableCalling *bool `json:"enableCalling,omitempty" tf:"enable_calling"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

// BotChannelMsTeamsSpec defines the desired state of BotChannelMsTeams
type BotChannelMsTeamsSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BotChannelMsTeamsParameters `json:"forProvider"`
}

// BotChannelMsTeamsStatus defines the observed state of BotChannelMsTeams.
type BotChannelMsTeamsStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BotChannelMsTeamsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BotChannelMsTeams is the Schema for the BotChannelMsTeamss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type BotChannelMsTeams struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BotChannelMsTeamsSpec   `json:"spec"`
	Status            BotChannelMsTeamsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BotChannelMsTeamsList contains a list of BotChannelMsTeamss
type BotChannelMsTeamsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BotChannelMsTeams `json:"items"`
}

// Repository type metadata.
var (
	BotChannelMsTeamsKind             = "BotChannelMsTeams"
	BotChannelMsTeamsGroupKind        = schema.GroupKind{Group: Group, Kind: BotChannelMsTeamsKind}.String()
	BotChannelMsTeamsKindAPIVersion   = BotChannelMsTeamsKind + "." + GroupVersion.String()
	BotChannelMsTeamsGroupVersionKind = GroupVersion.WithKind(BotChannelMsTeamsKind)
)

func init() {
	SchemeBuilder.Register(&BotChannelMsTeams{}, &BotChannelMsTeamsList{})
}
