/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BotChannelSmsObservation struct {
}

type BotChannelSmsParameters struct {

	// +kubebuilder:validation:Required
	BotName string `json:"botName" tf:"bot_name"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	PhoneNumber string `json:"phoneNumber" tf:"phone_number"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	SmsChannelAccountSecurityID string `json:"smsChannelAccountSecurityId" tf:"sms_channel_account_security_id"`

	// +kubebuilder:validation:Required
	SmsChannelAuthToken string `json:"smsChannelAuthToken" tf:"sms_channel_auth_token"`
}

// BotChannelSmsSpec defines the desired state of BotChannelSms
type BotChannelSmsSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BotChannelSmsParameters `json:"forProvider"`
}

// BotChannelSmsStatus defines the observed state of BotChannelSms.
type BotChannelSmsStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BotChannelSmsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BotChannelSms is the Schema for the BotChannelSmss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type BotChannelSms struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BotChannelSmsSpec   `json:"spec"`
	Status            BotChannelSmsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BotChannelSmsList contains a list of BotChannelSmss
type BotChannelSmsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BotChannelSms `json:"items"`
}

// Repository type metadata.
var (
	BotChannelSmsKind             = "BotChannelSms"
	BotChannelSmsGroupKind        = schema.GroupKind{Group: Group, Kind: BotChannelSmsKind}.String()
	BotChannelSmsKindAPIVersion   = BotChannelSmsKind + "." + GroupVersion.String()
	BotChannelSmsGroupVersionKind = GroupVersion.WithKind(BotChannelSmsKind)
)

func init() {
	SchemeBuilder.Register(&BotChannelSms{}, &BotChannelSmsList{})
}
