/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ExpressRouteConnectionObservation struct {
}

type ExpressRouteConnectionParameters struct {

	// +kubebuilder:validation:Optional
	AuthorizationKey *string `json:"authorizationKey,omitempty" tf:"authorization_key"`

	// +kubebuilder:validation:Optional
	EnableInternetSecurity *bool `json:"enableInternetSecurity,omitempty" tf:"enable_internet_security"`

	// +kubebuilder:validation:Required
	ExpressRouteCircuitPeeringID string `json:"expressRouteCircuitPeeringId" tf:"express_route_circuit_peering_id"`

	// +kubebuilder:validation:Required
	ExpressRouteGatewayID string `json:"expressRouteGatewayId" tf:"express_route_gateway_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Routing []RoutingParameters `json:"routing,omitempty" tf:"routing"`

	// +kubebuilder:validation:Optional
	RoutingWeight *int64 `json:"routingWeight,omitempty" tf:"routing_weight"`
}

type PropagatedRouteTableObservation struct {
}

type PropagatedRouteTableParameters struct {

	// +kubebuilder:validation:Optional
	Labels []string `json:"labels,omitempty" tf:"labels"`

	// +kubebuilder:validation:Optional
	RouteTableIds []string `json:"routeTableIds,omitempty" tf:"route_table_ids"`
}

type RoutingObservation struct {
}

type RoutingParameters struct {

	// +kubebuilder:validation:Optional
	AssociatedRouteTableID *string `json:"associatedRouteTableId,omitempty" tf:"associated_route_table_id"`

	// +kubebuilder:validation:Optional
	PropagatedRouteTable []PropagatedRouteTableParameters `json:"propagatedRouteTable,omitempty" tf:"propagated_route_table"`
}

// ExpressRouteConnectionSpec defines the desired state of ExpressRouteConnection
type ExpressRouteConnectionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ExpressRouteConnectionParameters `json:"forProvider"`
}

// ExpressRouteConnectionStatus defines the observed state of ExpressRouteConnection.
type ExpressRouteConnectionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ExpressRouteConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ExpressRouteConnection is the Schema for the ExpressRouteConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ExpressRouteConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExpressRouteConnectionSpec   `json:"spec"`
	Status            ExpressRouteConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExpressRouteConnectionList contains a list of ExpressRouteConnections
type ExpressRouteConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExpressRouteConnection `json:"items"`
}

// Repository type metadata.
var (
	ExpressRouteConnectionKind             = "ExpressRouteConnection"
	ExpressRouteConnectionGroupKind        = schema.GroupKind{Group: Group, Kind: ExpressRouteConnectionKind}.String()
	ExpressRouteConnectionKindAPIVersion   = ExpressRouteConnectionKind + "." + GroupVersion.String()
	ExpressRouteConnectionGroupVersionKind = GroupVersion.WithKind(ExpressRouteConnectionKind)
)

func init() {
	SchemeBuilder.Register(&ExpressRouteConnection{}, &ExpressRouteConnectionList{})
}
