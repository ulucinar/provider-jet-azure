/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this ExpressRouteCircuit.
func (mg *ExpressRouteCircuit) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ExpressRouteCircuit.
func (mg *ExpressRouteCircuit) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ExpressRouteCircuit.
func (mg *ExpressRouteCircuit) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ExpressRouteCircuit.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ExpressRouteCircuit) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ExpressRouteCircuit.
func (mg *ExpressRouteCircuit) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ExpressRouteCircuit.
func (mg *ExpressRouteCircuit) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ExpressRouteCircuit.
func (mg *ExpressRouteCircuit) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ExpressRouteCircuit.
func (mg *ExpressRouteCircuit) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ExpressRouteCircuit.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ExpressRouteCircuit) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ExpressRouteCircuit.
func (mg *ExpressRouteCircuit) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ExpressRouteCircuitAuthorization.
func (mg *ExpressRouteCircuitAuthorization) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ExpressRouteCircuitAuthorization.
func (mg *ExpressRouteCircuitAuthorization) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ExpressRouteCircuitAuthorization.
func (mg *ExpressRouteCircuitAuthorization) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ExpressRouteCircuitAuthorization.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ExpressRouteCircuitAuthorization) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ExpressRouteCircuitAuthorization.
func (mg *ExpressRouteCircuitAuthorization) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ExpressRouteCircuitAuthorization.
func (mg *ExpressRouteCircuitAuthorization) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ExpressRouteCircuitAuthorization.
func (mg *ExpressRouteCircuitAuthorization) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ExpressRouteCircuitAuthorization.
func (mg *ExpressRouteCircuitAuthorization) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ExpressRouteCircuitAuthorization.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ExpressRouteCircuitAuthorization) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ExpressRouteCircuitAuthorization.
func (mg *ExpressRouteCircuitAuthorization) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ExpressRouteCircuitConnection.
func (mg *ExpressRouteCircuitConnection) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ExpressRouteCircuitConnection.
func (mg *ExpressRouteCircuitConnection) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ExpressRouteCircuitConnection.
func (mg *ExpressRouteCircuitConnection) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ExpressRouteCircuitConnection.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ExpressRouteCircuitConnection) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ExpressRouteCircuitConnection.
func (mg *ExpressRouteCircuitConnection) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ExpressRouteCircuitConnection.
func (mg *ExpressRouteCircuitConnection) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ExpressRouteCircuitConnection.
func (mg *ExpressRouteCircuitConnection) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ExpressRouteCircuitConnection.
func (mg *ExpressRouteCircuitConnection) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ExpressRouteCircuitConnection.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ExpressRouteCircuitConnection) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ExpressRouteCircuitConnection.
func (mg *ExpressRouteCircuitConnection) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ExpressRouteCircuitPeering.
func (mg *ExpressRouteCircuitPeering) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ExpressRouteCircuitPeering.
func (mg *ExpressRouteCircuitPeering) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ExpressRouteCircuitPeering.
func (mg *ExpressRouteCircuitPeering) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ExpressRouteCircuitPeering.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ExpressRouteCircuitPeering) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ExpressRouteCircuitPeering.
func (mg *ExpressRouteCircuitPeering) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ExpressRouteCircuitPeering.
func (mg *ExpressRouteCircuitPeering) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ExpressRouteCircuitPeering.
func (mg *ExpressRouteCircuitPeering) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ExpressRouteCircuitPeering.
func (mg *ExpressRouteCircuitPeering) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ExpressRouteCircuitPeering.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ExpressRouteCircuitPeering) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ExpressRouteCircuitPeering.
func (mg *ExpressRouteCircuitPeering) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ExpressRouteConnection.
func (mg *ExpressRouteConnection) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ExpressRouteConnection.
func (mg *ExpressRouteConnection) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ExpressRouteConnection.
func (mg *ExpressRouteConnection) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ExpressRouteConnection.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ExpressRouteConnection) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ExpressRouteConnection.
func (mg *ExpressRouteConnection) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ExpressRouteConnection.
func (mg *ExpressRouteConnection) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ExpressRouteConnection.
func (mg *ExpressRouteConnection) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ExpressRouteConnection.
func (mg *ExpressRouteConnection) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ExpressRouteConnection.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ExpressRouteConnection) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ExpressRouteConnection.
func (mg *ExpressRouteConnection) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ExpressRouteGateway.
func (mg *ExpressRouteGateway) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ExpressRouteGateway.
func (mg *ExpressRouteGateway) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ExpressRouteGateway.
func (mg *ExpressRouteGateway) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ExpressRouteGateway.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ExpressRouteGateway) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ExpressRouteGateway.
func (mg *ExpressRouteGateway) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ExpressRouteGateway.
func (mg *ExpressRouteGateway) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ExpressRouteGateway.
func (mg *ExpressRouteGateway) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ExpressRouteGateway.
func (mg *ExpressRouteGateway) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ExpressRouteGateway.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ExpressRouteGateway) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ExpressRouteGateway.
func (mg *ExpressRouteGateway) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ExpressRoutePort.
func (mg *ExpressRoutePort) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ExpressRoutePort.
func (mg *ExpressRoutePort) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ExpressRoutePort.
func (mg *ExpressRoutePort) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ExpressRoutePort.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ExpressRoutePort) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ExpressRoutePort.
func (mg *ExpressRoutePort) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ExpressRoutePort.
func (mg *ExpressRoutePort) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ExpressRoutePort.
func (mg *ExpressRoutePort) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ExpressRoutePort.
func (mg *ExpressRoutePort) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ExpressRoutePort.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ExpressRoutePort) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ExpressRoutePort.
func (mg *ExpressRoutePort) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
