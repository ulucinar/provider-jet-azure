/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MysqlDatabaseObservation struct {
}

type MysqlDatabaseParameters struct {

	// +kubebuilder:validation:Required
	Charset string `json:"charset" tf:"charset"`

	// +kubebuilder:validation:Required
	Collation string `json:"collation" tf:"collation"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	ServerName string `json:"serverName" tf:"server_name"`
}

// MysqlDatabaseSpec defines the desired state of MysqlDatabase
type MysqlDatabaseSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MysqlDatabaseParameters `json:"forProvider"`
}

// MysqlDatabaseStatus defines the observed state of MysqlDatabase.
type MysqlDatabaseStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MysqlDatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MysqlDatabase is the Schema for the MysqlDatabases API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MysqlDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MysqlDatabaseSpec   `json:"spec"`
	Status            MysqlDatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MysqlDatabaseList contains a list of MysqlDatabases
type MysqlDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MysqlDatabase `json:"items"`
}

// Repository type metadata.
var (
	MysqlDatabaseKind             = "MysqlDatabase"
	MysqlDatabaseGroupKind        = schema.GroupKind{Group: Group, Kind: MysqlDatabaseKind}.String()
	MysqlDatabaseKindAPIVersion   = MysqlDatabaseKind + "." + GroupVersion.String()
	MysqlDatabaseGroupVersionKind = GroupVersion.WithKind(MysqlDatabaseKind)
)

func init() {
	SchemeBuilder.Register(&MysqlDatabase{}, &MysqlDatabaseList{})
}
