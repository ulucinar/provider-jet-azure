/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MysqlServerKeyObservation struct {
}

type MysqlServerKeyParameters struct {

	// +kubebuilder:validation:Required
	KeyVaultKeyID string `json:"keyVaultKeyId" tf:"key_vault_key_id"`

	// +kubebuilder:validation:Required
	ServerID string `json:"serverId" tf:"server_id"`
}

// MysqlServerKeySpec defines the desired state of MysqlServerKey
type MysqlServerKeySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MysqlServerKeyParameters `json:"forProvider"`
}

// MysqlServerKeyStatus defines the observed state of MysqlServerKey.
type MysqlServerKeyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MysqlServerKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MysqlServerKey is the Schema for the MysqlServerKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MysqlServerKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MysqlServerKeySpec   `json:"spec"`
	Status            MysqlServerKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MysqlServerKeyList contains a list of MysqlServerKeys
type MysqlServerKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MysqlServerKey `json:"items"`
}

// Repository type metadata.
var (
	MysqlServerKeyKind             = "MysqlServerKey"
	MysqlServerKeyGroupKind        = schema.GroupKind{Group: Group, Kind: MysqlServerKeyKind}.String()
	MysqlServerKeyKindAPIVersion   = MysqlServerKeyKind + "." + GroupVersion.String()
	MysqlServerKeyGroupVersionKind = GroupVersion.WithKind(MysqlServerKeyKind)
)

func init() {
	SchemeBuilder.Register(&MysqlServerKey{}, &MysqlServerKeyList{})
}
