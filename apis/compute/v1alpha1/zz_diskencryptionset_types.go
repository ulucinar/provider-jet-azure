/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DiskEncryptionSetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DiskEncryptionSetParameters struct {

	// +kubebuilder:validation:Required
	Identity []IdentityParameters `json:"identity" tf:"identity,omitempty"`

	// +kubebuilder:validation:Required
	KeyVaultKeyID *string `json:"keyVaultKeyId" tf:"key_vault_key_id,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type IdentityObservation struct {
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// DiskEncryptionSetSpec defines the desired state of DiskEncryptionSet
type DiskEncryptionSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DiskEncryptionSetParameters `json:"forProvider"`
}

// DiskEncryptionSetStatus defines the observed state of DiskEncryptionSet.
type DiskEncryptionSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DiskEncryptionSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DiskEncryptionSet is the Schema for the DiskEncryptionSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DiskEncryptionSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DiskEncryptionSetSpec   `json:"spec"`
	Status            DiskEncryptionSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DiskEncryptionSetList contains a list of DiskEncryptionSets
type DiskEncryptionSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DiskEncryptionSet `json:"items"`
}

// Repository type metadata.
var (
	DiskEncryptionSet_Kind             = "DiskEncryptionSet"
	DiskEncryptionSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DiskEncryptionSet_Kind}.String()
	DiskEncryptionSet_KindAPIVersion   = DiskEncryptionSet_Kind + "." + CRDGroupVersion.String()
	DiskEncryptionSet_GroupVersionKind = CRDGroupVersion.WithKind(DiskEncryptionSet_Kind)
)

func init() {
	SchemeBuilder.Register(&DiskEncryptionSet{}, &DiskEncryptionSetList{})
}
