/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type RelayNamespaceAuthorizationRuleObservation struct {
	PrimaryConnectionString string `json:"primaryConnectionString,omitempty" tf:"primary_connection_string"`

	PrimaryKey string `json:"primaryKey,omitempty" tf:"primary_key"`

	SecondaryConnectionString string `json:"secondaryConnectionString,omitempty" tf:"secondary_connection_string"`

	SecondaryKey string `json:"secondaryKey,omitempty" tf:"secondary_key"`
}

type RelayNamespaceAuthorizationRuleParameters struct {

	// +kubebuilder:validation:Optional
	Listen *bool `json:"listen,omitempty" tf:"listen"`

	// +kubebuilder:validation:Optional
	Manage *bool `json:"manage,omitempty" tf:"manage"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	NamespaceName string `json:"namespaceName" tf:"namespace_name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Send *bool `json:"send,omitempty" tf:"send"`
}

// RelayNamespaceAuthorizationRuleSpec defines the desired state of RelayNamespaceAuthorizationRule
type RelayNamespaceAuthorizationRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RelayNamespaceAuthorizationRuleParameters `json:"forProvider"`
}

// RelayNamespaceAuthorizationRuleStatus defines the observed state of RelayNamespaceAuthorizationRule.
type RelayNamespaceAuthorizationRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RelayNamespaceAuthorizationRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RelayNamespaceAuthorizationRule is the Schema for the RelayNamespaceAuthorizationRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type RelayNamespaceAuthorizationRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RelayNamespaceAuthorizationRuleSpec   `json:"spec"`
	Status            RelayNamespaceAuthorizationRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RelayNamespaceAuthorizationRuleList contains a list of RelayNamespaceAuthorizationRules
type RelayNamespaceAuthorizationRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RelayNamespaceAuthorizationRule `json:"items"`
}

// Repository type metadata.
var (
	RelayNamespaceAuthorizationRuleKind             = "RelayNamespaceAuthorizationRule"
	RelayNamespaceAuthorizationRuleGroupKind        = schema.GroupKind{Group: Group, Kind: RelayNamespaceAuthorizationRuleKind}.String()
	RelayNamespaceAuthorizationRuleKindAPIVersion   = RelayNamespaceAuthorizationRuleKind + "." + GroupVersion.String()
	RelayNamespaceAuthorizationRuleGroupVersionKind = GroupVersion.WithKind(RelayNamespaceAuthorizationRuleKind)
)

func init() {
	SchemeBuilder.Register(&RelayNamespaceAuthorizationRule{}, &RelayNamespaceAuthorizationRuleList{})
}
