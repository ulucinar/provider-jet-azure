/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type RelayHybridConnectionObservation struct {
}

type RelayHybridConnectionParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	RelayNamespaceName string `json:"relayNamespaceName" tf:"relay_namespace_name"`

	// +kubebuilder:validation:Optional
	RequiresClientAuthorization *bool `json:"requiresClientAuthorization,omitempty" tf:"requires_client_authorization"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	UserMetadata *string `json:"userMetadata,omitempty" tf:"user_metadata"`
}

// RelayHybridConnectionSpec defines the desired state of RelayHybridConnection
type RelayHybridConnectionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RelayHybridConnectionParameters `json:"forProvider"`
}

// RelayHybridConnectionStatus defines the observed state of RelayHybridConnection.
type RelayHybridConnectionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RelayHybridConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RelayHybridConnection is the Schema for the RelayHybridConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type RelayHybridConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RelayHybridConnectionSpec   `json:"spec"`
	Status            RelayHybridConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RelayHybridConnectionList contains a list of RelayHybridConnections
type RelayHybridConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RelayHybridConnection `json:"items"`
}

// Repository type metadata.
var (
	RelayHybridConnectionKind             = "RelayHybridConnection"
	RelayHybridConnectionGroupKind        = schema.GroupKind{Group: Group, Kind: RelayHybridConnectionKind}.String()
	RelayHybridConnectionKindAPIVersion   = RelayHybridConnectionKind + "." + GroupVersion.String()
	RelayHybridConnectionGroupVersionKind = GroupVersion.WithKind(RelayHybridConnectionKind)
)

func init() {
	SchemeBuilder.Register(&RelayHybridConnection{}, &RelayHybridConnectionList{})
}
