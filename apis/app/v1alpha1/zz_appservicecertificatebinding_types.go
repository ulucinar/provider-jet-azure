/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AppServiceCertificateBindingObservation struct {
	AppServiceName string `json:"appServiceName,omitempty" tf:"app_service_name"`

	Hostname string `json:"hostname,omitempty" tf:"hostname"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type AppServiceCertificateBindingParameters struct {

	// +kubebuilder:validation:Required
	CertificateID string `json:"certificateId" tf:"certificate_id"`

	// +kubebuilder:validation:Required
	HostnameBindingID string `json:"hostnameBindingId" tf:"hostname_binding_id"`

	// +kubebuilder:validation:Required
	SslState string `json:"sslState" tf:"ssl_state"`
}

// AppServiceCertificateBindingSpec defines the desired state of AppServiceCertificateBinding
type AppServiceCertificateBindingSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppServiceCertificateBindingParameters `json:"forProvider"`
}

// AppServiceCertificateBindingStatus defines the observed state of AppServiceCertificateBinding.
type AppServiceCertificateBindingStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppServiceCertificateBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceCertificateBinding is the Schema for the AppServiceCertificateBindings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AppServiceCertificateBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppServiceCertificateBindingSpec   `json:"spec"`
	Status            AppServiceCertificateBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceCertificateBindingList contains a list of AppServiceCertificateBindings
type AppServiceCertificateBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppServiceCertificateBinding `json:"items"`
}

// Repository type metadata.
var (
	AppServiceCertificateBindingKind             = "AppServiceCertificateBinding"
	AppServiceCertificateBindingGroupKind        = schema.GroupKind{Group: Group, Kind: AppServiceCertificateBindingKind}.String()
	AppServiceCertificateBindingKindAPIVersion   = AppServiceCertificateBindingKind + "." + GroupVersion.String()
	AppServiceCertificateBindingGroupVersionKind = GroupVersion.WithKind(AppServiceCertificateBindingKind)
)

func init() {
	SchemeBuilder.Register(&AppServiceCertificateBinding{}, &AppServiceCertificateBindingList{})
}
