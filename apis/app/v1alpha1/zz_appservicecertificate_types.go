/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AppServiceCertificateObservation struct {
	ExpirationDate string `json:"expirationDate,omitempty" tf:"expiration_date"`

	FriendlyName string `json:"friendlyName,omitempty" tf:"friendly_name"`

	HostNames []string `json:"hostNames,omitempty" tf:"host_names"`

	IssueDate string `json:"issueDate,omitempty" tf:"issue_date"`

	Issuer string `json:"issuer,omitempty" tf:"issuer"`

	SubjectName string `json:"subjectName,omitempty" tf:"subject_name"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type AppServiceCertificateParameters struct {

	// +kubebuilder:validation:Optional
	HostingEnvironmentProfileID *string `json:"hostingEnvironmentProfileId,omitempty" tf:"hosting_environment_profile_id"`

	// +kubebuilder:validation:Optional
	KeyVaultSecretID *string `json:"keyVaultSecretId,omitempty" tf:"key_vault_secret_id"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	PfxBlob *string `json:"pfxBlob,omitempty" tf:"pfx_blob"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// AppServiceCertificateSpec defines the desired state of AppServiceCertificate
type AppServiceCertificateSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppServiceCertificateParameters `json:"forProvider"`
}

// AppServiceCertificateStatus defines the observed state of AppServiceCertificate.
type AppServiceCertificateStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppServiceCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceCertificate is the Schema for the AppServiceCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AppServiceCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppServiceCertificateSpec   `json:"spec"`
	Status            AppServiceCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceCertificateList contains a list of AppServiceCertificates
type AppServiceCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppServiceCertificate `json:"items"`
}

// Repository type metadata.
var (
	AppServiceCertificateKind             = "AppServiceCertificate"
	AppServiceCertificateGroupKind        = schema.GroupKind{Group: Group, Kind: AppServiceCertificateKind}.String()
	AppServiceCertificateKindAPIVersion   = AppServiceCertificateKind + "." + GroupVersion.String()
	AppServiceCertificateGroupVersionKind = GroupVersion.WithKind(AppServiceCertificateKind)
)

func init() {
	SchemeBuilder.Register(&AppServiceCertificate{}, &AppServiceCertificateList{})
}
