/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AppServiceSlotVirtualNetworkSwiftConnectionObservation struct {
}

type AppServiceSlotVirtualNetworkSwiftConnectionParameters struct {

	// +kubebuilder:validation:Required
	AppServiceID string `json:"appServiceId" tf:"app_service_id"`

	// +kubebuilder:validation:Required
	SlotName string `json:"slotName" tf:"slot_name"`

	// +kubebuilder:validation:Required
	SubnetID string `json:"subnetId" tf:"subnet_id"`
}

// AppServiceSlotVirtualNetworkSwiftConnectionSpec defines the desired state of AppServiceSlotVirtualNetworkSwiftConnection
type AppServiceSlotVirtualNetworkSwiftConnectionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppServiceSlotVirtualNetworkSwiftConnectionParameters `json:"forProvider"`
}

// AppServiceSlotVirtualNetworkSwiftConnectionStatus defines the observed state of AppServiceSlotVirtualNetworkSwiftConnection.
type AppServiceSlotVirtualNetworkSwiftConnectionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppServiceSlotVirtualNetworkSwiftConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceSlotVirtualNetworkSwiftConnection is the Schema for the AppServiceSlotVirtualNetworkSwiftConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AppServiceSlotVirtualNetworkSwiftConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppServiceSlotVirtualNetworkSwiftConnectionSpec   `json:"spec"`
	Status            AppServiceSlotVirtualNetworkSwiftConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceSlotVirtualNetworkSwiftConnectionList contains a list of AppServiceSlotVirtualNetworkSwiftConnections
type AppServiceSlotVirtualNetworkSwiftConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppServiceSlotVirtualNetworkSwiftConnection `json:"items"`
}

// Repository type metadata.
var (
	AppServiceSlotVirtualNetworkSwiftConnectionKind             = "AppServiceSlotVirtualNetworkSwiftConnection"
	AppServiceSlotVirtualNetworkSwiftConnectionGroupKind        = schema.GroupKind{Group: Group, Kind: AppServiceSlotVirtualNetworkSwiftConnectionKind}.String()
	AppServiceSlotVirtualNetworkSwiftConnectionKindAPIVersion   = AppServiceSlotVirtualNetworkSwiftConnectionKind + "." + GroupVersion.String()
	AppServiceSlotVirtualNetworkSwiftConnectionGroupVersionKind = GroupVersion.WithKind(AppServiceSlotVirtualNetworkSwiftConnectionKind)
)

func init() {
	SchemeBuilder.Register(&AppServiceSlotVirtualNetworkSwiftConnection{}, &AppServiceSlotVirtualNetworkSwiftConnectionList{})
}
