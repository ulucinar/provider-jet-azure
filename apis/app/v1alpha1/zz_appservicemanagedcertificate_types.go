/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AppServiceManagedCertificateObservation struct {
	CanonicalName string `json:"canonicalName,omitempty" tf:"canonical_name"`

	ExpirationDate string `json:"expirationDate,omitempty" tf:"expiration_date"`

	FriendlyName string `json:"friendlyName,omitempty" tf:"friendly_name"`

	HostNames []string `json:"hostNames,omitempty" tf:"host_names"`

	IssueDate string `json:"issueDate,omitempty" tf:"issue_date"`

	Issuer string `json:"issuer,omitempty" tf:"issuer"`

	SubjectName string `json:"subjectName,omitempty" tf:"subject_name"`

	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type AppServiceManagedCertificateParameters struct {

	// +kubebuilder:validation:Required
	CustomHostnameBindingID string `json:"customHostnameBindingId" tf:"custom_hostname_binding_id"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// AppServiceManagedCertificateSpec defines the desired state of AppServiceManagedCertificate
type AppServiceManagedCertificateSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppServiceManagedCertificateParameters `json:"forProvider"`
}

// AppServiceManagedCertificateStatus defines the observed state of AppServiceManagedCertificate.
type AppServiceManagedCertificateStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppServiceManagedCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceManagedCertificate is the Schema for the AppServiceManagedCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AppServiceManagedCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppServiceManagedCertificateSpec   `json:"spec"`
	Status            AppServiceManagedCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceManagedCertificateList contains a list of AppServiceManagedCertificates
type AppServiceManagedCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppServiceManagedCertificate `json:"items"`
}

// Repository type metadata.
var (
	AppServiceManagedCertificateKind             = "AppServiceManagedCertificate"
	AppServiceManagedCertificateGroupKind        = schema.GroupKind{Group: Group, Kind: AppServiceManagedCertificateKind}.String()
	AppServiceManagedCertificateKindAPIVersion   = AppServiceManagedCertificateKind + "." + GroupVersion.String()
	AppServiceManagedCertificateGroupVersionKind = GroupVersion.WithKind(AppServiceManagedCertificateKind)
)

func init() {
	SchemeBuilder.Register(&AppServiceManagedCertificate{}, &AppServiceManagedCertificateList{})
}
