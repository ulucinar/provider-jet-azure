/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AppConfigurationObservation struct {
	Endpoint string `json:"endpoint,omitempty" tf:"endpoint"`

	PrimaryReadKey []PrimaryReadKeyObservation `json:"primaryReadKey,omitempty" tf:"primary_read_key"`

	PrimaryWriteKey []PrimaryWriteKeyObservation `json:"primaryWriteKey,omitempty" tf:"primary_write_key"`

	SecondaryReadKey []SecondaryReadKeyObservation `json:"secondaryReadKey,omitempty" tf:"secondary_read_key"`

	SecondaryWriteKey []SecondaryWriteKeyObservation `json:"secondaryWriteKey,omitempty" tf:"secondary_write_key"`
}

type AppConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Sku *string `json:"sku,omitempty" tf:"sku"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Optional
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type PrimaryReadKeyObservation struct {
	ConnectionString string `json:"connectionString,omitempty" tf:"connection_string"`

	ID string `json:"id,omitempty" tf:"id"`

	Secret string `json:"secret,omitempty" tf:"secret"`
}

type PrimaryReadKeyParameters struct {
}

type PrimaryWriteKeyObservation struct {
	ConnectionString string `json:"connectionString,omitempty" tf:"connection_string"`

	ID string `json:"id,omitempty" tf:"id"`

	Secret string `json:"secret,omitempty" tf:"secret"`
}

type PrimaryWriteKeyParameters struct {
}

type SecondaryReadKeyObservation struct {
	ConnectionString string `json:"connectionString,omitempty" tf:"connection_string"`

	ID string `json:"id,omitempty" tf:"id"`

	Secret string `json:"secret,omitempty" tf:"secret"`
}

type SecondaryReadKeyParameters struct {
}

type SecondaryWriteKeyObservation struct {
	ConnectionString string `json:"connectionString,omitempty" tf:"connection_string"`

	ID string `json:"id,omitempty" tf:"id"`

	Secret string `json:"secret,omitempty" tf:"secret"`
}

type SecondaryWriteKeyParameters struct {
}

// AppConfigurationSpec defines the desired state of AppConfiguration
type AppConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppConfigurationParameters `json:"forProvider"`
}

// AppConfigurationStatus defines the observed state of AppConfiguration.
type AppConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppConfiguration is the Schema for the AppConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AppConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppConfigurationSpec   `json:"spec"`
	Status            AppConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppConfigurationList contains a list of AppConfigurations
type AppConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppConfiguration `json:"items"`
}

// Repository type metadata.
var (
	AppConfigurationKind             = "AppConfiguration"
	AppConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: AppConfigurationKind}.String()
	AppConfigurationKindAPIVersion   = AppConfigurationKind + "." + GroupVersion.String()
	AppConfigurationGroupVersionKind = GroupVersion.WithKind(AppConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&AppConfiguration{}, &AppConfigurationList{})
}
