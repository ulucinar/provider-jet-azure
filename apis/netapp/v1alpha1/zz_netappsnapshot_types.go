/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type NetappSnapshotObservation struct {
}

type NetappSnapshotParameters struct {

	// +kubebuilder:validation:Required
	AccountName string `json:"accountName" tf:"account_name"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	PoolName string `json:"poolName" tf:"pool_name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	VolumeName string `json:"volumeName" tf:"volume_name"`
}

// NetappSnapshotSpec defines the desired state of NetappSnapshot
type NetappSnapshotSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       NetappSnapshotParameters `json:"forProvider"`
}

// NetappSnapshotStatus defines the observed state of NetappSnapshot.
type NetappSnapshotStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          NetappSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetappSnapshot is the Schema for the NetappSnapshots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type NetappSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetappSnapshotSpec   `json:"spec"`
	Status            NetappSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetappSnapshotList contains a list of NetappSnapshots
type NetappSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetappSnapshot `json:"items"`
}

// Repository type metadata.
var (
	NetappSnapshotKind             = "NetappSnapshot"
	NetappSnapshotGroupKind        = schema.GroupKind{Group: Group, Kind: NetappSnapshotKind}.String()
	NetappSnapshotKindAPIVersion   = NetappSnapshotKind + "." + GroupVersion.String()
	NetappSnapshotGroupVersionKind = GroupVersion.WithKind(NetappSnapshotKind)
)

func init() {
	SchemeBuilder.Register(&NetappSnapshot{}, &NetappSnapshotList{})
}
