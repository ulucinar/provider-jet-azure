/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type NetappPoolObservation struct {
}

type NetappPoolParameters struct {

	// +kubebuilder:validation:Required
	AccountName string `json:"accountName" tf:"account_name"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	ServiceLevel string `json:"serviceLevel" tf:"service_level"`

	// +kubebuilder:validation:Required
	SizeInTb int64 `json:"sizeInTb" tf:"size_in_tb"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// NetappPoolSpec defines the desired state of NetappPool
type NetappPoolSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       NetappPoolParameters `json:"forProvider"`
}

// NetappPoolStatus defines the observed state of NetappPool.
type NetappPoolStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          NetappPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetappPool is the Schema for the NetappPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type NetappPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetappPoolSpec   `json:"spec"`
	Status            NetappPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetappPoolList contains a list of NetappPools
type NetappPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetappPool `json:"items"`
}

// Repository type metadata.
var (
	NetappPoolKind             = "NetappPool"
	NetappPoolGroupKind        = schema.GroupKind{Group: Group, Kind: NetappPoolKind}.String()
	NetappPoolKindAPIVersion   = NetappPoolKind + "." + GroupVersion.String()
	NetappPoolGroupVersionKind = GroupVersion.WithKind(NetappPoolKind)
)

func init() {
	SchemeBuilder.Register(&NetappPool{}, &NetappPoolList{})
}
