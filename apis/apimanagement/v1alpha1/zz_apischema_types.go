/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APISchemaObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type APISchemaParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName *string `json:"apiManagementName" tf:"api_management_name,omitempty"`

	// +kubebuilder:validation:Required
	APIName *string `json:"apiName" tf:"api_name,omitempty"`

	// +kubebuilder:validation:Required
	ContentType *string `json:"contentType" tf:"content_type,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	SchemaID *string `json:"schemaId" tf:"schema_id,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// APISchemaSpec defines the desired state of APISchema
type APISchemaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     APISchemaParameters `json:"forProvider"`
}

// APISchemaStatus defines the observed state of APISchema.
type APISchemaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        APISchemaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// APISchema is the Schema for the APISchemas API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type APISchema struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              APISchemaSpec   `json:"spec"`
	Status            APISchemaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// APISchemaList contains a list of APISchemas
type APISchemaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []APISchema `json:"items"`
}

// Repository type metadata.
var (
	APISchema_Kind             = "APISchema"
	APISchema_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: APISchema_Kind}.String()
	APISchema_KindAPIVersion   = APISchema_Kind + "." + CRDGroupVersion.String()
	APISchema_GroupVersionKind = CRDGroupVersion.WithKind(APISchema_Kind)
)

func init() {
	SchemeBuilder.Register(&APISchema{}, &APISchemaList{})
}
