/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationInsightsObservation struct {
}

type ApplicationInsightsParameters struct {

	// +kubebuilder:validation:Required
	InstrumentationKeySecretRef v1.SecretKeySelector `json:"instrumentationKeySecretRef" tf:"-"`
}

type EventHubObservation struct {
}

type EventHubParameters struct {

	// +kubebuilder:validation:Required
	ConnectionStringSecretRef v1.SecretKeySelector `json:"connectionStringSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type LoggerObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LoggerParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName *string `json:"apiManagementName" tf:"api_management_name,omitempty"`

	// +kubebuilder:validation:Optional
	ApplicationInsights []ApplicationInsightsParameters `json:"applicationInsights,omitempty" tf:"application_insights,omitempty"`

	// +kubebuilder:validation:Optional
	Buffered *bool `json:"buffered,omitempty" tf:"buffered,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EventHub []EventHubParameters `json:"eventhub,omitempty" tf:"eventhub,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`
}

// LoggerSpec defines the desired state of Logger
type LoggerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LoggerParameters `json:"forProvider"`
}

// LoggerStatus defines the observed state of Logger.
type LoggerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LoggerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Logger is the Schema for the Loggers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type Logger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LoggerSpec   `json:"spec"`
	Status            LoggerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LoggerList contains a list of Loggers
type LoggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Logger `json:"items"`
}

// Repository type metadata.
var (
	Logger_Kind             = "Logger"
	Logger_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Logger_Kind}.String()
	Logger_KindAPIVersion   = Logger_Kind + "." + CRDGroupVersion.String()
	Logger_GroupVersionKind = CRDGroupVersion.WithKind(Logger_Kind)
)

func init() {
	SchemeBuilder.Register(&Logger{}, &LoggerList{})
}
