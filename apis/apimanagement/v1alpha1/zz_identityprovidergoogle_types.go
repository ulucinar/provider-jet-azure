/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IdentityProviderGoogleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IdentityProviderGoogleParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName *string `json:"apiManagementName" tf:"api_management_name,omitempty"`

	// +kubebuilder:validation:Required
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Required
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`
}

// IdentityProviderGoogleSpec defines the desired state of IdentityProviderGoogle
type IdentityProviderGoogleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IdentityProviderGoogleParameters `json:"forProvider"`
}

// IdentityProviderGoogleStatus defines the observed state of IdentityProviderGoogle.
type IdentityProviderGoogleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IdentityProviderGoogleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IdentityProviderGoogle is the Schema for the IdentityProviderGoogles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type IdentityProviderGoogle struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IdentityProviderGoogleSpec   `json:"spec"`
	Status            IdentityProviderGoogleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IdentityProviderGoogleList contains a list of IdentityProviderGoogles
type IdentityProviderGoogleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IdentityProviderGoogle `json:"items"`
}

// Repository type metadata.
var (
	IdentityProviderGoogle_Kind             = "IdentityProviderGoogle"
	IdentityProviderGoogle_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IdentityProviderGoogle_Kind}.String()
	IdentityProviderGoogle_KindAPIVersion   = IdentityProviderGoogle_Kind + "." + CRDGroupVersion.String()
	IdentityProviderGoogle_GroupVersionKind = CRDGroupVersion.WithKind(IdentityProviderGoogle_Kind)
)

func init() {
	SchemeBuilder.Register(&IdentityProviderGoogle{}, &IdentityProviderGoogleList{})
}
