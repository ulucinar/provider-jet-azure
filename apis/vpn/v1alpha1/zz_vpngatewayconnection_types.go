/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IpsecPolicyObservation struct {
}

type IpsecPolicyParameters struct {

	// +kubebuilder:validation:Required
	DhGroup string `json:"dhGroup" tf:"dh_group"`

	// +kubebuilder:validation:Required
	EncryptionAlgorithm string `json:"encryptionAlgorithm" tf:"encryption_algorithm"`

	// +kubebuilder:validation:Required
	IkeEncryptionAlgorithm string `json:"ikeEncryptionAlgorithm" tf:"ike_encryption_algorithm"`

	// +kubebuilder:validation:Required
	IkeIntegrityAlgorithm string `json:"ikeIntegrityAlgorithm" tf:"ike_integrity_algorithm"`

	// +kubebuilder:validation:Required
	IntegrityAlgorithm string `json:"integrityAlgorithm" tf:"integrity_algorithm"`

	// +kubebuilder:validation:Required
	PfsGroup string `json:"pfsGroup" tf:"pfs_group"`

	// +kubebuilder:validation:Required
	SaDataSizeKb int64 `json:"saDataSizeKb" tf:"sa_data_size_kb"`

	// +kubebuilder:validation:Required
	SaLifetimeSec int64 `json:"saLifetimeSec" tf:"sa_lifetime_sec"`
}

type RoutingObservation struct {
}

type RoutingParameters struct {

	// +kubebuilder:validation:Required
	AssociatedRouteTable string `json:"associatedRouteTable" tf:"associated_route_table"`

	// +kubebuilder:validation:Required
	PropagatedRouteTables []string `json:"propagatedRouteTables" tf:"propagated_route_tables"`
}

type VpnGatewayConnectionObservation struct {
}

type VpnGatewayConnectionParameters struct {

	// +kubebuilder:validation:Optional
	InternetSecurityEnabled *bool `json:"internetSecurityEnabled,omitempty" tf:"internet_security_enabled"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	RemoteVpnSiteID string `json:"remoteVpnSiteId" tf:"remote_vpn_site_id"`

	// +kubebuilder:validation:Optional
	Routing []RoutingParameters `json:"routing,omitempty" tf:"routing"`

	// +kubebuilder:validation:Required
	VpnGatewayID string `json:"vpnGatewayId" tf:"vpn_gateway_id"`

	// +kubebuilder:validation:Required
	VpnLink []VpnLinkParameters `json:"vpnLink" tf:"vpn_link"`
}

type VpnLinkObservation struct {
}

type VpnLinkParameters struct {

	// +kubebuilder:validation:Optional
	BandwidthMbps *int64 `json:"bandwidthMbps,omitempty" tf:"bandwidth_mbps"`

	// +kubebuilder:validation:Optional
	BgpEnabled *bool `json:"bgpEnabled,omitempty" tf:"bgp_enabled"`

	// +kubebuilder:validation:Optional
	IpsecPolicy []IpsecPolicyParameters `json:"ipsecPolicy,omitempty" tf:"ipsec_policy"`

	// +kubebuilder:validation:Optional
	LocalAzureIPAddressEnabled *bool `json:"localAzureIpAddressEnabled,omitempty" tf:"local_azure_ip_address_enabled"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PolicyBasedTrafficSelectorEnabled *bool `json:"policyBasedTrafficSelectorEnabled,omitempty" tf:"policy_based_traffic_selector_enabled"`

	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`

	// +kubebuilder:validation:Optional
	RatelimitEnabled *bool `json:"ratelimitEnabled,omitempty" tf:"ratelimit_enabled"`

	// +kubebuilder:validation:Optional
	RouteWeight *int64 `json:"routeWeight,omitempty" tf:"route_weight"`

	// +kubebuilder:validation:Optional
	SharedKey *string `json:"sharedKey,omitempty" tf:"shared_key"`

	// +kubebuilder:validation:Required
	VpnSiteLinkID string `json:"vpnSiteLinkId" tf:"vpn_site_link_id"`
}

// VpnGatewayConnectionSpec defines the desired state of VpnGatewayConnection
type VpnGatewayConnectionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VpnGatewayConnectionParameters `json:"forProvider"`
}

// VpnGatewayConnectionStatus defines the observed state of VpnGatewayConnection.
type VpnGatewayConnectionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VpnGatewayConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VpnGatewayConnection is the Schema for the VpnGatewayConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VpnGatewayConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpnGatewayConnectionSpec   `json:"spec"`
	Status            VpnGatewayConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpnGatewayConnectionList contains a list of VpnGatewayConnections
type VpnGatewayConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpnGatewayConnection `json:"items"`
}

// Repository type metadata.
var (
	VpnGatewayConnectionKind             = "VpnGatewayConnection"
	VpnGatewayConnectionGroupKind        = schema.GroupKind{Group: Group, Kind: VpnGatewayConnectionKind}.String()
	VpnGatewayConnectionKindAPIVersion   = VpnGatewayConnectionKind + "." + GroupVersion.String()
	VpnGatewayConnectionGroupVersionKind = GroupVersion.WithKind(VpnGatewayConnectionKind)
)

func init() {
	SchemeBuilder.Register(&VpnGatewayConnection{}, &VpnGatewayConnectionList{})
}
