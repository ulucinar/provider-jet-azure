/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BgpObservation struct {
}

type BgpParameters struct {

	// +kubebuilder:validation:Required
	Asn int64 `json:"asn" tf:"asn"`

	// +kubebuilder:validation:Required
	PeeringAddress string `json:"peeringAddress" tf:"peering_address"`
}

type LinkObservation struct {
	ID string `json:"id,omitempty" tf:"id"`
}

type LinkParameters struct {

	// +kubebuilder:validation:Optional
	Bgp []BgpParameters `json:"bgp,omitempty" tf:"bgp"`

	// +kubebuilder:validation:Optional
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn"`

	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name"`

	// +kubebuilder:validation:Optional
	SpeedInMbps *int64 `json:"speedInMbps,omitempty" tf:"speed_in_mbps"`
}

type VpnSiteObservation struct {
}

type VpnSiteParameters struct {

	// +kubebuilder:validation:Optional
	AddressCidrs []string `json:"addressCidrs,omitempty" tf:"address_cidrs"`

	// +kubebuilder:validation:Optional
	DeviceModel *string `json:"deviceModel,omitempty" tf:"device_model"`

	// +kubebuilder:validation:Optional
	DeviceVendor *string `json:"deviceVendor,omitempty" tf:"device_vendor"`

	// +kubebuilder:validation:Optional
	Link []LinkParameters `json:"link,omitempty" tf:"link"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	VirtualWanID string `json:"virtualWanId" tf:"virtual_wan_id"`
}

// VpnSiteSpec defines the desired state of VpnSite
type VpnSiteSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VpnSiteParameters `json:"forProvider"`
}

// VpnSiteStatus defines the observed state of VpnSite.
type VpnSiteStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VpnSiteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VpnSite is the Schema for the VpnSites API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VpnSite struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpnSiteSpec   `json:"spec"`
	Status            VpnSiteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpnSiteList contains a list of VpnSites
type VpnSiteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpnSite `json:"items"`
}

// Repository type metadata.
var (
	VpnSiteKind             = "VpnSite"
	VpnSiteGroupKind        = schema.GroupKind{Group: Group, Kind: VpnSiteKind}.String()
	VpnSiteKindAPIVersion   = VpnSiteKind + "." + GroupVersion.String()
	VpnSiteGroupVersionKind = GroupVersion.WithKind(VpnSiteKind)
)

func init() {
	SchemeBuilder.Register(&VpnSite{}, &VpnSiteList{})
}
