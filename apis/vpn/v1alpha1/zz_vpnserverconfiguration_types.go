/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AzureActiveDirectoryAuthenticationObservation struct {
}

type AzureActiveDirectoryAuthenticationParameters struct {

	// +kubebuilder:validation:Required
	Audience string `json:"audience" tf:"audience"`

	// +kubebuilder:validation:Required
	Issuer string `json:"issuer" tf:"issuer"`

	// +kubebuilder:validation:Required
	Tenant string `json:"tenant" tf:"tenant"`
}

type ClientRevokedCertificateObservation struct {
}

type ClientRevokedCertificateParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Thumbprint string `json:"thumbprint" tf:"thumbprint"`
}

type ClientRootCertificateObservation struct {
}

type ClientRootCertificateParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	PublicCertData string `json:"publicCertData" tf:"public_cert_data"`
}

type RadiusClientRootCertificateObservation struct {
}

type RadiusClientRootCertificateParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Thumbprint string `json:"thumbprint" tf:"thumbprint"`
}

type RadiusObservation struct {
}

type RadiusParameters struct {

	// +kubebuilder:validation:Optional
	ClientRootCertificate []RadiusClientRootCertificateParameters `json:"clientRootCertificate,omitempty" tf:"client_root_certificate"`

	// +kubebuilder:validation:Optional
	Server []ServerParameters `json:"server,omitempty" tf:"server"`

	// +kubebuilder:validation:Required
	ServerRootCertificate []ServerRootCertificateParameters `json:"serverRootCertificate" tf:"server_root_certificate"`
}

type RadiusServerClientRootCertificateObservation struct {
}

type RadiusServerClientRootCertificateParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Thumbprint string `json:"thumbprint" tf:"thumbprint"`
}

type RadiusServerObservation struct {
}

type RadiusServerParameters struct {

	// +kubebuilder:validation:Required
	Address string `json:"address" tf:"address"`

	// +kubebuilder:validation:Optional
	ClientRootCertificate []RadiusServerClientRootCertificateParameters `json:"clientRootCertificate,omitempty" tf:"client_root_certificate"`

	// +kubebuilder:validation:Required
	Secret string `json:"secret" tf:"secret"`

	// +kubebuilder:validation:Required
	ServerRootCertificate []RadiusServerServerRootCertificateParameters `json:"serverRootCertificate" tf:"server_root_certificate"`
}

type RadiusServerServerRootCertificateObservation struct {
}

type RadiusServerServerRootCertificateParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	PublicCertData string `json:"publicCertData" tf:"public_cert_data"`
}

type ServerObservation struct {
}

type ServerParameters struct {

	// +kubebuilder:validation:Required
	Address string `json:"address" tf:"address"`

	// +kubebuilder:validation:Required
	Score int64 `json:"score" tf:"score"`

	// +kubebuilder:validation:Required
	Secret string `json:"secret" tf:"secret"`
}

type ServerRootCertificateObservation struct {
}

type ServerRootCertificateParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	PublicCertData string `json:"publicCertData" tf:"public_cert_data"`
}

type VpnServerConfigurationIpsecPolicyObservation struct {
}

type VpnServerConfigurationIpsecPolicyParameters struct {

	// +kubebuilder:validation:Required
	DhGroup string `json:"dhGroup" tf:"dh_group"`

	// +kubebuilder:validation:Required
	IkeEncryption string `json:"ikeEncryption" tf:"ike_encryption"`

	// +kubebuilder:validation:Required
	IkeIntegrity string `json:"ikeIntegrity" tf:"ike_integrity"`

	// +kubebuilder:validation:Required
	IpsecEncryption string `json:"ipsecEncryption" tf:"ipsec_encryption"`

	// +kubebuilder:validation:Required
	IpsecIntegrity string `json:"ipsecIntegrity" tf:"ipsec_integrity"`

	// +kubebuilder:validation:Required
	PfsGroup string `json:"pfsGroup" tf:"pfs_group"`

	// +kubebuilder:validation:Required
	SaDataSizeKilobytes int64 `json:"saDataSizeKilobytes" tf:"sa_data_size_kilobytes"`

	// +kubebuilder:validation:Required
	SaLifetimeSeconds int64 `json:"saLifetimeSeconds" tf:"sa_lifetime_seconds"`
}

type VpnServerConfigurationObservation struct {
}

type VpnServerConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	AzureActiveDirectoryAuthentication []AzureActiveDirectoryAuthenticationParameters `json:"azureActiveDirectoryAuthentication,omitempty" tf:"azure_active_directory_authentication"`

	// +kubebuilder:validation:Optional
	ClientRevokedCertificate []ClientRevokedCertificateParameters `json:"clientRevokedCertificate,omitempty" tf:"client_revoked_certificate"`

	// +kubebuilder:validation:Optional
	ClientRootCertificate []ClientRootCertificateParameters `json:"clientRootCertificate,omitempty" tf:"client_root_certificate"`

	// +kubebuilder:validation:Optional
	IpsecPolicy []VpnServerConfigurationIpsecPolicyParameters `json:"ipsecPolicy,omitempty" tf:"ipsec_policy"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Radius []RadiusParameters `json:"radius,omitempty" tf:"radius"`

	// +kubebuilder:validation:Optional
	RadiusServer []RadiusServerParameters `json:"radiusServer,omitempty" tf:"radius_server"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	VpnAuthenticationTypes []string `json:"vpnAuthenticationTypes" tf:"vpn_authentication_types"`

	// +kubebuilder:validation:Optional
	VpnProtocols []string `json:"vpnProtocols,omitempty" tf:"vpn_protocols"`
}

// VpnServerConfigurationSpec defines the desired state of VpnServerConfiguration
type VpnServerConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VpnServerConfigurationParameters `json:"forProvider"`
}

// VpnServerConfigurationStatus defines the observed state of VpnServerConfiguration.
type VpnServerConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VpnServerConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VpnServerConfiguration is the Schema for the VpnServerConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VpnServerConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpnServerConfigurationSpec   `json:"spec"`
	Status            VpnServerConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpnServerConfigurationList contains a list of VpnServerConfigurations
type VpnServerConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpnServerConfiguration `json:"items"`
}

// Repository type metadata.
var (
	VpnServerConfigurationKind             = "VpnServerConfiguration"
	VpnServerConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: VpnServerConfigurationKind}.String()
	VpnServerConfigurationKindAPIVersion   = VpnServerConfigurationKind + "." + GroupVersion.String()
	VpnServerConfigurationGroupVersionKind = GroupVersion.WithKind(VpnServerConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&VpnServerConfiguration{}, &VpnServerConfigurationList{})
}
