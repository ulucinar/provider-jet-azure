/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type VmwareExpressRouteAuthorizationObservation struct {
	ExpressRouteAuthorizationID string `json:"expressRouteAuthorizationId,omitempty" tf:"express_route_authorization_id"`

	ExpressRouteAuthorizationKey string `json:"expressRouteAuthorizationKey,omitempty" tf:"express_route_authorization_key"`
}

type VmwareExpressRouteAuthorizationParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	PrivateCloudID string `json:"privateCloudId" tf:"private_cloud_id"`
}

// VmwareExpressRouteAuthorizationSpec defines the desired state of VmwareExpressRouteAuthorization
type VmwareExpressRouteAuthorizationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VmwareExpressRouteAuthorizationParameters `json:"forProvider"`
}

// VmwareExpressRouteAuthorizationStatus defines the observed state of VmwareExpressRouteAuthorization.
type VmwareExpressRouteAuthorizationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VmwareExpressRouteAuthorizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VmwareExpressRouteAuthorization is the Schema for the VmwareExpressRouteAuthorizations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VmwareExpressRouteAuthorization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VmwareExpressRouteAuthorizationSpec   `json:"spec"`
	Status            VmwareExpressRouteAuthorizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VmwareExpressRouteAuthorizationList contains a list of VmwareExpressRouteAuthorizations
type VmwareExpressRouteAuthorizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VmwareExpressRouteAuthorization `json:"items"`
}

// Repository type metadata.
var (
	VmwareExpressRouteAuthorizationKind             = "VmwareExpressRouteAuthorization"
	VmwareExpressRouteAuthorizationGroupKind        = schema.GroupKind{Group: Group, Kind: VmwareExpressRouteAuthorizationKind}.String()
	VmwareExpressRouteAuthorizationKindAPIVersion   = VmwareExpressRouteAuthorizationKind + "." + GroupVersion.String()
	VmwareExpressRouteAuthorizationGroupVersionKind = GroupVersion.WithKind(VmwareExpressRouteAuthorizationKind)
)

func init() {
	SchemeBuilder.Register(&VmwareExpressRouteAuthorization{}, &VmwareExpressRouteAuthorizationList{})
}
