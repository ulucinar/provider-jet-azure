/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type VmwareClusterObservation struct {
	ClusterNumber int64 `json:"clusterNumber,omitempty" tf:"cluster_number"`

	Hosts []string `json:"hosts,omitempty" tf:"hosts"`
}

type VmwareClusterParameters struct {

	// +kubebuilder:validation:Required
	ClusterNodeCount int64 `json:"clusterNodeCount" tf:"cluster_node_count"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	SkuName string `json:"skuName" tf:"sku_name"`

	// +kubebuilder:validation:Required
	VmwareCloudID string `json:"vmwareCloudId" tf:"vmware_cloud_id"`
}

// VmwareClusterSpec defines the desired state of VmwareCluster
type VmwareClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VmwareClusterParameters `json:"forProvider"`
}

// VmwareClusterStatus defines the observed state of VmwareCluster.
type VmwareClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VmwareClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VmwareCluster is the Schema for the VmwareClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VmwareCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VmwareClusterSpec   `json:"spec"`
	Status            VmwareClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VmwareClusterList contains a list of VmwareClusters
type VmwareClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VmwareCluster `json:"items"`
}

// Repository type metadata.
var (
	VmwareClusterKind             = "VmwareCluster"
	VmwareClusterGroupKind        = schema.GroupKind{Group: Group, Kind: VmwareClusterKind}.String()
	VmwareClusterKindAPIVersion   = VmwareClusterKind + "." + GroupVersion.String()
	VmwareClusterGroupVersionKind = GroupVersion.WithKind(VmwareClusterKind)
)

func init() {
	SchemeBuilder.Register(&VmwareCluster{}, &VmwareClusterList{})
}
