/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StandardEnvironmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type StandardEnvironmentParameters struct {

	// +kubebuilder:validation:Required
	DataRetentionTime *string `json:"dataRetentionTime" tf:"data_retention_time,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PartitionKey *string `json:"partitionKey,omitempty" tf:"partition_key,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	SkuName *string `json:"skuName" tf:"sku_name,omitempty"`

	// +kubebuilder:validation:Optional
	StorageLimitExceededBehavior *string `json:"storageLimitExceededBehavior,omitempty" tf:"storage_limit_exceeded_behavior,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// StandardEnvironmentSpec defines the desired state of StandardEnvironment
type StandardEnvironmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StandardEnvironmentParameters `json:"forProvider"`
}

// StandardEnvironmentStatus defines the observed state of StandardEnvironment.
type StandardEnvironmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StandardEnvironmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StandardEnvironment is the Schema for the StandardEnvironments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type StandardEnvironment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StandardEnvironmentSpec   `json:"spec"`
	Status            StandardEnvironmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StandardEnvironmentList contains a list of StandardEnvironments
type StandardEnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StandardEnvironment `json:"items"`
}

// Repository type metadata.
var (
	StandardEnvironment_Kind             = "StandardEnvironment"
	StandardEnvironment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StandardEnvironment_Kind}.String()
	StandardEnvironment_KindAPIVersion   = StandardEnvironment_Kind + "." + CRDGroupVersion.String()
	StandardEnvironment_GroupVersionKind = CRDGroupVersion.WithKind(StandardEnvironment_Kind)
)

func init() {
	SchemeBuilder.Register(&StandardEnvironment{}, &StandardEnvironmentList{})
}
