/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type SynapseManagedPrivateEndpointObservation struct {
}

type SynapseManagedPrivateEndpointParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	SubresourceName string `json:"subresourceName" tf:"subresource_name"`

	// +kubebuilder:validation:Required
	SynapseWorkspaceID string `json:"synapseWorkspaceId" tf:"synapse_workspace_id"`

	// +kubebuilder:validation:Required
	TargetResourceID string `json:"targetResourceId" tf:"target_resource_id"`
}

// SynapseManagedPrivateEndpointSpec defines the desired state of SynapseManagedPrivateEndpoint
type SynapseManagedPrivateEndpointSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SynapseManagedPrivateEndpointParameters `json:"forProvider"`
}

// SynapseManagedPrivateEndpointStatus defines the observed state of SynapseManagedPrivateEndpoint.
type SynapseManagedPrivateEndpointStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SynapseManagedPrivateEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SynapseManagedPrivateEndpoint is the Schema for the SynapseManagedPrivateEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SynapseManagedPrivateEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SynapseManagedPrivateEndpointSpec   `json:"spec"`
	Status            SynapseManagedPrivateEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SynapseManagedPrivateEndpointList contains a list of SynapseManagedPrivateEndpoints
type SynapseManagedPrivateEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SynapseManagedPrivateEndpoint `json:"items"`
}

// Repository type metadata.
var (
	SynapseManagedPrivateEndpointKind             = "SynapseManagedPrivateEndpoint"
	SynapseManagedPrivateEndpointGroupKind        = schema.GroupKind{Group: Group, Kind: SynapseManagedPrivateEndpointKind}.String()
	SynapseManagedPrivateEndpointKindAPIVersion   = SynapseManagedPrivateEndpointKind + "." + GroupVersion.String()
	SynapseManagedPrivateEndpointGroupVersionKind = GroupVersion.WithKind(SynapseManagedPrivateEndpointKind)
)

func init() {
	SchemeBuilder.Register(&SynapseManagedPrivateEndpoint{}, &SynapseManagedPrivateEndpointList{})
}
