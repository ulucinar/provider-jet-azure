/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AadAdminObservation struct {
}

type AadAdminParameters struct {

	// +kubebuilder:validation:Required
	Login string `json:"login" tf:"login"`

	// +kubebuilder:validation:Required
	ObjectID string `json:"objectId" tf:"object_id"`

	// +kubebuilder:validation:Required
	TenantID string `json:"tenantId" tf:"tenant_id"`
}

type AzureDevopsRepoObservation struct {
}

type AzureDevopsRepoParameters struct {

	// +kubebuilder:validation:Required
	AccountName string `json:"accountName" tf:"account_name"`

	// +kubebuilder:validation:Required
	BranchName string `json:"branchName" tf:"branch_name"`

	// +kubebuilder:validation:Required
	ProjectName string `json:"projectName" tf:"project_name"`

	// +kubebuilder:validation:Required
	RepositoryName string `json:"repositoryName" tf:"repository_name"`

	// +kubebuilder:validation:Required
	RootFolder string `json:"rootFolder" tf:"root_folder"`
}

type GithubRepoObservation struct {
}

type GithubRepoParameters struct {

	// +kubebuilder:validation:Required
	AccountName string `json:"accountName" tf:"account_name"`

	// +kubebuilder:validation:Required
	BranchName string `json:"branchName" tf:"branch_name"`

	// +kubebuilder:validation:Optional
	GitURL *string `json:"gitUrl,omitempty" tf:"git_url"`

	// +kubebuilder:validation:Required
	RepositoryName string `json:"repositoryName" tf:"repository_name"`

	// +kubebuilder:validation:Required
	RootFolder string `json:"rootFolder" tf:"root_folder"`
}

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`

	Type string `json:"type,omitempty" tf:"type"`
}

type IdentityParameters struct {
}

type SynapseWorkspaceObservation struct {
	ConnectivityEndpoints map[string]string `json:"connectivityEndpoints,omitempty" tf:"connectivity_endpoints"`

	Identity []IdentityObservation `json:"identity,omitempty" tf:"identity"`
}

type SynapseWorkspaceParameters struct {

	// +kubebuilder:validation:Optional
	AadAdmin []AadAdminParameters `json:"aadAdmin,omitempty" tf:"aad_admin"`

	// +kubebuilder:validation:Optional
	AzureDevopsRepo []AzureDevopsRepoParameters `json:"azureDevopsRepo,omitempty" tf:"azure_devops_repo"`

	// +kubebuilder:validation:Optional
	CustomerManagedKeyVersionlessID *string `json:"customerManagedKeyVersionlessId,omitempty" tf:"customer_managed_key_versionless_id"`

	// +kubebuilder:validation:Optional
	DataExfiltrationProtectionEnabled *bool `json:"dataExfiltrationProtectionEnabled,omitempty" tf:"data_exfiltration_protection_enabled"`

	// +kubebuilder:validation:Optional
	GithubRepo []GithubRepoParameters `json:"githubRepo,omitempty" tf:"github_repo"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	ManagedResourceGroupName *string `json:"managedResourceGroupName,omitempty" tf:"managed_resource_group_name"`

	// +kubebuilder:validation:Optional
	ManagedVirtualNetworkEnabled *bool `json:"managedVirtualNetworkEnabled,omitempty" tf:"managed_virtual_network_enabled"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	SQLAdministratorLogin string `json:"sqlAdministratorLogin" tf:"sql_administrator_login"`

	// +kubebuilder:validation:Required
	SQLAdministratorLoginPassword string `json:"sqlAdministratorLoginPassword" tf:"sql_administrator_login_password"`

	// +kubebuilder:validation:Optional
	SQLIdentityControlEnabled *bool `json:"sqlIdentityControlEnabled,omitempty" tf:"sql_identity_control_enabled"`

	// +kubebuilder:validation:Required
	StorageDataLakeGen2FilesystemID string `json:"storageDataLakeGen2FilesystemId" tf:"storage_data_lake_gen2_filesystem_id"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// SynapseWorkspaceSpec defines the desired state of SynapseWorkspace
type SynapseWorkspaceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SynapseWorkspaceParameters `json:"forProvider"`
}

// SynapseWorkspaceStatus defines the observed state of SynapseWorkspace.
type SynapseWorkspaceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SynapseWorkspaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SynapseWorkspace is the Schema for the SynapseWorkspaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SynapseWorkspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SynapseWorkspaceSpec   `json:"spec"`
	Status            SynapseWorkspaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SynapseWorkspaceList contains a list of SynapseWorkspaces
type SynapseWorkspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SynapseWorkspace `json:"items"`
}

// Repository type metadata.
var (
	SynapseWorkspaceKind             = "SynapseWorkspace"
	SynapseWorkspaceGroupKind        = schema.GroupKind{Group: Group, Kind: SynapseWorkspaceKind}.String()
	SynapseWorkspaceKindAPIVersion   = SynapseWorkspaceKind + "." + GroupVersion.String()
	SynapseWorkspaceGroupVersionKind = GroupVersion.WithKind(SynapseWorkspaceKind)
)

func init() {
	SchemeBuilder.Register(&SynapseWorkspace{}, &SynapseWorkspaceList{})
}
