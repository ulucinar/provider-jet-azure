/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type SynapseFirewallRuleObservation struct {
}

type SynapseFirewallRuleParameters struct {

	// +kubebuilder:validation:Required
	EndIPAddress string `json:"endIpAddress" tf:"end_ip_address"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	StartIPAddress string `json:"startIpAddress" tf:"start_ip_address"`

	// +kubebuilder:validation:Required
	SynapseWorkspaceID string `json:"synapseWorkspaceId" tf:"synapse_workspace_id"`
}

// SynapseFirewallRuleSpec defines the desired state of SynapseFirewallRule
type SynapseFirewallRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SynapseFirewallRuleParameters `json:"forProvider"`
}

// SynapseFirewallRuleStatus defines the observed state of SynapseFirewallRule.
type SynapseFirewallRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SynapseFirewallRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SynapseFirewallRule is the Schema for the SynapseFirewallRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SynapseFirewallRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SynapseFirewallRuleSpec   `json:"spec"`
	Status            SynapseFirewallRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SynapseFirewallRuleList contains a list of SynapseFirewallRules
type SynapseFirewallRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SynapseFirewallRule `json:"items"`
}

// Repository type metadata.
var (
	SynapseFirewallRuleKind             = "SynapseFirewallRule"
	SynapseFirewallRuleGroupKind        = schema.GroupKind{Group: Group, Kind: SynapseFirewallRuleKind}.String()
	SynapseFirewallRuleKindAPIVersion   = SynapseFirewallRuleKind + "." + GroupVersion.String()
	SynapseFirewallRuleGroupVersionKind = GroupVersion.WithKind(SynapseFirewallRuleKind)
)

func init() {
	SchemeBuilder.Register(&SynapseFirewallRule{}, &SynapseFirewallRuleList{})
}
