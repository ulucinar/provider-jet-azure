/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionConfigurationObservation struct {
}

type ConnectionConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Route []RouteParameters `json:"route,omitempty" tf:"route,omitempty"`

	// +kubebuilder:validation:Required
	VPNClientAddressPool []VPNClientAddressPoolParameters `json:"vpnClientAddressPool" tf:"vpn_client_address_pool,omitempty"`
}

type PointToSiteVPNGatewayObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PointToSiteVPNGatewayParameters struct {

	// +kubebuilder:validation:Required
	ConnectionConfiguration []ConnectionConfigurationParameters `json:"connectionConfiguration" tf:"connection_configuration,omitempty"`

	// +kubebuilder:validation:Optional
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	ScaleUnit *int64 `json:"scaleUnit" tf:"scale_unit,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VPNServerConfigurationID *string `json:"vpnServerConfigurationId" tf:"vpn_server_configuration_id,omitempty"`

	// +kubebuilder:validation:Required
	VirtualHubID *string `json:"virtualHubId" tf:"virtual_hub_id,omitempty"`
}

type RouteObservation struct {
}

type RouteParameters struct {

	// +kubebuilder:validation:Required
	AssociatedRouteTableID *string `json:"associatedRouteTableId" tf:"associated_route_table_id,omitempty"`

	// +kubebuilder:validation:Optional
	PropagatedRouteTable []RoutePropagatedRouteTableParameters `json:"propagatedRouteTable,omitempty" tf:"propagated_route_table,omitempty"`
}

type RoutePropagatedRouteTableObservation struct {
}

type RoutePropagatedRouteTableParameters struct {

	// +kubebuilder:validation:Required
	Ids []*string `json:"ids" tf:"ids,omitempty"`

	// +kubebuilder:validation:Optional
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type VPNClientAddressPoolObservation struct {
}

type VPNClientAddressPoolParameters struct {

	// +kubebuilder:validation:Required
	AddressPrefixes []*string `json:"addressPrefixes" tf:"address_prefixes,omitempty"`
}

// PointToSiteVPNGatewaySpec defines the desired state of PointToSiteVPNGateway
type PointToSiteVPNGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PointToSiteVPNGatewayParameters `json:"forProvider"`
}

// PointToSiteVPNGatewayStatus defines the observed state of PointToSiteVPNGateway.
type PointToSiteVPNGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PointToSiteVPNGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PointToSiteVPNGateway is the Schema for the PointToSiteVPNGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type PointToSiteVPNGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PointToSiteVPNGatewaySpec   `json:"spec"`
	Status            PointToSiteVPNGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PointToSiteVPNGatewayList contains a list of PointToSiteVPNGateways
type PointToSiteVPNGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PointToSiteVPNGateway `json:"items"`
}

// Repository type metadata.
var (
	PointToSiteVPNGateway_Kind             = "PointToSiteVPNGateway"
	PointToSiteVPNGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PointToSiteVPNGateway_Kind}.String()
	PointToSiteVPNGateway_KindAPIVersion   = PointToSiteVPNGateway_Kind + "." + CRDGroupVersion.String()
	PointToSiteVPNGateway_GroupVersionKind = CRDGroupVersion.WithKind(PointToSiteVPNGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&PointToSiteVPNGateway{}, &PointToSiteVPNGatewayList{})
}
