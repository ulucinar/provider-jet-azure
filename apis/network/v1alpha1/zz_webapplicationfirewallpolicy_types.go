/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomRulesObservation struct {
}

type CustomRulesParameters struct {

	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// +kubebuilder:validation:Required
	MatchConditions []MatchConditionsParameters `json:"matchConditions" tf:"match_conditions,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Priority *int64 `json:"priority" tf:"priority,omitempty"`

	// +kubebuilder:validation:Required
	RuleType *string `json:"ruleType" tf:"rule_type,omitempty"`
}

type ManagedRuleSetObservation struct {
}

type ManagedRuleSetParameters struct {

	// +kubebuilder:validation:Optional
	RuleGroupOverride []RuleGroupOverrideParameters `json:"ruleGroupOverride,omitempty" tf:"rule_group_override,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`
}

type ManagedRulesExclusionObservation struct {
}

type ManagedRulesExclusionParameters struct {

	// +kubebuilder:validation:Required
	MatchVariable *string `json:"matchVariable" tf:"match_variable,omitempty"`

	// +kubebuilder:validation:Required
	Selector *string `json:"selector" tf:"selector,omitempty"`

	// +kubebuilder:validation:Required
	SelectorMatchOperator *string `json:"selectorMatchOperator" tf:"selector_match_operator,omitempty"`
}

type ManagedRulesObservation struct {
}

type ManagedRulesParameters struct {

	// +kubebuilder:validation:Optional
	Exclusion []ManagedRulesExclusionParameters `json:"exclusion,omitempty" tf:"exclusion,omitempty"`

	// +kubebuilder:validation:Required
	ManagedRuleSet []ManagedRuleSetParameters `json:"managedRuleSet" tf:"managed_rule_set,omitempty"`
}

type MatchConditionsObservation struct {
}

type MatchConditionsParameters struct {

	// +kubebuilder:validation:Required
	MatchValues []*string `json:"matchValues" tf:"match_values,omitempty"`

	// +kubebuilder:validation:Required
	MatchVariables []MatchVariablesParameters `json:"matchVariables" tf:"match_variables,omitempty"`

	// +kubebuilder:validation:Optional
	NegationCondition *bool `json:"negationCondition,omitempty" tf:"negation_condition,omitempty"`

	// +kubebuilder:validation:Required
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// +kubebuilder:validation:Optional
	Transforms []*string `json:"transforms,omitempty" tf:"transforms,omitempty"`
}

type MatchVariablesObservation struct {
}

type MatchVariablesParameters struct {

	// +kubebuilder:validation:Optional
	Selector *string `json:"selector,omitempty" tf:"selector,omitempty"`

	// +kubebuilder:validation:Required
	VariableName *string `json:"variableName" tf:"variable_name,omitempty"`
}

type PolicySettingsObservation struct {
}

type PolicySettingsParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	FileUploadLimitInMb *int64 `json:"fileUploadLimitInMb,omitempty" tf:"file_upload_limit_in_mb,omitempty"`

	// +kubebuilder:validation:Optional
	MaxRequestBodySizeInKb *int64 `json:"maxRequestBodySizeInKb,omitempty" tf:"max_request_body_size_in_kb,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	RequestBodyCheck *bool `json:"requestBodyCheck,omitempty" tf:"request_body_check,omitempty"`
}

type RuleGroupOverrideObservation struct {
}

type RuleGroupOverrideParameters struct {

	// +kubebuilder:validation:Required
	DisabledRules []*string `json:"disabledRules" tf:"disabled_rules,omitempty"`

	// +kubebuilder:validation:Required
	RuleGroupName *string `json:"ruleGroupName" tf:"rule_group_name,omitempty"`
}

type WebApplicationFirewallPolicyObservation struct {
	HTTPListenerIds []*string `json:"httpListenerIds,omitempty" tf:"http_listener_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PathBasedRuleIds []*string `json:"pathBasedRuleIds,omitempty" tf:"path_based_rule_ids,omitempty"`
}

type WebApplicationFirewallPolicyParameters struct {

	// +kubebuilder:validation:Optional
	CustomRules []CustomRulesParameters `json:"customRules,omitempty" tf:"custom_rules,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	ManagedRules []ManagedRulesParameters `json:"managedRules" tf:"managed_rules,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PolicySettings []PolicySettingsParameters `json:"policySettings,omitempty" tf:"policy_settings,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// WebApplicationFirewallPolicySpec defines the desired state of WebApplicationFirewallPolicy
type WebApplicationFirewallPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WebApplicationFirewallPolicyParameters `json:"forProvider"`
}

// WebApplicationFirewallPolicyStatus defines the observed state of WebApplicationFirewallPolicy.
type WebApplicationFirewallPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WebApplicationFirewallPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WebApplicationFirewallPolicy is the Schema for the WebApplicationFirewallPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type WebApplicationFirewallPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WebApplicationFirewallPolicySpec   `json:"spec"`
	Status            WebApplicationFirewallPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WebApplicationFirewallPolicyList contains a list of WebApplicationFirewallPolicys
type WebApplicationFirewallPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WebApplicationFirewallPolicy `json:"items"`
}

// Repository type metadata.
var (
	WebApplicationFirewallPolicy_Kind             = "WebApplicationFirewallPolicy"
	WebApplicationFirewallPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WebApplicationFirewallPolicy_Kind}.String()
	WebApplicationFirewallPolicy_KindAPIVersion   = WebApplicationFirewallPolicy_Kind + "." + CRDGroupVersion.String()
	WebApplicationFirewallPolicy_GroupVersionKind = CRDGroupVersion.WithKind(WebApplicationFirewallPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&WebApplicationFirewallPolicy{}, &WebApplicationFirewallPolicyList{})
}
