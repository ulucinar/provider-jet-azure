/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkPacketCaptureFilterObservation struct {
}

type NetworkPacketCaptureFilterParameters struct {

	// +kubebuilder:validation:Optional
	LocalIPAddress *string `json:"localIpAddress,omitempty" tf:"local_ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	LocalPort *string `json:"localPort,omitempty" tf:"local_port,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	RemoteIPAddress *string `json:"remoteIpAddress,omitempty" tf:"remote_ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	RemotePort *string `json:"remotePort,omitempty" tf:"remote_port,omitempty"`
}

type NetworkPacketCaptureObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NetworkPacketCaptureParameters struct {

	// +kubebuilder:validation:Optional
	Filter []NetworkPacketCaptureFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// +kubebuilder:validation:Optional
	MaximumBytesPerPacket *int64 `json:"maximumBytesPerPacket,omitempty" tf:"maximum_bytes_per_packet,omitempty"`

	// +kubebuilder:validation:Optional
	MaximumBytesPerSession *int64 `json:"maximumBytesPerSession,omitempty" tf:"maximum_bytes_per_session,omitempty"`

	// +kubebuilder:validation:Optional
	MaximumCaptureDuration *int64 `json:"maximumCaptureDuration,omitempty" tf:"maximum_capture_duration,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	NetworkWatcherName *string `json:"networkWatcherName" tf:"network_watcher_name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	StorageLocation []StorageLocationParameters `json:"storageLocation" tf:"storage_location,omitempty"`

	// +kubebuilder:validation:Required
	TargetResourceID *string `json:"targetResourceId" tf:"target_resource_id,omitempty"`
}

type StorageLocationObservation struct {
	StoragePath *string `json:"storagePath,omitempty" tf:"storage_path,omitempty"`
}

type StorageLocationParameters struct {

	// +kubebuilder:validation:Optional
	FilePath *string `json:"filePath,omitempty" tf:"file_path,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAccountID *string `json:"storageAccountId,omitempty" tf:"storage_account_id,omitempty"`
}

// NetworkPacketCaptureSpec defines the desired state of NetworkPacketCapture
type NetworkPacketCaptureSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkPacketCaptureParameters `json:"forProvider"`
}

// NetworkPacketCaptureStatus defines the observed state of NetworkPacketCapture.
type NetworkPacketCaptureStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkPacketCaptureObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkPacketCapture is the Schema for the NetworkPacketCaptures API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type NetworkPacketCapture struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkPacketCaptureSpec   `json:"spec"`
	Status            NetworkPacketCaptureStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkPacketCaptureList contains a list of NetworkPacketCaptures
type NetworkPacketCaptureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkPacketCapture `json:"items"`
}

// Repository type metadata.
var (
	NetworkPacketCapture_Kind             = "NetworkPacketCapture"
	NetworkPacketCapture_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkPacketCapture_Kind}.String()
	NetworkPacketCapture_KindAPIVersion   = NetworkPacketCapture_Kind + "." + CRDGroupVersion.String()
	NetworkPacketCapture_GroupVersionKind = CRDGroupVersion.WithKind(NetworkPacketCapture_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkPacketCapture{}, &NetworkPacketCaptureList{})
}
