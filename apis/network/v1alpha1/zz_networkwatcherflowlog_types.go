/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type NetworkWatcherFlowLogObservation struct {
	Name string `json:"name,omitempty" tf:"name"`
}

type NetworkWatcherFlowLogParameters struct {

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location"`

	// +kubebuilder:validation:Required
	NetworkSecurityGroupID string `json:"networkSecurityGroupId" tf:"network_security_group_id"`

	// +kubebuilder:validation:Required
	NetworkWatcherName string `json:"networkWatcherName" tf:"network_watcher_name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	RetentionPolicy []RetentionPolicyParameters `json:"retentionPolicy" tf:"retention_policy"`

	// +kubebuilder:validation:Required
	StorageAccountID string `json:"storageAccountId" tf:"storage_account_id"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TrafficAnalytics []TrafficAnalyticsParameters `json:"trafficAnalytics,omitempty" tf:"traffic_analytics"`

	// +kubebuilder:validation:Optional
	Version *int64 `json:"version,omitempty" tf:"version"`
}

type RetentionPolicyObservation struct {
}

type RetentionPolicyParameters struct {

	// +kubebuilder:validation:Required
	Days int64 `json:"days" tf:"days"`

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`
}

type TrafficAnalyticsObservation struct {
}

type TrafficAnalyticsParameters struct {

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`

	// +kubebuilder:validation:Optional
	IntervalInMinutes *int64 `json:"intervalInMinutes,omitempty" tf:"interval_in_minutes"`

	// +kubebuilder:validation:Required
	WorkspaceID string `json:"workspaceId" tf:"workspace_id"`

	// +kubebuilder:validation:Required
	WorkspaceRegion string `json:"workspaceRegion" tf:"workspace_region"`

	// +kubebuilder:validation:Required
	WorkspaceResourceID string `json:"workspaceResourceId" tf:"workspace_resource_id"`
}

// NetworkWatcherFlowLogSpec defines the desired state of NetworkWatcherFlowLog
type NetworkWatcherFlowLogSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       NetworkWatcherFlowLogParameters `json:"forProvider"`
}

// NetworkWatcherFlowLogStatus defines the observed state of NetworkWatcherFlowLog.
type NetworkWatcherFlowLogStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          NetworkWatcherFlowLogObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkWatcherFlowLog is the Schema for the NetworkWatcherFlowLogs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type NetworkWatcherFlowLog struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkWatcherFlowLogSpec   `json:"spec"`
	Status            NetworkWatcherFlowLogStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkWatcherFlowLogList contains a list of NetworkWatcherFlowLogs
type NetworkWatcherFlowLogList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkWatcherFlowLog `json:"items"`
}

// Repository type metadata.
var (
	NetworkWatcherFlowLogKind             = "NetworkWatcherFlowLog"
	NetworkWatcherFlowLogGroupKind        = schema.GroupKind{Group: Group, Kind: NetworkWatcherFlowLogKind}.String()
	NetworkWatcherFlowLogKindAPIVersion   = NetworkWatcherFlowLogKind + "." + GroupVersion.String()
	NetworkWatcherFlowLogGroupVersionKind = GroupVersion.WithKind(NetworkWatcherFlowLogKind)
)

func init() {
	SchemeBuilder.Register(&NetworkWatcherFlowLog{}, &NetworkWatcherFlowLogList{})
}
