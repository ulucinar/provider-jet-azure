/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DNSPTRRecordObservation struct {
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DNSPTRRecordParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Records []*string `json:"records" tf:"records,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	TTL *int64 `json:"ttl" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	ZoneName *string `json:"zoneName" tf:"zone_name,omitempty"`
}

// DNSPTRRecordSpec defines the desired state of DNSPTRRecord
type DNSPTRRecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DNSPTRRecordParameters `json:"forProvider"`
}

// DNSPTRRecordStatus defines the observed state of DNSPTRRecord.
type DNSPTRRecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DNSPTRRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DNSPTRRecord is the Schema for the DNSPTRRecords API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DNSPTRRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DNSPTRRecordSpec   `json:"spec"`
	Status            DNSPTRRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DNSPTRRecordList contains a list of DNSPTRRecords
type DNSPTRRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DNSPTRRecord `json:"items"`
}

// Repository type metadata.
var (
	DNSPTRRecord_Kind             = "DNSPTRRecord"
	DNSPTRRecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DNSPTRRecord_Kind}.String()
	DNSPTRRecord_KindAPIVersion   = DNSPTRRecord_Kind + "." + CRDGroupVersion.String()
	DNSPTRRecord_GroupVersionKind = CRDGroupVersion.WithKind(DNSPTRRecord_Kind)
)

func init() {
	SchemeBuilder.Register(&DNSPTRRecord{}, &DNSPTRRecordList{})
}
