/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FirewallNATRuleCollectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FirewallNATRuleCollectionParameters struct {

	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// +kubebuilder:validation:Required
	AzureFirewallName *string `json:"azureFirewallName" tf:"azure_firewall_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Priority *int64 `json:"priority" tf:"priority,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Rule []FirewallNATRuleCollectionRuleParameters `json:"rule" tf:"rule,omitempty"`
}

type FirewallNATRuleCollectionRuleObservation struct {
}

type FirewallNATRuleCollectionRuleParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	DestinationAddresses []*string `json:"destinationAddresses" tf:"destination_addresses,omitempty"`

	// +kubebuilder:validation:Required
	DestinationPorts []*string `json:"destinationPorts" tf:"destination_ports,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Protocols []*string `json:"protocols" tf:"protocols,omitempty"`

	// +kubebuilder:validation:Optional
	SourceAddresses []*string `json:"sourceAddresses,omitempty" tf:"source_addresses,omitempty"`

	// +kubebuilder:validation:Optional
	SourceIPGroups []*string `json:"sourceIpGroups,omitempty" tf:"source_ip_groups,omitempty"`

	// +kubebuilder:validation:Required
	TranslatedAddress *string `json:"translatedAddress" tf:"translated_address,omitempty"`

	// +kubebuilder:validation:Required
	TranslatedPort *string `json:"translatedPort" tf:"translated_port,omitempty"`
}

// FirewallNATRuleCollectionSpec defines the desired state of FirewallNATRuleCollection
type FirewallNATRuleCollectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FirewallNATRuleCollectionParameters `json:"forProvider"`
}

// FirewallNATRuleCollectionStatus defines the observed state of FirewallNATRuleCollection.
type FirewallNATRuleCollectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FirewallNATRuleCollectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallNATRuleCollection is the Schema for the FirewallNATRuleCollections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type FirewallNATRuleCollection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FirewallNATRuleCollectionSpec   `json:"spec"`
	Status            FirewallNATRuleCollectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallNATRuleCollectionList contains a list of FirewallNATRuleCollections
type FirewallNATRuleCollectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FirewallNATRuleCollection `json:"items"`
}

// Repository type metadata.
var (
	FirewallNATRuleCollection_Kind             = "FirewallNATRuleCollection"
	FirewallNATRuleCollection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FirewallNATRuleCollection_Kind}.String()
	FirewallNATRuleCollection_KindAPIVersion   = FirewallNATRuleCollection_Kind + "." + CRDGroupVersion.String()
	FirewallNATRuleCollection_GroupVersionKind = CRDGroupVersion.WithKind(FirewallNATRuleCollection_Kind)
)

func init() {
	SchemeBuilder.Register(&FirewallNATRuleCollection{}, &FirewallNATRuleCollectionList{})
}
