/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type NetworkDdosProtectionPlanObservation struct {
	VirtualNetworkIds []string `json:"virtualNetworkIds,omitempty" tf:"virtual_network_ids"`
}

type NetworkDdosProtectionPlanParameters struct {

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// NetworkDdosProtectionPlanSpec defines the desired state of NetworkDdosProtectionPlan
type NetworkDdosProtectionPlanSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       NetworkDdosProtectionPlanParameters `json:"forProvider"`
}

// NetworkDdosProtectionPlanStatus defines the observed state of NetworkDdosProtectionPlan.
type NetworkDdosProtectionPlanStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          NetworkDdosProtectionPlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkDdosProtectionPlan is the Schema for the NetworkDdosProtectionPlans API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type NetworkDdosProtectionPlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkDdosProtectionPlanSpec   `json:"spec"`
	Status            NetworkDdosProtectionPlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkDdosProtectionPlanList contains a list of NetworkDdosProtectionPlans
type NetworkDdosProtectionPlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkDdosProtectionPlan `json:"items"`
}

// Repository type metadata.
var (
	NetworkDdosProtectionPlanKind             = "NetworkDdosProtectionPlan"
	NetworkDdosProtectionPlanGroupKind        = schema.GroupKind{Group: Group, Kind: NetworkDdosProtectionPlanKind}.String()
	NetworkDdosProtectionPlanKindAPIVersion   = NetworkDdosProtectionPlanKind + "." + GroupVersion.String()
	NetworkDdosProtectionPlanGroupVersionKind = GroupVersion.WithKind(NetworkDdosProtectionPlanKind)
)

func init() {
	SchemeBuilder.Register(&NetworkDdosProtectionPlan{}, &NetworkDdosProtectionPlanList{})
}
