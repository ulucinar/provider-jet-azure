/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RetentionPolicyObservation struct {
}

type RetentionPolicyParameters struct {

	// +kubebuilder:validation:Required
	Days *int64 `json:"days" tf:"days,omitempty"`

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`
}

type TrafficAnalyticsObservation struct {
}

type TrafficAnalyticsParameters struct {

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IntervalInMinutes *int64 `json:"intervalInMinutes,omitempty" tf:"interval_in_minutes,omitempty"`

	// +kubebuilder:validation:Required
	WorkspaceID *string `json:"workspaceId" tf:"workspace_id,omitempty"`

	// +kubebuilder:validation:Required
	WorkspaceRegion *string `json:"workspaceRegion" tf:"workspace_region,omitempty"`

	// +kubebuilder:validation:Required
	WorkspaceResourceID *string `json:"workspaceResourceId" tf:"workspace_resource_id,omitempty"`
}

type WatcherFlowLogObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type WatcherFlowLogParameters struct {

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	NetworkSecurityGroupID *string `json:"networkSecurityGroupId" tf:"network_security_group_id,omitempty"`

	// +kubebuilder:validation:Required
	NetworkWatcherName *string `json:"networkWatcherName" tf:"network_watcher_name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	RetentionPolicy []RetentionPolicyParameters `json:"retentionPolicy" tf:"retention_policy,omitempty"`

	// +kubebuilder:validation:Required
	StorageAccountID *string `json:"storageAccountId" tf:"storage_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TrafficAnalytics []TrafficAnalyticsParameters `json:"trafficAnalytics,omitempty" tf:"traffic_analytics,omitempty"`

	// +kubebuilder:validation:Optional
	Version *int64 `json:"version,omitempty" tf:"version,omitempty"`
}

// WatcherFlowLogSpec defines the desired state of WatcherFlowLog
type WatcherFlowLogSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WatcherFlowLogParameters `json:"forProvider"`
}

// WatcherFlowLogStatus defines the observed state of WatcherFlowLog.
type WatcherFlowLogStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WatcherFlowLogObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WatcherFlowLog is the Schema for the WatcherFlowLogs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type WatcherFlowLog struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WatcherFlowLogSpec   `json:"spec"`
	Status            WatcherFlowLogStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WatcherFlowLogList contains a list of WatcherFlowLogs
type WatcherFlowLogList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WatcherFlowLog `json:"items"`
}

// Repository type metadata.
var (
	WatcherFlowLog_Kind             = "WatcherFlowLog"
	WatcherFlowLog_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WatcherFlowLog_Kind}.String()
	WatcherFlowLog_KindAPIVersion   = WatcherFlowLog_Kind + "." + CRDGroupVersion.String()
	WatcherFlowLog_GroupVersionKind = CRDGroupVersion.WithKind(WatcherFlowLog_Kind)
)

func init() {
	SchemeBuilder.Register(&WatcherFlowLog{}, &WatcherFlowLogList{})
}
