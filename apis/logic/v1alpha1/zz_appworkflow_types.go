/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessControlObservation struct {
}

type AccessControlParameters struct {

	// +kubebuilder:validation:Optional
	Action []ActionParameters `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	Content []ContentParameters `json:"content,omitempty" tf:"content,omitempty"`

	// +kubebuilder:validation:Optional
	Trigger []TriggerParameters `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// +kubebuilder:validation:Optional
	WorkflowManagement []WorkflowManagementParameters `json:"workflowManagement,omitempty" tf:"workflow_management,omitempty"`
}

type ActionObservation struct {
}

type ActionParameters struct {

	// +kubebuilder:validation:Required
	AllowedCallerIPAddressRange []*string `json:"allowedCallerIpAddressRange" tf:"allowed_caller_ip_address_range,omitempty"`
}

type AppWorkflowObservation struct {
	AccessEndpoint *string `json:"accessEndpoint,omitempty" tf:"access_endpoint,omitempty"`

	ConnectorEndpointIPAddresses []*string `json:"connectorEndpointIpAddresses,omitempty" tf:"connector_endpoint_ip_addresses,omitempty"`

	ConnectorOutboundIPAddresses []*string `json:"connectorOutboundIpAddresses,omitempty" tf:"connector_outbound_ip_addresses,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	WorkflowEndpointIPAddresses []*string `json:"workflowEndpointIpAddresses,omitempty" tf:"workflow_endpoint_ip_addresses,omitempty"`

	WorkflowOutboundIPAddresses []*string `json:"workflowOutboundIpAddresses,omitempty" tf:"workflow_outbound_ip_addresses,omitempty"`
}

type AppWorkflowParameters struct {

	// +kubebuilder:validation:Optional
	AccessControl []AccessControlParameters `json:"accessControl,omitempty" tf:"access_control,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IntegrationServiceEnvironmentID *string `json:"integrationServiceEnvironmentId,omitempty" tf:"integration_service_environment_id,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	LogicAppIntegrationAccountID *string `json:"logicAppIntegrationAccountId,omitempty" tf:"logic_app_integration_account_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	WorkflowParameters map[string]*string `json:"workflowParameters,omitempty" tf:"workflow_parameters,omitempty"`

	// +kubebuilder:validation:Optional
	WorkflowSchema *string `json:"workflowSchema,omitempty" tf:"workflow_schema,omitempty"`

	// +kubebuilder:validation:Optional
	WorkflowVersion *string `json:"workflowVersion,omitempty" tf:"workflow_version,omitempty"`
}

type ContentObservation struct {
}

type ContentParameters struct {

	// +kubebuilder:validation:Required
	AllowedCallerIPAddressRange []*string `json:"allowedCallerIpAddressRange" tf:"allowed_caller_ip_address_range,omitempty"`
}

type TriggerObservation struct {
}

type TriggerParameters struct {

	// +kubebuilder:validation:Required
	AllowedCallerIPAddressRange []*string `json:"allowedCallerIpAddressRange" tf:"allowed_caller_ip_address_range,omitempty"`
}

type WorkflowManagementObservation struct {
}

type WorkflowManagementParameters struct {

	// +kubebuilder:validation:Required
	AllowedCallerIPAddressRange []*string `json:"allowedCallerIpAddressRange" tf:"allowed_caller_ip_address_range,omitempty"`
}

// AppWorkflowSpec defines the desired state of AppWorkflow
type AppWorkflowSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppWorkflowParameters `json:"forProvider"`
}

// AppWorkflowStatus defines the observed state of AppWorkflow.
type AppWorkflowStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppWorkflowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppWorkflow is the Schema for the AppWorkflows API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type AppWorkflow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppWorkflowSpec   `json:"spec"`
	Status            AppWorkflowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppWorkflowList contains a list of AppWorkflows
type AppWorkflowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppWorkflow `json:"items"`
}

// Repository type metadata.
var (
	AppWorkflow_Kind             = "AppWorkflow"
	AppWorkflow_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppWorkflow_Kind}.String()
	AppWorkflow_KindAPIVersion   = AppWorkflow_Kind + "." + CRDGroupVersion.String()
	AppWorkflow_GroupVersionKind = CRDGroupVersion.WithKind(AppWorkflow_Kind)
)

func init() {
	SchemeBuilder.Register(&AppWorkflow{}, &AppWorkflowList{})
}
