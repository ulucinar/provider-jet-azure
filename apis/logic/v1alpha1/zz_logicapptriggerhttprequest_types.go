/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type LogicAppTriggerHttpRequestObservation struct {
	CallbackURL string `json:"callbackUrl,omitempty" tf:"callback_url"`
}

type LogicAppTriggerHttpRequestParameters struct {

	// +kubebuilder:validation:Required
	LogicAppID string `json:"logicAppId" tf:"logic_app_id"`

	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	RelativePath *string `json:"relativePath,omitempty" tf:"relative_path"`

	// +kubebuilder:validation:Required
	Schema string `json:"schema" tf:"schema"`
}

// LogicAppTriggerHttpRequestSpec defines the desired state of LogicAppTriggerHttpRequest
type LogicAppTriggerHttpRequestSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LogicAppTriggerHttpRequestParameters `json:"forProvider"`
}

// LogicAppTriggerHttpRequestStatus defines the observed state of LogicAppTriggerHttpRequest.
type LogicAppTriggerHttpRequestStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LogicAppTriggerHttpRequestObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogicAppTriggerHttpRequest is the Schema for the LogicAppTriggerHttpRequests API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LogicAppTriggerHttpRequest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogicAppTriggerHttpRequestSpec   `json:"spec"`
	Status            LogicAppTriggerHttpRequestStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogicAppTriggerHttpRequestList contains a list of LogicAppTriggerHttpRequests
type LogicAppTriggerHttpRequestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogicAppTriggerHttpRequest `json:"items"`
}

// Repository type metadata.
var (
	LogicAppTriggerHttpRequestKind             = "LogicAppTriggerHttpRequest"
	LogicAppTriggerHttpRequestGroupKind        = schema.GroupKind{Group: Group, Kind: LogicAppTriggerHttpRequestKind}.String()
	LogicAppTriggerHttpRequestKindAPIVersion   = LogicAppTriggerHttpRequestKind + "." + GroupVersion.String()
	LogicAppTriggerHttpRequestGroupVersionKind = GroupVersion.WithKind(LogicAppTriggerHttpRequestKind)
)

func init() {
	SchemeBuilder.Register(&LogicAppTriggerHttpRequest{}, &LogicAppTriggerHttpRequestList{})
}
