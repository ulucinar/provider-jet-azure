/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppIntegrationAccountSessionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AppIntegrationAccountSessionParameters struct {

	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// +kubebuilder:validation:Required
	IntegrationAccountName *string `json:"integrationAccountName" tf:"integration_account_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`
}

// AppIntegrationAccountSessionSpec defines the desired state of AppIntegrationAccountSession
type AppIntegrationAccountSessionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppIntegrationAccountSessionParameters `json:"forProvider"`
}

// AppIntegrationAccountSessionStatus defines the observed state of AppIntegrationAccountSession.
type AppIntegrationAccountSessionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppIntegrationAccountSessionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppIntegrationAccountSession is the Schema for the AppIntegrationAccountSessions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type AppIntegrationAccountSession struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppIntegrationAccountSessionSpec   `json:"spec"`
	Status            AppIntegrationAccountSessionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppIntegrationAccountSessionList contains a list of AppIntegrationAccountSessions
type AppIntegrationAccountSessionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppIntegrationAccountSession `json:"items"`
}

// Repository type metadata.
var (
	AppIntegrationAccountSession_Kind             = "AppIntegrationAccountSession"
	AppIntegrationAccountSession_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppIntegrationAccountSession_Kind}.String()
	AppIntegrationAccountSession_KindAPIVersion   = AppIntegrationAccountSession_Kind + "." + CRDGroupVersion.String()
	AppIntegrationAccountSession_GroupVersionKind = CRDGroupVersion.WithKind(AppIntegrationAccountSession_Kind)
)

func init() {
	SchemeBuilder.Register(&AppIntegrationAccountSession{}, &AppIntegrationAccountSessionList{})
}
