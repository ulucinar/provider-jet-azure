/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type KeyVaultKeyObservation struct {
}

type KeyVaultKeyParameters struct {

	// +kubebuilder:validation:Required
	KeyName string `json:"keyName" tf:"key_name"`

	// +kubebuilder:validation:Required
	KeyVaultID string `json:"keyVaultId" tf:"key_vault_id"`

	// +kubebuilder:validation:Optional
	KeyVersion *string `json:"keyVersion,omitempty" tf:"key_version"`
}

type LogicAppIntegrationAccountCertificateObservation struct {
}

type LogicAppIntegrationAccountCertificateParameters struct {

	// +kubebuilder:validation:Required
	IntegrationAccountName string `json:"integrationAccountName" tf:"integration_account_name"`

	// +kubebuilder:validation:Optional
	KeyVaultKey []KeyVaultKeyParameters `json:"keyVaultKey,omitempty" tf:"key_vault_key"`

	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PublicCertificate *string `json:"publicCertificate,omitempty" tf:"public_certificate"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

// LogicAppIntegrationAccountCertificateSpec defines the desired state of LogicAppIntegrationAccountCertificate
type LogicAppIntegrationAccountCertificateSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LogicAppIntegrationAccountCertificateParameters `json:"forProvider"`
}

// LogicAppIntegrationAccountCertificateStatus defines the observed state of LogicAppIntegrationAccountCertificate.
type LogicAppIntegrationAccountCertificateStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LogicAppIntegrationAccountCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogicAppIntegrationAccountCertificate is the Schema for the LogicAppIntegrationAccountCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LogicAppIntegrationAccountCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogicAppIntegrationAccountCertificateSpec   `json:"spec"`
	Status            LogicAppIntegrationAccountCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogicAppIntegrationAccountCertificateList contains a list of LogicAppIntegrationAccountCertificates
type LogicAppIntegrationAccountCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogicAppIntegrationAccountCertificate `json:"items"`
}

// Repository type metadata.
var (
	LogicAppIntegrationAccountCertificateKind             = "LogicAppIntegrationAccountCertificate"
	LogicAppIntegrationAccountCertificateGroupKind        = schema.GroupKind{Group: Group, Kind: LogicAppIntegrationAccountCertificateKind}.String()
	LogicAppIntegrationAccountCertificateKindAPIVersion   = LogicAppIntegrationAccountCertificateKind + "." + GroupVersion.String()
	LogicAppIntegrationAccountCertificateGroupVersionKind = GroupVersion.WithKind(LogicAppIntegrationAccountCertificateKind)
)

func init() {
	SchemeBuilder.Register(&LogicAppIntegrationAccountCertificate{}, &LogicAppIntegrationAccountCertificateList{})
}
