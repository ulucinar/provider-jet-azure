/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type LogicAppTriggerRecurrenceObservation struct {
}

type LogicAppTriggerRecurrenceParameters struct {

	// +kubebuilder:validation:Required
	Frequency string `json:"frequency" tf:"frequency"`

	// +kubebuilder:validation:Required
	Interval int64 `json:"interval" tf:"interval"`

	// +kubebuilder:validation:Required
	LogicAppID string `json:"logicAppId" tf:"logic_app_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Schedule []ScheduleParameters `json:"schedule,omitempty" tf:"schedule"`

	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time"`

	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone"`
}

type ScheduleObservation struct {
}

type ScheduleParameters struct {

	// +kubebuilder:validation:Optional
	AtTheseHours []int64 `json:"atTheseHours,omitempty" tf:"at_these_hours"`

	// +kubebuilder:validation:Optional
	AtTheseMinutes []int64 `json:"atTheseMinutes,omitempty" tf:"at_these_minutes"`

	// +kubebuilder:validation:Optional
	OnTheseDays []string `json:"onTheseDays,omitempty" tf:"on_these_days"`
}

// LogicAppTriggerRecurrenceSpec defines the desired state of LogicAppTriggerRecurrence
type LogicAppTriggerRecurrenceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LogicAppTriggerRecurrenceParameters `json:"forProvider"`
}

// LogicAppTriggerRecurrenceStatus defines the observed state of LogicAppTriggerRecurrence.
type LogicAppTriggerRecurrenceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LogicAppTriggerRecurrenceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogicAppTriggerRecurrence is the Schema for the LogicAppTriggerRecurrences API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LogicAppTriggerRecurrence struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogicAppTriggerRecurrenceSpec   `json:"spec"`
	Status            LogicAppTriggerRecurrenceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogicAppTriggerRecurrenceList contains a list of LogicAppTriggerRecurrences
type LogicAppTriggerRecurrenceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogicAppTriggerRecurrence `json:"items"`
}

// Repository type metadata.
var (
	LogicAppTriggerRecurrenceKind             = "LogicAppTriggerRecurrence"
	LogicAppTriggerRecurrenceGroupKind        = schema.GroupKind{Group: Group, Kind: LogicAppTriggerRecurrenceKind}.String()
	LogicAppTriggerRecurrenceKindAPIVersion   = LogicAppTriggerRecurrenceKind + "." + GroupVersion.String()
	LogicAppTriggerRecurrenceGroupVersionKind = GroupVersion.WithKind(LogicAppTriggerRecurrenceKind)
)

func init() {
	SchemeBuilder.Register(&LogicAppTriggerRecurrence{}, &LogicAppTriggerRecurrenceList{})
}
