/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MarketplaceAgreementObservation struct {
	LicenseTextLink string `json:"licenseTextLink,omitempty" tf:"license_text_link"`

	PrivacyPolicyLink string `json:"privacyPolicyLink,omitempty" tf:"privacy_policy_link"`
}

type MarketplaceAgreementParameters struct {

	// +kubebuilder:validation:Required
	Offer string `json:"offer" tf:"offer"`

	// +kubebuilder:validation:Required
	Plan string `json:"plan" tf:"plan"`

	// +kubebuilder:validation:Required
	Publisher string `json:"publisher" tf:"publisher"`
}

// MarketplaceAgreementSpec defines the desired state of MarketplaceAgreement
type MarketplaceAgreementSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MarketplaceAgreementParameters `json:"forProvider"`
}

// MarketplaceAgreementStatus defines the observed state of MarketplaceAgreement.
type MarketplaceAgreementStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MarketplaceAgreementObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MarketplaceAgreement is the Schema for the MarketplaceAgreements API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MarketplaceAgreement struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MarketplaceAgreementSpec   `json:"spec"`
	Status            MarketplaceAgreementStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MarketplaceAgreementList contains a list of MarketplaceAgreements
type MarketplaceAgreementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MarketplaceAgreement `json:"items"`
}

// Repository type metadata.
var (
	MarketplaceAgreementKind             = "MarketplaceAgreement"
	MarketplaceAgreementGroupKind        = schema.GroupKind{Group: Group, Kind: MarketplaceAgreementKind}.String()
	MarketplaceAgreementKindAPIVersion   = MarketplaceAgreementKind + "." + GroupVersion.String()
	MarketplaceAgreementGroupVersionKind = GroupVersion.WithKind(MarketplaceAgreementKind)
)

func init() {
	SchemeBuilder.Register(&MarketplaceAgreement{}, &MarketplaceAgreementList{})
}
