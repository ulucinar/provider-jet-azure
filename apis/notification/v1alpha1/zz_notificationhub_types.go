/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApnsCredentialObservation struct {
}

type ApnsCredentialParameters struct {

	// +kubebuilder:validation:Required
	ApplicationMode string `json:"applicationMode" tf:"application_mode"`

	// +kubebuilder:validation:Required
	BundleID string `json:"bundleId" tf:"bundle_id"`

	// +kubebuilder:validation:Required
	KeyID string `json:"keyId" tf:"key_id"`

	// +kubebuilder:validation:Required
	TeamID string `json:"teamId" tf:"team_id"`

	// +kubebuilder:validation:Required
	Token string `json:"token" tf:"token"`
}

type GcmCredentialObservation struct {
}

type GcmCredentialParameters struct {

	// +kubebuilder:validation:Required
	APIKey string `json:"apiKey" tf:"api_key"`
}

type NotificationHubObservation struct {
}

type NotificationHubParameters struct {

	// +kubebuilder:validation:Optional
	ApnsCredential []ApnsCredentialParameters `json:"apnsCredential,omitempty" tf:"apns_credential"`

	// +kubebuilder:validation:Optional
	GcmCredential []GcmCredentialParameters `json:"gcmCredential,omitempty" tf:"gcm_credential"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	NamespaceName string `json:"namespaceName" tf:"namespace_name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// NotificationHubSpec defines the desired state of NotificationHub
type NotificationHubSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       NotificationHubParameters `json:"forProvider"`
}

// NotificationHubStatus defines the observed state of NotificationHub.
type NotificationHubStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          NotificationHubObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NotificationHub is the Schema for the NotificationHubs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type NotificationHub struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NotificationHubSpec   `json:"spec"`
	Status            NotificationHubStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotificationHubList contains a list of NotificationHubs
type NotificationHubList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NotificationHub `json:"items"`
}

// Repository type metadata.
var (
	NotificationHubKind             = "NotificationHub"
	NotificationHubGroupKind        = schema.GroupKind{Group: Group, Kind: NotificationHubKind}.String()
	NotificationHubKindAPIVersion   = NotificationHubKind + "." + GroupVersion.String()
	NotificationHubGroupVersionKind = GroupVersion.WithKind(NotificationHubKind)
)

func init() {
	SchemeBuilder.Register(&NotificationHub{}, &NotificationHubList{})
}
