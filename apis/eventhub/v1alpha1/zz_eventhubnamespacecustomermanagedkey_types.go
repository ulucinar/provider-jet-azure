/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type EventhubNamespaceCustomerManagedKeyObservation struct {
}

type EventhubNamespaceCustomerManagedKeyParameters struct {

	// +kubebuilder:validation:Required
	EventhubNamespaceID string `json:"eventhubNamespaceId" tf:"eventhub_namespace_id"`

	// +kubebuilder:validation:Required
	KeyVaultKeyIds []string `json:"keyVaultKeyIds" tf:"key_vault_key_ids"`
}

// EventhubNamespaceCustomerManagedKeySpec defines the desired state of EventhubNamespaceCustomerManagedKey
type EventhubNamespaceCustomerManagedKeySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EventhubNamespaceCustomerManagedKeyParameters `json:"forProvider"`
}

// EventhubNamespaceCustomerManagedKeyStatus defines the observed state of EventhubNamespaceCustomerManagedKey.
type EventhubNamespaceCustomerManagedKeyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EventhubNamespaceCustomerManagedKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EventhubNamespaceCustomerManagedKey is the Schema for the EventhubNamespaceCustomerManagedKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type EventhubNamespaceCustomerManagedKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventhubNamespaceCustomerManagedKeySpec   `json:"spec"`
	Status            EventhubNamespaceCustomerManagedKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventhubNamespaceCustomerManagedKeyList contains a list of EventhubNamespaceCustomerManagedKeys
type EventhubNamespaceCustomerManagedKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventhubNamespaceCustomerManagedKey `json:"items"`
}

// Repository type metadata.
var (
	EventhubNamespaceCustomerManagedKeyKind             = "EventhubNamespaceCustomerManagedKey"
	EventhubNamespaceCustomerManagedKeyGroupKind        = schema.GroupKind{Group: Group, Kind: EventhubNamespaceCustomerManagedKeyKind}.String()
	EventhubNamespaceCustomerManagedKeyKindAPIVersion   = EventhubNamespaceCustomerManagedKeyKind + "." + GroupVersion.String()
	EventhubNamespaceCustomerManagedKeyGroupVersionKind = GroupVersion.WithKind(EventhubNamespaceCustomerManagedKeyKind)
)

func init() {
	SchemeBuilder.Register(&EventhubNamespaceCustomerManagedKey{}, &EventhubNamespaceCustomerManagedKeyList{})
}
