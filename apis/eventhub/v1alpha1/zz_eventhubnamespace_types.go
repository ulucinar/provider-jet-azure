/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type EventhubNamespaceObservation struct {
	DefaultPrimaryConnectionString string `json:"defaultPrimaryConnectionString,omitempty" tf:"default_primary_connection_string"`

	DefaultPrimaryConnectionStringAlias string `json:"defaultPrimaryConnectionStringAlias,omitempty" tf:"default_primary_connection_string_alias"`

	DefaultPrimaryKey string `json:"defaultPrimaryKey,omitempty" tf:"default_primary_key"`

	DefaultSecondaryConnectionString string `json:"defaultSecondaryConnectionString,omitempty" tf:"default_secondary_connection_string"`

	DefaultSecondaryConnectionStringAlias string `json:"defaultSecondaryConnectionStringAlias,omitempty" tf:"default_secondary_connection_string_alias"`

	DefaultSecondaryKey string `json:"defaultSecondaryKey,omitempty" tf:"default_secondary_key"`
}

type EventhubNamespaceParameters struct {

	// +kubebuilder:validation:Optional
	AutoInflateEnabled *bool `json:"autoInflateEnabled,omitempty" tf:"auto_inflate_enabled"`

	// +kubebuilder:validation:Optional
	Capacity *int64 `json:"capacity,omitempty" tf:"capacity"`

	// +kubebuilder:validation:Optional
	DedicatedClusterID *string `json:"dedicatedClusterId,omitempty" tf:"dedicated_cluster_id"`

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	MaximumThroughputUnits *int64 `json:"maximumThroughputUnits,omitempty" tf:"maximum_throughput_units"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	NetworkRulesets []NetworkRulesetsParameters `json:"networkRulesets,omitempty" tf:"network_rulesets"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Sku string `json:"sku" tf:"sku"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	ZoneRedundant *bool `json:"zoneRedundant,omitempty" tf:"zone_redundant"`
}

type IPRuleObservation struct {
}

type IPRuleParameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action"`

	// +kubebuilder:validation:Required
	IPMask string `json:"ipMask" tf:"ip_mask"`
}

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type NetworkRulesetsObservation struct {
}

type NetworkRulesetsParameters struct {

	// +kubebuilder:validation:Required
	DefaultAction string `json:"defaultAction" tf:"default_action"`

	// +kubebuilder:validation:Optional
	IPRule []IPRuleParameters `json:"ipRule,omitempty" tf:"ip_rule"`

	// +kubebuilder:validation:Optional
	TrustedServiceAccessEnabled *bool `json:"trustedServiceAccessEnabled,omitempty" tf:"trusted_service_access_enabled"`

	// +kubebuilder:validation:Optional
	VirtualNetworkRule []VirtualNetworkRuleParameters `json:"virtualNetworkRule,omitempty" tf:"virtual_network_rule"`
}

type VirtualNetworkRuleObservation struct {
}

type VirtualNetworkRuleParameters struct {

	// +kubebuilder:validation:Optional
	IgnoreMissingVirtualNetworkServiceEndpoint *bool `json:"ignoreMissingVirtualNetworkServiceEndpoint,omitempty" tf:"ignore_missing_virtual_network_service_endpoint"`

	// +kubebuilder:validation:Required
	SubnetID string `json:"subnetId" tf:"subnet_id"`
}

// EventhubNamespaceSpec defines the desired state of EventhubNamespace
type EventhubNamespaceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EventhubNamespaceParameters `json:"forProvider"`
}

// EventhubNamespaceStatus defines the observed state of EventhubNamespace.
type EventhubNamespaceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EventhubNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EventhubNamespace is the Schema for the EventhubNamespaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type EventhubNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventhubNamespaceSpec   `json:"spec"`
	Status            EventhubNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventhubNamespaceList contains a list of EventhubNamespaces
type EventhubNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventhubNamespace `json:"items"`
}

// Repository type metadata.
var (
	EventhubNamespaceKind             = "EventhubNamespace"
	EventhubNamespaceGroupKind        = schema.GroupKind{Group: Group, Kind: EventhubNamespaceKind}.String()
	EventhubNamespaceKindAPIVersion   = EventhubNamespaceKind + "." + GroupVersion.String()
	EventhubNamespaceGroupVersionKind = GroupVersion.WithKind(EventhubNamespaceKind)
)

func init() {
	SchemeBuilder.Register(&EventhubNamespace{}, &EventhubNamespaceList{})
}
