/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ExtendedAuditingPolicyObservation struct {
}

type ExtendedAuditingPolicyParameters struct {

	// +kubebuilder:validation:Optional
	LogMonitoringEnabled *bool `json:"logMonitoringEnabled,omitempty" tf:"log_monitoring_enabled"`

	// +kubebuilder:validation:Optional
	RetentionInDays *int64 `json:"retentionInDays,omitempty" tf:"retention_in_days"`

	// +kubebuilder:validation:Optional
	StorageAccountAccessKey *string `json:"storageAccountAccessKey,omitempty" tf:"storage_account_access_key"`

	// +kubebuilder:validation:Optional
	StorageAccountAccessKeyIsSecondary *bool `json:"storageAccountAccessKeyIsSecondary,omitempty" tf:"storage_account_access_key_is_secondary"`

	// +kubebuilder:validation:Optional
	StorageEndpoint *string `json:"storageEndpoint,omitempty" tf:"storage_endpoint"`
}

type LongTermRetentionPolicyObservation struct {
}

type LongTermRetentionPolicyParameters struct {

	// +kubebuilder:validation:Optional
	MonthlyRetention *string `json:"monthlyRetention,omitempty" tf:"monthly_retention"`

	// +kubebuilder:validation:Optional
	WeekOfYear *int64 `json:"weekOfYear,omitempty" tf:"week_of_year"`

	// +kubebuilder:validation:Optional
	WeeklyRetention *string `json:"weeklyRetention,omitempty" tf:"weekly_retention"`

	// +kubebuilder:validation:Optional
	YearlyRetention *string `json:"yearlyRetention,omitempty" tf:"yearly_retention"`
}

type MssqlDatabaseObservation struct {
}

type MssqlDatabaseParameters struct {

	// +kubebuilder:validation:Optional
	AutoPauseDelayInMinutes *int64 `json:"autoPauseDelayInMinutes,omitempty" tf:"auto_pause_delay_in_minutes"`

	// +kubebuilder:validation:Optional
	Collation *string `json:"collation,omitempty" tf:"collation"`

	// +kubebuilder:validation:Optional
	CreateMode *string `json:"createMode,omitempty" tf:"create_mode"`

	// +kubebuilder:validation:Optional
	CreationSourceDatabaseID *string `json:"creationSourceDatabaseId,omitempty" tf:"creation_source_database_id"`

	// +kubebuilder:validation:Optional
	ElasticPoolID *string `json:"elasticPoolId,omitempty" tf:"elastic_pool_id"`

	// +kubebuilder:validation:Optional
	ExtendedAuditingPolicy []ExtendedAuditingPolicyParameters `json:"extendedAuditingPolicy,omitempty" tf:"extended_auditing_policy"`

	// +kubebuilder:validation:Optional
	GeoBackupEnabled *bool `json:"geoBackupEnabled,omitempty" tf:"geo_backup_enabled"`

	// +kubebuilder:validation:Optional
	LicenseType *string `json:"licenseType,omitempty" tf:"license_type"`

	// +kubebuilder:validation:Optional
	LongTermRetentionPolicy []LongTermRetentionPolicyParameters `json:"longTermRetentionPolicy,omitempty" tf:"long_term_retention_policy"`

	// +kubebuilder:validation:Optional
	MaxSizeGb *int64 `json:"maxSizeGb,omitempty" tf:"max_size_gb"`

	// +kubebuilder:validation:Optional
	MinCapacity *float64 `json:"minCapacity,omitempty" tf:"min_capacity"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	ReadReplicaCount *int64 `json:"readReplicaCount,omitempty" tf:"read_replica_count"`

	// +kubebuilder:validation:Optional
	ReadScale *bool `json:"readScale,omitempty" tf:"read_scale"`

	// +kubebuilder:validation:Optional
	RecoverDatabaseID *string `json:"recoverDatabaseId,omitempty" tf:"recover_database_id"`

	// +kubebuilder:validation:Optional
	RestoreDroppedDatabaseID *string `json:"restoreDroppedDatabaseId,omitempty" tf:"restore_dropped_database_id"`

	// +kubebuilder:validation:Optional
	RestorePointInTime *string `json:"restorePointInTime,omitempty" tf:"restore_point_in_time"`

	// +kubebuilder:validation:Optional
	SampleName *string `json:"sampleName,omitempty" tf:"sample_name"`

	// +kubebuilder:validation:Required
	ServerID string `json:"serverId" tf:"server_id"`

	// +kubebuilder:validation:Optional
	ShortTermRetentionPolicy []ShortTermRetentionPolicyParameters `json:"shortTermRetentionPolicy,omitempty" tf:"short_term_retention_policy"`

	// +kubebuilder:validation:Optional
	SkuName *string `json:"skuName,omitempty" tf:"sku_name"`

	// +kubebuilder:validation:Optional
	StorageAccountType *string `json:"storageAccountType,omitempty" tf:"storage_account_type"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	ThreatDetectionPolicy []ThreatDetectionPolicyParameters `json:"threatDetectionPolicy,omitempty" tf:"threat_detection_policy"`

	// +kubebuilder:validation:Optional
	ZoneRedundant *bool `json:"zoneRedundant,omitempty" tf:"zone_redundant"`
}

type ShortTermRetentionPolicyObservation struct {
}

type ShortTermRetentionPolicyParameters struct {

	// +kubebuilder:validation:Required
	RetentionDays int64 `json:"retentionDays" tf:"retention_days"`
}

type ThreatDetectionPolicyObservation struct {
}

type ThreatDetectionPolicyParameters struct {

	// +kubebuilder:validation:Optional
	DisabledAlerts []string `json:"disabledAlerts,omitempty" tf:"disabled_alerts"`

	// +kubebuilder:validation:Optional
	EmailAccountAdmins *string `json:"emailAccountAdmins,omitempty" tf:"email_account_admins"`

	// +kubebuilder:validation:Optional
	EmailAddresses []string `json:"emailAddresses,omitempty" tf:"email_addresses"`

	// +kubebuilder:validation:Optional
	RetentionDays *int64 `json:"retentionDays,omitempty" tf:"retention_days"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state"`

	// +kubebuilder:validation:Optional
	StorageAccountAccessKey *string `json:"storageAccountAccessKey,omitempty" tf:"storage_account_access_key"`

	// +kubebuilder:validation:Optional
	StorageEndpoint *string `json:"storageEndpoint,omitempty" tf:"storage_endpoint"`

	// +kubebuilder:validation:Optional
	UseServerDefault *string `json:"useServerDefault,omitempty" tf:"use_server_default"`
}

// MssqlDatabaseSpec defines the desired state of MssqlDatabase
type MssqlDatabaseSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MssqlDatabaseParameters `json:"forProvider"`
}

// MssqlDatabaseStatus defines the observed state of MssqlDatabase.
type MssqlDatabaseStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MssqlDatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MssqlDatabase is the Schema for the MssqlDatabases API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MssqlDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MssqlDatabaseSpec   `json:"spec"`
	Status            MssqlDatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MssqlDatabaseList contains a list of MssqlDatabases
type MssqlDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MssqlDatabase `json:"items"`
}

// Repository type metadata.
var (
	MssqlDatabaseKind             = "MssqlDatabase"
	MssqlDatabaseGroupKind        = schema.GroupKind{Group: Group, Kind: MssqlDatabaseKind}.String()
	MssqlDatabaseKindAPIVersion   = MssqlDatabaseKind + "." + GroupVersion.String()
	MssqlDatabaseGroupVersionKind = GroupVersion.WithKind(MssqlDatabaseKind)
)

func init() {
	SchemeBuilder.Register(&MssqlDatabase{}, &MssqlDatabaseList{})
}
