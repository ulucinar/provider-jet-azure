/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MssqlElasticpoolObservation struct {
}

type MssqlElasticpoolParameters struct {

	// +kubebuilder:validation:Optional
	LicenseType *string `json:"licenseType,omitempty" tf:"license_type"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	MaxSizeBytes *int64 `json:"maxSizeBytes,omitempty" tf:"max_size_bytes"`

	// +kubebuilder:validation:Optional
	MaxSizeGb *float64 `json:"maxSizeGb,omitempty" tf:"max_size_gb"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	PerDatabaseSettings []PerDatabaseSettingsParameters `json:"perDatabaseSettings" tf:"per_database_settings"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	ServerName string `json:"serverName" tf:"server_name"`

	// +kubebuilder:validation:Required
	Sku []SkuParameters `json:"sku" tf:"sku"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	ZoneRedundant *bool `json:"zoneRedundant,omitempty" tf:"zone_redundant"`
}

type PerDatabaseSettingsObservation struct {
}

type PerDatabaseSettingsParameters struct {

	// +kubebuilder:validation:Required
	MaxCapacity float64 `json:"maxCapacity" tf:"max_capacity"`

	// +kubebuilder:validation:Required
	MinCapacity float64 `json:"minCapacity" tf:"min_capacity"`
}

type SkuObservation struct {
}

type SkuParameters struct {

	// +kubebuilder:validation:Required
	Capacity int64 `json:"capacity" tf:"capacity"`

	// +kubebuilder:validation:Optional
	Family *string `json:"family,omitempty" tf:"family"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Tier string `json:"tier" tf:"tier"`
}

// MssqlElasticpoolSpec defines the desired state of MssqlElasticpool
type MssqlElasticpoolSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MssqlElasticpoolParameters `json:"forProvider"`
}

// MssqlElasticpoolStatus defines the observed state of MssqlElasticpool.
type MssqlElasticpoolStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MssqlElasticpoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MssqlElasticpool is the Schema for the MssqlElasticpools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MssqlElasticpool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MssqlElasticpoolSpec   `json:"spec"`
	Status            MssqlElasticpoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MssqlElasticpoolList contains a list of MssqlElasticpools
type MssqlElasticpoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MssqlElasticpool `json:"items"`
}

// Repository type metadata.
var (
	MssqlElasticpoolKind             = "MssqlElasticpool"
	MssqlElasticpoolGroupKind        = schema.GroupKind{Group: Group, Kind: MssqlElasticpoolKind}.String()
	MssqlElasticpoolKindAPIVersion   = MssqlElasticpoolKind + "." + GroupVersion.String()
	MssqlElasticpoolGroupVersionKind = GroupVersion.WithKind(MssqlElasticpoolKind)
)

func init() {
	SchemeBuilder.Register(&MssqlElasticpool{}, &MssqlElasticpoolList{})
}
