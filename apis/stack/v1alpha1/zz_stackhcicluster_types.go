/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type StackHciClusterObservation struct {
}

type StackHciClusterParameters struct {

	// +kubebuilder:validation:Required
	ClientID string `json:"clientId" tf:"client_id"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id"`
}

// StackHciClusterSpec defines the desired state of StackHciCluster
type StackHciClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StackHciClusterParameters `json:"forProvider"`
}

// StackHciClusterStatus defines the observed state of StackHciCluster.
type StackHciClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StackHciClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StackHciCluster is the Schema for the StackHciClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type StackHciCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StackHciClusterSpec   `json:"spec"`
	Status            StackHciClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StackHciClusterList contains a list of StackHciClusters
type StackHciClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StackHciCluster `json:"items"`
}

// Repository type metadata.
var (
	StackHciClusterKind             = "StackHciCluster"
	StackHciClusterGroupKind        = schema.GroupKind{Group: Group, Kind: StackHciClusterKind}.String()
	StackHciClusterKindAPIVersion   = StackHciClusterKind + "." + GroupVersion.String()
	StackHciClusterGroupVersionKind = GroupVersion.WithKind(StackHciClusterKind)
)

func init() {
	SchemeBuilder.Register(&StackHciCluster{}, &StackHciClusterList{})
}
