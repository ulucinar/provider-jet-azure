/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MediaLiveEventOutputObservation struct {
}

type MediaLiveEventOutputParameters struct {

	// +kubebuilder:validation:Required
	ArchiveWindowDuration string `json:"archiveWindowDuration" tf:"archive_window_duration"`

	// +kubebuilder:validation:Required
	AssetName string `json:"assetName" tf:"asset_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	HlsFragmentsPerTSSegment *int64 `json:"hlsFragmentsPerTsSegment,omitempty" tf:"hls_fragments_per_ts_segment"`

	// +kubebuilder:validation:Required
	LiveEventID string `json:"liveEventId" tf:"live_event_id"`

	// +kubebuilder:validation:Optional
	ManifestName *string `json:"manifestName,omitempty" tf:"manifest_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	OutputSnapTimeInSeconds *int64 `json:"outputSnapTimeInSeconds,omitempty" tf:"output_snap_time_in_seconds"`
}

// MediaLiveEventOutputSpec defines the desired state of MediaLiveEventOutput
type MediaLiveEventOutputSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MediaLiveEventOutputParameters `json:"forProvider"`
}

// MediaLiveEventOutputStatus defines the observed state of MediaLiveEventOutput.
type MediaLiveEventOutputStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MediaLiveEventOutputObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MediaLiveEventOutput is the Schema for the MediaLiveEventOutputs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MediaLiveEventOutput struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MediaLiveEventOutputSpec   `json:"spec"`
	Status            MediaLiveEventOutputStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MediaLiveEventOutputList contains a list of MediaLiveEventOutputs
type MediaLiveEventOutputList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MediaLiveEventOutput `json:"items"`
}

// Repository type metadata.
var (
	MediaLiveEventOutputKind             = "MediaLiveEventOutput"
	MediaLiveEventOutputGroupKind        = schema.GroupKind{Group: Group, Kind: MediaLiveEventOutputKind}.String()
	MediaLiveEventOutputKindAPIVersion   = MediaLiveEventOutputKind + "." + GroupVersion.String()
	MediaLiveEventOutputGroupVersionKind = GroupVersion.WithKind(MediaLiveEventOutputKind)
)

func init() {
	SchemeBuilder.Register(&MediaLiveEventOutput{}, &MediaLiveEventOutputList{})
}
