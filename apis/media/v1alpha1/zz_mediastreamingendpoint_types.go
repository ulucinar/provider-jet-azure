/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AccessControlObservation struct {
}

type AccessControlParameters struct {

	// +kubebuilder:validation:Optional
	AkamaiSignatureHeaderAuthenticationKey []AkamaiSignatureHeaderAuthenticationKeyParameters `json:"akamaiSignatureHeaderAuthenticationKey,omitempty" tf:"akamai_signature_header_authentication_key"`

	// +kubebuilder:validation:Optional
	IPAllow []IPAllowParameters `json:"ipAllow,omitempty" tf:"ip_allow"`
}

type AkamaiSignatureHeaderAuthenticationKeyObservation struct {
}

type AkamaiSignatureHeaderAuthenticationKeyParameters struct {

	// +kubebuilder:validation:Optional
	Base64Key *string `json:"base64Key,omitempty" tf:"base64_key"`

	// +kubebuilder:validation:Optional
	Expiration *string `json:"expiration,omitempty" tf:"expiration"`

	// +kubebuilder:validation:Optional
	Identifier *string `json:"identifier,omitempty" tf:"identifier"`
}

type IPAllowObservation struct {
}

type IPAllowParameters struct {

	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`

	// +kubebuilder:validation:Optional
	SubnetPrefixLength *int64 `json:"subnetPrefixLength,omitempty" tf:"subnet_prefix_length"`
}

type MediaStreamingEndpointCrossSiteAccessPolicyObservation struct {
}

type MediaStreamingEndpointCrossSiteAccessPolicyParameters struct {

	// +kubebuilder:validation:Optional
	ClientAccessPolicy *string `json:"clientAccessPolicy,omitempty" tf:"client_access_policy"`

	// +kubebuilder:validation:Optional
	CrossDomainPolicy *string `json:"crossDomainPolicy,omitempty" tf:"cross_domain_policy"`
}

type MediaStreamingEndpointObservation struct {
	HostName string `json:"hostName,omitempty" tf:"host_name"`
}

type MediaStreamingEndpointParameters struct {

	// +kubebuilder:validation:Optional
	AccessControl []AccessControlParameters `json:"accessControl,omitempty" tf:"access_control"`

	// +kubebuilder:validation:Optional
	AutoStartEnabled *bool `json:"autoStartEnabled,omitempty" tf:"auto_start_enabled"`

	// +kubebuilder:validation:Optional
	CdnEnabled *bool `json:"cdnEnabled,omitempty" tf:"cdn_enabled"`

	// +kubebuilder:validation:Optional
	CdnProfile *string `json:"cdnProfile,omitempty" tf:"cdn_profile"`

	// +kubebuilder:validation:Optional
	CdnProvider *string `json:"cdnProvider,omitempty" tf:"cdn_provider"`

	// +kubebuilder:validation:Optional
	CrossSiteAccessPolicy []MediaStreamingEndpointCrossSiteAccessPolicyParameters `json:"crossSiteAccessPolicy,omitempty" tf:"cross_site_access_policy"`

	// +kubebuilder:validation:Optional
	CustomHostNames []string `json:"customHostNames,omitempty" tf:"custom_host_names"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	MaxCacheAgeSeconds *int64 `json:"maxCacheAgeSeconds,omitempty" tf:"max_cache_age_seconds"`

	// +kubebuilder:validation:Required
	MediaServicesAccountName string `json:"mediaServicesAccountName" tf:"media_services_account_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	ScaleUnits int64 `json:"scaleUnits" tf:"scale_units"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// MediaStreamingEndpointSpec defines the desired state of MediaStreamingEndpoint
type MediaStreamingEndpointSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MediaStreamingEndpointParameters `json:"forProvider"`
}

// MediaStreamingEndpointStatus defines the observed state of MediaStreamingEndpoint.
type MediaStreamingEndpointStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MediaStreamingEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MediaStreamingEndpoint is the Schema for the MediaStreamingEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MediaStreamingEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MediaStreamingEndpointSpec   `json:"spec"`
	Status            MediaStreamingEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MediaStreamingEndpointList contains a list of MediaStreamingEndpoints
type MediaStreamingEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MediaStreamingEndpoint `json:"items"`
}

// Repository type metadata.
var (
	MediaStreamingEndpointKind             = "MediaStreamingEndpoint"
	MediaStreamingEndpointGroupKind        = schema.GroupKind{Group: Group, Kind: MediaStreamingEndpointKind}.String()
	MediaStreamingEndpointKindAPIVersion   = MediaStreamingEndpointKind + "." + GroupVersion.String()
	MediaStreamingEndpointGroupVersionKind = GroupVersion.WithKind(MediaStreamingEndpointKind)
)

func init() {
	SchemeBuilder.Register(&MediaStreamingEndpoint{}, &MediaStreamingEndpointList{})
}
