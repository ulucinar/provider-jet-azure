/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type InputAssetObservation struct {
}

type InputAssetParameters struct {

	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`
}

type MediaJobObservation struct {
}

type MediaJobParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	InputAsset []InputAssetParameters `json:"inputAsset" tf:"input_asset"`

	// +kubebuilder:validation:Required
	MediaServicesAccountName string `json:"mediaServicesAccountName" tf:"media_services_account_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	OutputAsset []OutputAssetParameters `json:"outputAsset" tf:"output_asset"`

	// +kubebuilder:validation:Optional
	Priority *string `json:"priority,omitempty" tf:"priority"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	TransformName string `json:"transformName" tf:"transform_name"`
}

type OutputAssetObservation struct {
}

type OutputAssetParameters struct {

	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`
}

// MediaJobSpec defines the desired state of MediaJob
type MediaJobSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MediaJobParameters `json:"forProvider"`
}

// MediaJobStatus defines the observed state of MediaJob.
type MediaJobStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MediaJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MediaJob is the Schema for the MediaJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MediaJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MediaJobSpec   `json:"spec"`
	Status            MediaJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MediaJobList contains a list of MediaJobs
type MediaJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MediaJob `json:"items"`
}

// Repository type metadata.
var (
	MediaJobKind             = "MediaJob"
	MediaJobGroupKind        = schema.GroupKind{Group: Group, Kind: MediaJobKind}.String()
	MediaJobKindAPIVersion   = MediaJobKind + "." + GroupVersion.String()
	MediaJobGroupVersionKind = GroupVersion.WithKind(MediaJobKind)
)

func init() {
	SchemeBuilder.Register(&MediaJob{}, &MediaJobList{})
}
