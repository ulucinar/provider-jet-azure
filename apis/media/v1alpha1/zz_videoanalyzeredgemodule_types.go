/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VideoAnalyzerEdgeModuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VideoAnalyzerEdgeModuleParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	VideoAnalyzerName *string `json:"videoAnalyzerName" tf:"video_analyzer_name,omitempty"`
}

// VideoAnalyzerEdgeModuleSpec defines the desired state of VideoAnalyzerEdgeModule
type VideoAnalyzerEdgeModuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VideoAnalyzerEdgeModuleParameters `json:"forProvider"`
}

// VideoAnalyzerEdgeModuleStatus defines the observed state of VideoAnalyzerEdgeModule.
type VideoAnalyzerEdgeModuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VideoAnalyzerEdgeModuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VideoAnalyzerEdgeModule is the Schema for the VideoAnalyzerEdgeModules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type VideoAnalyzerEdgeModule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VideoAnalyzerEdgeModuleSpec   `json:"spec"`
	Status            VideoAnalyzerEdgeModuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VideoAnalyzerEdgeModuleList contains a list of VideoAnalyzerEdgeModules
type VideoAnalyzerEdgeModuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VideoAnalyzerEdgeModule `json:"items"`
}

// Repository type metadata.
var (
	VideoAnalyzerEdgeModule_Kind             = "VideoAnalyzerEdgeModule"
	VideoAnalyzerEdgeModule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VideoAnalyzerEdgeModule_Kind}.String()
	VideoAnalyzerEdgeModule_KindAPIVersion   = VideoAnalyzerEdgeModule_Kind + "." + CRDGroupVersion.String()
	VideoAnalyzerEdgeModule_GroupVersionKind = CRDGroupVersion.WithKind(VideoAnalyzerEdgeModule_Kind)
)

func init() {
	SchemeBuilder.Register(&VideoAnalyzerEdgeModule{}, &VideoAnalyzerEdgeModuleList{})
}
