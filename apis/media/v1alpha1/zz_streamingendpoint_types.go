/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessControlObservation struct {
}

type AccessControlParameters struct {

	// +kubebuilder:validation:Optional
	AkamaiSignatureHeaderAuthenticationKey []AkamaiSignatureHeaderAuthenticationKeyParameters `json:"akamaiSignatureHeaderAuthenticationKey,omitempty" tf:"akamai_signature_header_authentication_key,omitempty"`

	// +kubebuilder:validation:Optional
	IPAllow []IPAllowParameters `json:"ipAllow,omitempty" tf:"ip_allow,omitempty"`
}

type AkamaiSignatureHeaderAuthenticationKeyObservation struct {
}

type AkamaiSignatureHeaderAuthenticationKeyParameters struct {

	// +kubebuilder:validation:Optional
	Base64Key *string `json:"base64Key,omitempty" tf:"base64_key,omitempty"`

	// +kubebuilder:validation:Optional
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// +kubebuilder:validation:Optional
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`
}

type IPAllowObservation struct {
}

type IPAllowParameters struct {

	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetPrefixLength *int64 `json:"subnetPrefixLength,omitempty" tf:"subnet_prefix_length,omitempty"`
}

type StreamingEndpointCrossSiteAccessPolicyObservation struct {
}

type StreamingEndpointCrossSiteAccessPolicyParameters struct {

	// +kubebuilder:validation:Optional
	ClientAccessPolicy *string `json:"clientAccessPolicy,omitempty" tf:"client_access_policy,omitempty"`

	// +kubebuilder:validation:Optional
	CrossDomainPolicy *string `json:"crossDomainPolicy,omitempty" tf:"cross_domain_policy,omitempty"`
}

type StreamingEndpointObservation struct {
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type StreamingEndpointParameters struct {

	// +kubebuilder:validation:Optional
	AccessControl []AccessControlParameters `json:"accessControl,omitempty" tf:"access_control,omitempty"`

	// +kubebuilder:validation:Optional
	AutoStartEnabled *bool `json:"autoStartEnabled,omitempty" tf:"auto_start_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	CdnEnabled *bool `json:"cdnEnabled,omitempty" tf:"cdn_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	CdnProfile *string `json:"cdnProfile,omitempty" tf:"cdn_profile,omitempty"`

	// +kubebuilder:validation:Optional
	CdnProvider *string `json:"cdnProvider,omitempty" tf:"cdn_provider,omitempty"`

	// +kubebuilder:validation:Optional
	CrossSiteAccessPolicy []StreamingEndpointCrossSiteAccessPolicyParameters `json:"crossSiteAccessPolicy,omitempty" tf:"cross_site_access_policy,omitempty"`

	// +kubebuilder:validation:Optional
	CustomHostNames []*string `json:"customHostNames,omitempty" tf:"custom_host_names,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	MaxCacheAgeSeconds *int64 `json:"maxCacheAgeSeconds,omitempty" tf:"max_cache_age_seconds,omitempty"`

	// +kubebuilder:validation:Required
	MediaServicesAccountName *string `json:"mediaServicesAccountName" tf:"media_services_account_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	ScaleUnits *int64 `json:"scaleUnits" tf:"scale_units,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// StreamingEndpointSpec defines the desired state of StreamingEndpoint
type StreamingEndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StreamingEndpointParameters `json:"forProvider"`
}

// StreamingEndpointStatus defines the observed state of StreamingEndpoint.
type StreamingEndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StreamingEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StreamingEndpoint is the Schema for the StreamingEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type StreamingEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StreamingEndpointSpec   `json:"spec"`
	Status            StreamingEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StreamingEndpointList contains a list of StreamingEndpoints
type StreamingEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StreamingEndpoint `json:"items"`
}

// Repository type metadata.
var (
	StreamingEndpoint_Kind             = "StreamingEndpoint"
	StreamingEndpoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StreamingEndpoint_Kind}.String()
	StreamingEndpoint_KindAPIVersion   = StreamingEndpoint_Kind + "." + CRDGroupVersion.String()
	StreamingEndpoint_GroupVersionKind = CRDGroupVersion.WithKind(StreamingEndpoint_Kind)
)

func init() {
	SchemeBuilder.Register(&StreamingEndpoint{}, &StreamingEndpointList{})
}
