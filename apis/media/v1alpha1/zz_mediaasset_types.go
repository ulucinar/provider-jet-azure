/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MediaAssetObservation struct {
}

type MediaAssetParameters struct {

	// +kubebuilder:validation:Optional
	AlternateID *string `json:"alternateId,omitempty" tf:"alternate_id"`

	// +kubebuilder:validation:Optional
	Container *string `json:"container,omitempty" tf:"container"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	MediaServicesAccountName string `json:"mediaServicesAccountName" tf:"media_services_account_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	StorageAccountName *string `json:"storageAccountName,omitempty" tf:"storage_account_name"`
}

// MediaAssetSpec defines the desired state of MediaAsset
type MediaAssetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MediaAssetParameters `json:"forProvider"`
}

// MediaAssetStatus defines the observed state of MediaAsset.
type MediaAssetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MediaAssetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MediaAsset is the Schema for the MediaAssets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MediaAsset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MediaAssetSpec   `json:"spec"`
	Status            MediaAssetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MediaAssetList contains a list of MediaAssets
type MediaAssetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MediaAsset `json:"items"`
}

// Repository type metadata.
var (
	MediaAssetKind             = "MediaAsset"
	MediaAssetGroupKind        = schema.GroupKind{Group: Group, Kind: MediaAssetKind}.String()
	MediaAssetKindAPIVersion   = MediaAssetKind + "." + GroupVersion.String()
	MediaAssetGroupVersionKind = GroupVersion.WithKind(MediaAssetKind)
)

func init() {
	SchemeBuilder.Register(&MediaAsset{}, &MediaAssetList{})
}
