/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BotChannelLineObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BotChannelLineParameters struct {

	// +kubebuilder:validation:Required
	BotName *string `json:"botName" tf:"bot_name,omitempty"`

	// +kubebuilder:validation:Required
	LineChannel []LineChannelParameters `json:"lineChannel" tf:"line_channel,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`
}

type LineChannelObservation struct {
}

type LineChannelParameters struct {

	// +kubebuilder:validation:Required
	AccessTokenSecretRef v1.SecretKeySelector `json:"accessTokenSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	SecretSecretRef v1.SecretKeySelector `json:"secretSecretRef" tf:"-"`
}

// BotChannelLineSpec defines the desired state of BotChannelLine
type BotChannelLineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BotChannelLineParameters `json:"forProvider"`
}

// BotChannelLineStatus defines the observed state of BotChannelLine.
type BotChannelLineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BotChannelLineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BotChannelLine is the Schema for the BotChannelLines API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type BotChannelLine struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BotChannelLineSpec   `json:"spec"`
	Status            BotChannelLineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BotChannelLineList contains a list of BotChannelLines
type BotChannelLineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BotChannelLine `json:"items"`
}

// Repository type metadata.
var (
	BotChannelLine_Kind             = "BotChannelLine"
	BotChannelLine_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BotChannelLine_Kind}.String()
	BotChannelLine_KindAPIVersion   = BotChannelLine_Kind + "." + CRDGroupVersion.String()
	BotChannelLine_GroupVersionKind = CRDGroupVersion.WithKind(BotChannelLine_Kind)
)

func init() {
	SchemeBuilder.Register(&BotChannelLine{}, &BotChannelLineList{})
}
