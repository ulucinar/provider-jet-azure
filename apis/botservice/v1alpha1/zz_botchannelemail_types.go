/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BotChannelEmailObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BotChannelEmailParameters struct {

	// +kubebuilder:validation:Required
	BotName *string `json:"botName" tf:"bot_name,omitempty"`

	// +kubebuilder:validation:Required
	EmailAddress *string `json:"emailAddress" tf:"email_address,omitempty"`

	// +kubebuilder:validation:Required
	EmailPasswordSecretRef v1.SecretKeySelector `json:"emailPasswordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`
}

// BotChannelEmailSpec defines the desired state of BotChannelEmail
type BotChannelEmailSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BotChannelEmailParameters `json:"forProvider"`
}

// BotChannelEmailStatus defines the observed state of BotChannelEmail.
type BotChannelEmailStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BotChannelEmailObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BotChannelEmail is the Schema for the BotChannelEmails API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type BotChannelEmail struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BotChannelEmailSpec   `json:"spec"`
	Status            BotChannelEmailStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BotChannelEmailList contains a list of BotChannelEmails
type BotChannelEmailList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BotChannelEmail `json:"items"`
}

// Repository type metadata.
var (
	BotChannelEmail_Kind             = "BotChannelEmail"
	BotChannelEmail_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BotChannelEmail_Kind}.String()
	BotChannelEmail_KindAPIVersion   = BotChannelEmail_Kind + "." + CRDGroupVersion.String()
	BotChannelEmail_GroupVersionKind = CRDGroupVersion.WithKind(BotChannelEmail_Kind)
)

func init() {
	SchemeBuilder.Register(&BotChannelEmail{}, &BotChannelEmailList{})
}
