/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BotConnectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BotConnectionParameters struct {

	// +kubebuilder:validation:Required
	BotName *string `json:"botName" tf:"bot_name,omitempty"`

	// +kubebuilder:validation:Required
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Required
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Scopes *string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// +kubebuilder:validation:Required
	ServiceProviderName *string `json:"serviceProviderName" tf:"service_provider_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// BotConnectionSpec defines the desired state of BotConnection
type BotConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BotConnectionParameters `json:"forProvider"`
}

// BotConnectionStatus defines the observed state of BotConnection.
type BotConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BotConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BotConnection is the Schema for the BotConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type BotConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BotConnectionSpec   `json:"spec"`
	Status            BotConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BotConnectionList contains a list of BotConnections
type BotConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BotConnection `json:"items"`
}

// Repository type metadata.
var (
	BotConnection_Kind             = "BotConnection"
	BotConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BotConnection_Kind}.String()
	BotConnection_KindAPIVersion   = BotConnection_Kind + "." + CRDGroupVersion.String()
	BotConnection_GroupVersionKind = CRDGroupVersion.WithKind(BotConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&BotConnection{}, &BotConnectionList{})
}
