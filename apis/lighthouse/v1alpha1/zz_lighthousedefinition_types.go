/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AuthorizationObservation struct {
}

type AuthorizationParameters struct {

	// +kubebuilder:validation:Optional
	DelegatedRoleDefinitionIds []string `json:"delegatedRoleDefinitionIds,omitempty" tf:"delegated_role_definition_ids"`

	// +kubebuilder:validation:Optional
	PrincipalDisplayName *string `json:"principalDisplayName,omitempty" tf:"principal_display_name"`

	// +kubebuilder:validation:Required
	PrincipalID string `json:"principalId" tf:"principal_id"`

	// +kubebuilder:validation:Required
	RoleDefinitionID string `json:"roleDefinitionId" tf:"role_definition_id"`
}

type LighthouseDefinitionObservation struct {
}

type LighthouseDefinitionParameters struct {

	// +kubebuilder:validation:Required
	Authorization []AuthorizationParameters `json:"authorization" tf:"authorization"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	LighthouseDefinitionID *string `json:"lighthouseDefinitionId,omitempty" tf:"lighthouse_definition_id"`

	// +kubebuilder:validation:Required
	ManagingTenantID string `json:"managingTenantId" tf:"managing_tenant_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Plan []PlanParameters `json:"plan,omitempty" tf:"plan"`

	// +kubebuilder:validation:Required
	Scope string `json:"scope" tf:"scope"`
}

type PlanObservation struct {
}

type PlanParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Product string `json:"product" tf:"product"`

	// +kubebuilder:validation:Required
	Publisher string `json:"publisher" tf:"publisher"`

	// +kubebuilder:validation:Required
	Version string `json:"version" tf:"version"`
}

// LighthouseDefinitionSpec defines the desired state of LighthouseDefinition
type LighthouseDefinitionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LighthouseDefinitionParameters `json:"forProvider"`
}

// LighthouseDefinitionStatus defines the observed state of LighthouseDefinition.
type LighthouseDefinitionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LighthouseDefinitionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LighthouseDefinition is the Schema for the LighthouseDefinitions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LighthouseDefinition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LighthouseDefinitionSpec   `json:"spec"`
	Status            LighthouseDefinitionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LighthouseDefinitionList contains a list of LighthouseDefinitions
type LighthouseDefinitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LighthouseDefinition `json:"items"`
}

// Repository type metadata.
var (
	LighthouseDefinitionKind             = "LighthouseDefinition"
	LighthouseDefinitionGroupKind        = schema.GroupKind{Group: Group, Kind: LighthouseDefinitionKind}.String()
	LighthouseDefinitionKindAPIVersion   = LighthouseDefinitionKind + "." + GroupVersion.String()
	LighthouseDefinitionGroupVersionKind = GroupVersion.WithKind(LighthouseDefinitionKind)
)

func init() {
	SchemeBuilder.Register(&LighthouseDefinition{}, &LighthouseDefinitionList{})
}
