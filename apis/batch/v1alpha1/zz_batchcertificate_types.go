/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BatchCertificateObservation struct {
	Name string `json:"name,omitempty" tf:"name"`

	PublicData string `json:"publicData,omitempty" tf:"public_data"`
}

type BatchCertificateParameters struct {

	// +kubebuilder:validation:Required
	AccountName string `json:"accountName" tf:"account_name"`

	// +kubebuilder:validation:Required
	Certificate string `json:"certificate" tf:"certificate"`

	// +kubebuilder:validation:Required
	Format string `json:"format" tf:"format"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Thumbprint string `json:"thumbprint" tf:"thumbprint"`

	// +kubebuilder:validation:Required
	ThumbprintAlgorithm string `json:"thumbprintAlgorithm" tf:"thumbprint_algorithm"`
}

// BatchCertificateSpec defines the desired state of BatchCertificate
type BatchCertificateSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BatchCertificateParameters `json:"forProvider"`
}

// BatchCertificateStatus defines the observed state of BatchCertificate.
type BatchCertificateStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BatchCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BatchCertificate is the Schema for the BatchCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type BatchCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BatchCertificateSpec   `json:"spec"`
	Status            BatchCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BatchCertificateList contains a list of BatchCertificates
type BatchCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BatchCertificate `json:"items"`
}

// Repository type metadata.
var (
	BatchCertificateKind             = "BatchCertificate"
	BatchCertificateGroupKind        = schema.GroupKind{Group: Group, Kind: BatchCertificateKind}.String()
	BatchCertificateKindAPIVersion   = BatchCertificateKind + "." + GroupVersion.String()
	BatchCertificateGroupVersionKind = GroupVersion.WithKind(BatchCertificateKind)
)

func init() {
	SchemeBuilder.Register(&BatchCertificate{}, &BatchCertificateList{})
}
