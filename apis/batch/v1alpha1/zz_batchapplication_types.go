/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BatchApplicationObservation struct {
}

type BatchApplicationParameters struct {

	// +kubebuilder:validation:Required
	AccountName string `json:"accountName" tf:"account_name"`

	// +kubebuilder:validation:Optional
	AllowUpdates *bool `json:"allowUpdates,omitempty" tf:"allow_updates"`

	// +kubebuilder:validation:Optional
	DefaultVersion *string `json:"defaultVersion,omitempty" tf:"default_version"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

// BatchApplicationSpec defines the desired state of BatchApplication
type BatchApplicationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BatchApplicationParameters `json:"forProvider"`
}

// BatchApplicationStatus defines the observed state of BatchApplication.
type BatchApplicationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BatchApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BatchApplication is the Schema for the BatchApplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type BatchApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BatchApplicationSpec   `json:"spec"`
	Status            BatchApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BatchApplicationList contains a list of BatchApplications
type BatchApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BatchApplication `json:"items"`
}

// Repository type metadata.
var (
	BatchApplicationKind             = "BatchApplication"
	BatchApplicationGroupKind        = schema.GroupKind{Group: Group, Kind: BatchApplicationKind}.String()
	BatchApplicationKindAPIVersion   = BatchApplicationKind + "." + GroupVersion.String()
	BatchApplicationGroupVersionKind = GroupVersion.WithKind(BatchApplicationKind)
)

func init() {
	SchemeBuilder.Register(&BatchApplication{}, &BatchApplicationList{})
}
