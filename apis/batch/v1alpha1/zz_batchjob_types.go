/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BatchJobObservation struct {
}

type BatchJobParameters struct {

	// +kubebuilder:validation:Required
	BatchPoolID string `json:"batchPoolId" tf:"batch_pool_id"`

	// +kubebuilder:validation:Optional
	CommonEnvironmentProperties map[string]string `json:"commonEnvironmentProperties,omitempty" tf:"common_environment_properties"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Priority *int64 `json:"priority,omitempty" tf:"priority"`

	// +kubebuilder:validation:Optional
	TaskRetryMaximum *int64 `json:"taskRetryMaximum,omitempty" tf:"task_retry_maximum"`
}

// BatchJobSpec defines the desired state of BatchJob
type BatchJobSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BatchJobParameters `json:"forProvider"`
}

// BatchJobStatus defines the observed state of BatchJob.
type BatchJobStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BatchJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BatchJob is the Schema for the BatchJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type BatchJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BatchJobSpec   `json:"spec"`
	Status            BatchJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BatchJobList contains a list of BatchJobs
type BatchJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BatchJob `json:"items"`
}

// Repository type metadata.
var (
	BatchJobKind             = "BatchJob"
	BatchJobGroupKind        = schema.GroupKind{Group: Group, Kind: BatchJobKind}.String()
	BatchJobKindAPIVersion   = BatchJobKind + "." + GroupVersion.String()
	BatchJobGroupVersionKind = GroupVersion.WithKind(BatchJobKind)
)

func init() {
	SchemeBuilder.Register(&BatchJob{}, &BatchJobList{})
}
