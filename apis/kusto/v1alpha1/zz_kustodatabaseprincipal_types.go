/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type KustoDatabasePrincipalObservation struct {
	AppID string `json:"appId,omitempty" tf:"app_id"`

	Email string `json:"email,omitempty" tf:"email"`

	FullyQualifiedName string `json:"fullyQualifiedName,omitempty" tf:"fully_qualified_name"`

	Name string `json:"name,omitempty" tf:"name"`
}

type KustoDatabasePrincipalParameters struct {

	// +kubebuilder:validation:Required
	ClientID string `json:"clientId" tf:"client_id"`

	// +kubebuilder:validation:Required
	ClusterName string `json:"clusterName" tf:"cluster_name"`

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Required
	ObjectID string `json:"objectId" tf:"object_id"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Role string `json:"role" tf:"role"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

// KustoDatabasePrincipalSpec defines the desired state of KustoDatabasePrincipal
type KustoDatabasePrincipalSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       KustoDatabasePrincipalParameters `json:"forProvider"`
}

// KustoDatabasePrincipalStatus defines the observed state of KustoDatabasePrincipal.
type KustoDatabasePrincipalStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          KustoDatabasePrincipalObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KustoDatabasePrincipal is the Schema for the KustoDatabasePrincipals API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type KustoDatabasePrincipal struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KustoDatabasePrincipalSpec   `json:"spec"`
	Status            KustoDatabasePrincipalStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KustoDatabasePrincipalList contains a list of KustoDatabasePrincipals
type KustoDatabasePrincipalList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KustoDatabasePrincipal `json:"items"`
}

// Repository type metadata.
var (
	KustoDatabasePrincipalKind             = "KustoDatabasePrincipal"
	KustoDatabasePrincipalGroupKind        = schema.GroupKind{Group: Group, Kind: KustoDatabasePrincipalKind}.String()
	KustoDatabasePrincipalKindAPIVersion   = KustoDatabasePrincipalKind + "." + GroupVersion.String()
	KustoDatabasePrincipalGroupVersionKind = GroupVersion.WithKind(KustoDatabasePrincipalKind)
)

func init() {
	SchemeBuilder.Register(&KustoDatabasePrincipal{}, &KustoDatabasePrincipalList{})
}
