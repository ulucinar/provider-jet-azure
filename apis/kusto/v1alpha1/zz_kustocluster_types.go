/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Optional
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type KustoClusterObservation struct {
	DataIngestionURI string `json:"dataIngestionUri,omitempty" tf:"data_ingestion_uri"`

	URI string `json:"uri,omitempty" tf:"uri"`
}

type KustoClusterParameters struct {

	// +kubebuilder:validation:Optional
	DoubleEncryptionEnabled *bool `json:"doubleEncryptionEnabled,omitempty" tf:"double_encryption_enabled"`

	// +kubebuilder:validation:Optional
	EnableDiskEncryption *bool `json:"enableDiskEncryption,omitempty" tf:"enable_disk_encryption"`

	// +kubebuilder:validation:Optional
	EnablePurge *bool `json:"enablePurge,omitempty" tf:"enable_purge"`

	// +kubebuilder:validation:Optional
	EnableStreamingIngest *bool `json:"enableStreamingIngest,omitempty" tf:"enable_streaming_ingest"`

	// +kubebuilder:validation:Optional
	Engine *string `json:"engine,omitempty" tf:"engine"`

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Optional
	LanguageExtensions []string `json:"languageExtensions,omitempty" tf:"language_extensions"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	OptimizedAutoScale []OptimizedAutoScaleParameters `json:"optimizedAutoScale,omitempty" tf:"optimized_auto_scale"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Sku []SkuParameters `json:"sku" tf:"sku"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TrustedExternalTenants []string `json:"trustedExternalTenants,omitempty" tf:"trusted_external_tenants"`

	// +kubebuilder:validation:Optional
	VirtualNetworkConfiguration []VirtualNetworkConfigurationParameters `json:"virtualNetworkConfiguration,omitempty" tf:"virtual_network_configuration"`

	// +kubebuilder:validation:Optional
	Zones []string `json:"zones,omitempty" tf:"zones"`
}

type OptimizedAutoScaleObservation struct {
}

type OptimizedAutoScaleParameters struct {

	// +kubebuilder:validation:Required
	MaximumInstances int64 `json:"maximumInstances" tf:"maximum_instances"`

	// +kubebuilder:validation:Required
	MinimumInstances int64 `json:"minimumInstances" tf:"minimum_instances"`
}

type SkuObservation struct {
}

type SkuParameters struct {

	// +kubebuilder:validation:Optional
	Capacity *int64 `json:"capacity,omitempty" tf:"capacity"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`
}

type VirtualNetworkConfigurationObservation struct {
}

type VirtualNetworkConfigurationParameters struct {

	// +kubebuilder:validation:Required
	DataManagementPublicIPID string `json:"dataManagementPublicIpId" tf:"data_management_public_ip_id"`

	// +kubebuilder:validation:Required
	EnginePublicIPID string `json:"enginePublicIpId" tf:"engine_public_ip_id"`

	// +kubebuilder:validation:Required
	SubnetID string `json:"subnetId" tf:"subnet_id"`
}

// KustoClusterSpec defines the desired state of KustoCluster
type KustoClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       KustoClusterParameters `json:"forProvider"`
}

// KustoClusterStatus defines the observed state of KustoCluster.
type KustoClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          KustoClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KustoCluster is the Schema for the KustoClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type KustoCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KustoClusterSpec   `json:"spec"`
	Status            KustoClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KustoClusterList contains a list of KustoClusters
type KustoClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KustoCluster `json:"items"`
}

// Repository type metadata.
var (
	KustoClusterKind             = "KustoCluster"
	KustoClusterGroupKind        = schema.GroupKind{Group: Group, Kind: KustoClusterKind}.String()
	KustoClusterKindAPIVersion   = KustoClusterKind + "." + GroupVersion.String()
	KustoClusterGroupVersionKind = GroupVersion.WithKind(KustoClusterKind)
)

func init() {
	SchemeBuilder.Register(&KustoCluster{}, &KustoClusterList{})
}
