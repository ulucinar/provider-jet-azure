/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type KustoEventgridDataConnectionObservation struct {
}

type KustoEventgridDataConnectionParameters struct {

	// +kubebuilder:validation:Optional
	BlobStorageEventType *string `json:"blobStorageEventType,omitempty" tf:"blob_storage_event_type"`

	// +kubebuilder:validation:Required
	ClusterName string `json:"clusterName" tf:"cluster_name"`

	// +kubebuilder:validation:Optional
	DataFormat *string `json:"dataFormat,omitempty" tf:"data_format"`

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Required
	EventhubConsumerGroupName string `json:"eventhubConsumerGroupName" tf:"eventhub_consumer_group_name"`

	// +kubebuilder:validation:Required
	EventhubID string `json:"eventhubId" tf:"eventhub_id"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	MappingRuleName *string `json:"mappingRuleName,omitempty" tf:"mapping_rule_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	SkipFirstRecord *bool `json:"skipFirstRecord,omitempty" tf:"skip_first_record"`

	// +kubebuilder:validation:Required
	StorageAccountID string `json:"storageAccountId" tf:"storage_account_id"`

	// +kubebuilder:validation:Optional
	TableName *string `json:"tableName,omitempty" tf:"table_name"`
}

// KustoEventgridDataConnectionSpec defines the desired state of KustoEventgridDataConnection
type KustoEventgridDataConnectionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       KustoEventgridDataConnectionParameters `json:"forProvider"`
}

// KustoEventgridDataConnectionStatus defines the observed state of KustoEventgridDataConnection.
type KustoEventgridDataConnectionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          KustoEventgridDataConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KustoEventgridDataConnection is the Schema for the KustoEventgridDataConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type KustoEventgridDataConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KustoEventgridDataConnectionSpec   `json:"spec"`
	Status            KustoEventgridDataConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KustoEventgridDataConnectionList contains a list of KustoEventgridDataConnections
type KustoEventgridDataConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KustoEventgridDataConnection `json:"items"`
}

// Repository type metadata.
var (
	KustoEventgridDataConnectionKind             = "KustoEventgridDataConnection"
	KustoEventgridDataConnectionGroupKind        = schema.GroupKind{Group: Group, Kind: KustoEventgridDataConnectionKind}.String()
	KustoEventgridDataConnectionKindAPIVersion   = KustoEventgridDataConnectionKind + "." + GroupVersion.String()
	KustoEventgridDataConnectionGroupVersionKind = GroupVersion.WithKind(KustoEventgridDataConnectionKind)
)

func init() {
	SchemeBuilder.Register(&KustoEventgridDataConnection{}, &KustoEventgridDataConnectionList{})
}
