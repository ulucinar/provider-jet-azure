/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type KustoAttachedDatabaseConfigurationObservation struct {
	AttachedDatabaseNames []string `json:"attachedDatabaseNames,omitempty" tf:"attached_database_names"`
}

type KustoAttachedDatabaseConfigurationParameters struct {

	// +kubebuilder:validation:Required
	ClusterName string `json:"clusterName" tf:"cluster_name"`

	// +kubebuilder:validation:Required
	ClusterResourceID string `json:"clusterResourceId" tf:"cluster_resource_id"`

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Optional
	DefaultPrincipalModificationKind *string `json:"defaultPrincipalModificationKind,omitempty" tf:"default_principal_modification_kind"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

// KustoAttachedDatabaseConfigurationSpec defines the desired state of KustoAttachedDatabaseConfiguration
type KustoAttachedDatabaseConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       KustoAttachedDatabaseConfigurationParameters `json:"forProvider"`
}

// KustoAttachedDatabaseConfigurationStatus defines the observed state of KustoAttachedDatabaseConfiguration.
type KustoAttachedDatabaseConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          KustoAttachedDatabaseConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KustoAttachedDatabaseConfiguration is the Schema for the KustoAttachedDatabaseConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type KustoAttachedDatabaseConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KustoAttachedDatabaseConfigurationSpec   `json:"spec"`
	Status            KustoAttachedDatabaseConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KustoAttachedDatabaseConfigurationList contains a list of KustoAttachedDatabaseConfigurations
type KustoAttachedDatabaseConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KustoAttachedDatabaseConfiguration `json:"items"`
}

// Repository type metadata.
var (
	KustoAttachedDatabaseConfigurationKind             = "KustoAttachedDatabaseConfiguration"
	KustoAttachedDatabaseConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: KustoAttachedDatabaseConfigurationKind}.String()
	KustoAttachedDatabaseConfigurationKindAPIVersion   = KustoAttachedDatabaseConfigurationKind + "." + GroupVersion.String()
	KustoAttachedDatabaseConfigurationGroupVersionKind = GroupVersion.WithKind(KustoAttachedDatabaseConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&KustoAttachedDatabaseConfiguration{}, &KustoAttachedDatabaseConfigurationList{})
}
