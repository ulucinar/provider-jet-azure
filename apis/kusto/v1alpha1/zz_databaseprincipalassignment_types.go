/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabasePrincipalAssignmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PrincipalName *string `json:"principalName,omitempty" tf:"principal_name,omitempty"`

	TenantName *string `json:"tenantName,omitempty" tf:"tenant_name,omitempty"`
}

type DatabasePrincipalAssignmentParameters struct {

	// +kubebuilder:validation:Required
	ClusterName *string `json:"clusterName" tf:"cluster_name,omitempty"`

	// +kubebuilder:validation:Required
	DatabaseName *string `json:"databaseName" tf:"database_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	PrincipalID *string `json:"principalId" tf:"principal_id,omitempty"`

	// +kubebuilder:validation:Required
	PrincipalType *string `json:"principalType" tf:"principal_type,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`

	// +kubebuilder:validation:Required
	TenantID *string `json:"tenantId" tf:"tenant_id,omitempty"`
}

// DatabasePrincipalAssignmentSpec defines the desired state of DatabasePrincipalAssignment
type DatabasePrincipalAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabasePrincipalAssignmentParameters `json:"forProvider"`
}

// DatabasePrincipalAssignmentStatus defines the observed state of DatabasePrincipalAssignment.
type DatabasePrincipalAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabasePrincipalAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatabasePrincipalAssignment is the Schema for the DatabasePrincipalAssignments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DatabasePrincipalAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabasePrincipalAssignmentSpec   `json:"spec"`
	Status            DatabasePrincipalAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabasePrincipalAssignmentList contains a list of DatabasePrincipalAssignments
type DatabasePrincipalAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabasePrincipalAssignment `json:"items"`
}

// Repository type metadata.
var (
	DatabasePrincipalAssignment_Kind             = "DatabasePrincipalAssignment"
	DatabasePrincipalAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DatabasePrincipalAssignment_Kind}.String()
	DatabasePrincipalAssignment_KindAPIVersion   = DatabasePrincipalAssignment_Kind + "." + CRDGroupVersion.String()
	DatabasePrincipalAssignment_GroupVersionKind = CRDGroupVersion.WithKind(DatabasePrincipalAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&DatabasePrincipalAssignment{}, &DatabasePrincipalAssignmentList{})
}
