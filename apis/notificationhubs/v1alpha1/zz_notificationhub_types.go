/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APNSCredentialObservation struct {
}

type APNSCredentialParameters struct {

	// +kubebuilder:validation:Required
	ApplicationMode *string `json:"applicationMode" tf:"application_mode,omitempty"`

	// +kubebuilder:validation:Required
	BundleID *string `json:"bundleId" tf:"bundle_id,omitempty"`

	// +kubebuilder:validation:Required
	KeyID *string `json:"keyId" tf:"key_id,omitempty"`

	// +kubebuilder:validation:Required
	TeamID *string `json:"teamId" tf:"team_id,omitempty"`

	// +kubebuilder:validation:Required
	TokenSecretRef v1.SecretKeySelector `json:"tokenSecretRef" tf:"-"`
}

type GCMCredentialObservation struct {
}

type GCMCredentialParameters struct {

	// +kubebuilder:validation:Required
	APIKeySecretRef v1.SecretKeySelector `json:"apiKeySecretRef" tf:"-"`
}

type NotificationHubObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NotificationHubParameters struct {

	// +kubebuilder:validation:Optional
	APNSCredential []APNSCredentialParameters `json:"apnsCredential,omitempty" tf:"apns_credential,omitempty"`

	// +kubebuilder:validation:Optional
	GCMCredential []GCMCredentialParameters `json:"gcmCredential,omitempty" tf:"gcm_credential,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	NamespaceName *string `json:"namespaceName" tf:"namespace_name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// NotificationHubSpec defines the desired state of NotificationHub
type NotificationHubSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NotificationHubParameters `json:"forProvider"`
}

// NotificationHubStatus defines the observed state of NotificationHub.
type NotificationHubStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NotificationHubObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NotificationHub is the Schema for the NotificationHubs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type NotificationHub struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NotificationHubSpec   `json:"spec"`
	Status            NotificationHubStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotificationHubList contains a list of NotificationHubs
type NotificationHubList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NotificationHub `json:"items"`
}

// Repository type metadata.
var (
	NotificationHub_Kind             = "NotificationHub"
	NotificationHub_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NotificationHub_Kind}.String()
	NotificationHub_KindAPIVersion   = NotificationHub_Kind + "." + CRDGroupVersion.String()
	NotificationHub_GroupVersionKind = CRDGroupVersion.WithKind(NotificationHub_Kind)
)

func init() {
	SchemeBuilder.Register(&NotificationHub{}, &NotificationHubList{})
}
