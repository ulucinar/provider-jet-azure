/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type PatchScheduleObservation struct {
}

type PatchScheduleParameters struct {

	// +kubebuilder:validation:Required
	DayOfWeek string `json:"dayOfWeek" tf:"day_of_week"`

	// +kubebuilder:validation:Optional
	MaintenanceWindow *string `json:"maintenanceWindow,omitempty" tf:"maintenance_window"`

	// +kubebuilder:validation:Optional
	StartHourUtc *int64 `json:"startHourUtc,omitempty" tf:"start_hour_utc"`
}

type RedisCacheObservation struct {
	Hostname string `json:"hostname,omitempty" tf:"hostname"`

	Port int64 `json:"port,omitempty" tf:"port"`

	PrimaryAccessKey string `json:"primaryAccessKey,omitempty" tf:"primary_access_key"`

	PrimaryConnectionString string `json:"primaryConnectionString,omitempty" tf:"primary_connection_string"`

	SecondaryAccessKey string `json:"secondaryAccessKey,omitempty" tf:"secondary_access_key"`

	SecondaryConnectionString string `json:"secondaryConnectionString,omitempty" tf:"secondary_connection_string"`

	SslPort int64 `json:"sslPort,omitempty" tf:"ssl_port"`
}

type RedisCacheParameters struct {

	// +kubebuilder:validation:Required
	Capacity int64 `json:"capacity" tf:"capacity"`

	// +kubebuilder:validation:Optional
	EnableNonSslPort *bool `json:"enableNonSslPort,omitempty" tf:"enable_non_ssl_port"`

	// +kubebuilder:validation:Required
	Family string `json:"family" tf:"family"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	MinimumTLSVersion *string `json:"minimumTlsVersion,omitempty" tf:"minimum_tls_version"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PatchSchedule []PatchScheduleParameters `json:"patchSchedule,omitempty" tf:"patch_schedule"`

	// +kubebuilder:validation:Optional
	PrivateStaticIPAddress *string `json:"privateStaticIpAddress,omitempty" tf:"private_static_ip_address"`

	// +kubebuilder:validation:Optional
	PublicNetworkAccessEnabled *bool `json:"publicNetworkAccessEnabled,omitempty" tf:"public_network_access_enabled"`

	// +kubebuilder:validation:Optional
	RedisConfiguration []RedisConfigurationParameters `json:"redisConfiguration,omitempty" tf:"redis_configuration"`

	// +kubebuilder:validation:Optional
	RedisVersion *string `json:"redisVersion,omitempty" tf:"redis_version"`

	// +kubebuilder:validation:Optional
	ReplicasPerMaster *int64 `json:"replicasPerMaster,omitempty" tf:"replicas_per_master"`

	// +kubebuilder:validation:Optional
	ReplicasPerPrimary *int64 `json:"replicasPerPrimary,omitempty" tf:"replicas_per_primary"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	ShardCount *int64 `json:"shardCount,omitempty" tf:"shard_count"`

	// +kubebuilder:validation:Required
	SkuName string `json:"skuName" tf:"sku_name"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TenantSettings map[string]string `json:"tenantSettings,omitempty" tf:"tenant_settings"`

	// +kubebuilder:validation:Optional
	Zones []string `json:"zones,omitempty" tf:"zones"`
}

type RedisConfigurationObservation struct {
	Maxclients int64 `json:"maxclients,omitempty" tf:"maxclients"`
}

type RedisConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	AofBackupEnabled *bool `json:"aofBackupEnabled,omitempty" tf:"aof_backup_enabled"`

	// +kubebuilder:validation:Optional
	AofStorageConnectionString0 *string `json:"aofStorageConnectionString0,omitempty" tf:"aof_storage_connection_string_0"`

	// +kubebuilder:validation:Optional
	AofStorageConnectionString1 *string `json:"aofStorageConnectionString1,omitempty" tf:"aof_storage_connection_string_1"`

	// +kubebuilder:validation:Optional
	EnableAuthentication *bool `json:"enableAuthentication,omitempty" tf:"enable_authentication"`

	// +kubebuilder:validation:Optional
	MaxfragmentationmemoryReserved *int64 `json:"maxfragmentationmemoryReserved,omitempty" tf:"maxfragmentationmemory_reserved"`

	// +kubebuilder:validation:Optional
	MaxmemoryDelta *int64 `json:"maxmemoryDelta,omitempty" tf:"maxmemory_delta"`

	// +kubebuilder:validation:Optional
	MaxmemoryPolicy *string `json:"maxmemoryPolicy,omitempty" tf:"maxmemory_policy"`

	// +kubebuilder:validation:Optional
	MaxmemoryReserved *int64 `json:"maxmemoryReserved,omitempty" tf:"maxmemory_reserved"`

	// +kubebuilder:validation:Optional
	NotifyKeyspaceEvents *string `json:"notifyKeyspaceEvents,omitempty" tf:"notify_keyspace_events"`

	// +kubebuilder:validation:Optional
	RdbBackupEnabled *bool `json:"rdbBackupEnabled,omitempty" tf:"rdb_backup_enabled"`

	// +kubebuilder:validation:Optional
	RdbBackupFrequency *int64 `json:"rdbBackupFrequency,omitempty" tf:"rdb_backup_frequency"`

	// +kubebuilder:validation:Optional
	RdbBackupMaxSnapshotCount *int64 `json:"rdbBackupMaxSnapshotCount,omitempty" tf:"rdb_backup_max_snapshot_count"`

	// +kubebuilder:validation:Optional
	RdbStorageConnectionString *string `json:"rdbStorageConnectionString,omitempty" tf:"rdb_storage_connection_string"`
}

// RedisCacheSpec defines the desired state of RedisCache
type RedisCacheSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RedisCacheParameters `json:"forProvider"`
}

// RedisCacheStatus defines the observed state of RedisCache.
type RedisCacheStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RedisCacheObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RedisCache is the Schema for the RedisCaches API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type RedisCache struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedisCacheSpec   `json:"spec"`
	Status            RedisCacheStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RedisCacheList contains a list of RedisCaches
type RedisCacheList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedisCache `json:"items"`
}

// Repository type metadata.
var (
	RedisCacheKind             = "RedisCache"
	RedisCacheGroupKind        = schema.GroupKind{Group: Group, Kind: RedisCacheKind}.String()
	RedisCacheKindAPIVersion   = RedisCacheKind + "." + GroupVersion.String()
	RedisCacheGroupVersionKind = GroupVersion.WithKind(RedisCacheKind)
)

func init() {
	SchemeBuilder.Register(&RedisCache{}, &RedisCacheList{})
}
