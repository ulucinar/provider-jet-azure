/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type RedisFirewallRuleObservation struct {
}

type RedisFirewallRuleParameters struct {

	// +kubebuilder:validation:Required
	EndIP string `json:"endIp" tf:"end_ip"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	RedisCacheName string `json:"redisCacheName" tf:"redis_cache_name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	StartIP string `json:"startIp" tf:"start_ip"`
}

// RedisFirewallRuleSpec defines the desired state of RedisFirewallRule
type RedisFirewallRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RedisFirewallRuleParameters `json:"forProvider"`
}

// RedisFirewallRuleStatus defines the observed state of RedisFirewallRule.
type RedisFirewallRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RedisFirewallRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RedisFirewallRule is the Schema for the RedisFirewallRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type RedisFirewallRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedisFirewallRuleSpec   `json:"spec"`
	Status            RedisFirewallRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RedisFirewallRuleList contains a list of RedisFirewallRules
type RedisFirewallRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedisFirewallRule `json:"items"`
}

// Repository type metadata.
var (
	RedisFirewallRuleKind             = "RedisFirewallRule"
	RedisFirewallRuleGroupKind        = schema.GroupKind{Group: Group, Kind: RedisFirewallRuleKind}.String()
	RedisFirewallRuleKindAPIVersion   = RedisFirewallRuleKind + "." + GroupVersion.String()
	RedisFirewallRuleGroupVersionKind = GroupVersion.WithKind(RedisFirewallRuleKind)
)

func init() {
	SchemeBuilder.Register(&RedisFirewallRule{}, &RedisFirewallRuleList{})
}
