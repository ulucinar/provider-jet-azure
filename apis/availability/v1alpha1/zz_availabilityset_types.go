/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AvailabilitySetObservation struct {
}

type AvailabilitySetParameters struct {

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	Managed *bool `json:"managed,omitempty" tf:"managed"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PlatformFaultDomainCount *int64 `json:"platformFaultDomainCount,omitempty" tf:"platform_fault_domain_count"`

	// +kubebuilder:validation:Optional
	PlatformUpdateDomainCount *int64 `json:"platformUpdateDomainCount,omitempty" tf:"platform_update_domain_count"`

	// +kubebuilder:validation:Optional
	ProximityPlacementGroupID *string `json:"proximityPlacementGroupId,omitempty" tf:"proximity_placement_group_id"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// AvailabilitySetSpec defines the desired state of AvailabilitySet
type AvailabilitySetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AvailabilitySetParameters `json:"forProvider"`
}

// AvailabilitySetStatus defines the observed state of AvailabilitySet.
type AvailabilitySetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AvailabilitySetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AvailabilitySet is the Schema for the AvailabilitySets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AvailabilitySet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AvailabilitySetSpec   `json:"spec"`
	Status            AvailabilitySetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AvailabilitySetList contains a list of AvailabilitySets
type AvailabilitySetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AvailabilitySet `json:"items"`
}

// Repository type metadata.
var (
	AvailabilitySetKind             = "AvailabilitySet"
	AvailabilitySetGroupKind        = schema.GroupKind{Group: Group, Kind: AvailabilitySetKind}.String()
	AvailabilitySetKindAPIVersion   = AvailabilitySetKind + "." + GroupVersion.String()
	AvailabilitySetGroupVersionKind = GroupVersion.WithKind(AvailabilitySetKind)
)

func init() {
	SchemeBuilder.Register(&AvailabilitySet{}, &AvailabilitySetList{})
}
