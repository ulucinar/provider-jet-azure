/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type SecurityCenterSettingObservation struct {
}

type SecurityCenterSettingParameters struct {

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`

	// +kubebuilder:validation:Required
	SettingName string `json:"settingName" tf:"setting_name"`
}

// SecurityCenterSettingSpec defines the desired state of SecurityCenterSetting
type SecurityCenterSettingSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SecurityCenterSettingParameters `json:"forProvider"`
}

// SecurityCenterSettingStatus defines the observed state of SecurityCenterSetting.
type SecurityCenterSettingStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SecurityCenterSettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityCenterSetting is the Schema for the SecurityCenterSettings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SecurityCenterSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityCenterSettingSpec   `json:"spec"`
	Status            SecurityCenterSettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityCenterSettingList contains a list of SecurityCenterSettings
type SecurityCenterSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityCenterSetting `json:"items"`
}

// Repository type metadata.
var (
	SecurityCenterSettingKind             = "SecurityCenterSetting"
	SecurityCenterSettingGroupKind        = schema.GroupKind{Group: Group, Kind: SecurityCenterSettingKind}.String()
	SecurityCenterSettingKindAPIVersion   = SecurityCenterSettingKind + "." + GroupVersion.String()
	SecurityCenterSettingGroupVersionKind = GroupVersion.WithKind(SecurityCenterSettingKind)
)

func init() {
	SchemeBuilder.Register(&SecurityCenterSetting{}, &SecurityCenterSettingList{})
}
