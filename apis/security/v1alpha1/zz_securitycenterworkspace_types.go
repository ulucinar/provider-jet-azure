/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type SecurityCenterWorkspaceObservation struct {
}

type SecurityCenterWorkspaceParameters struct {

	// +kubebuilder:validation:Required
	Scope string `json:"scope" tf:"scope"`

	// +kubebuilder:validation:Required
	WorkspaceID string `json:"workspaceId" tf:"workspace_id"`
}

// SecurityCenterWorkspaceSpec defines the desired state of SecurityCenterWorkspace
type SecurityCenterWorkspaceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SecurityCenterWorkspaceParameters `json:"forProvider"`
}

// SecurityCenterWorkspaceStatus defines the observed state of SecurityCenterWorkspace.
type SecurityCenterWorkspaceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SecurityCenterWorkspaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityCenterWorkspace is the Schema for the SecurityCenterWorkspaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SecurityCenterWorkspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityCenterWorkspaceSpec   `json:"spec"`
	Status            SecurityCenterWorkspaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityCenterWorkspaceList contains a list of SecurityCenterWorkspaces
type SecurityCenterWorkspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityCenterWorkspace `json:"items"`
}

// Repository type metadata.
var (
	SecurityCenterWorkspaceKind             = "SecurityCenterWorkspace"
	SecurityCenterWorkspaceGroupKind        = schema.GroupKind{Group: Group, Kind: SecurityCenterWorkspaceKind}.String()
	SecurityCenterWorkspaceKindAPIVersion   = SecurityCenterWorkspaceKind + "." + GroupVersion.String()
	SecurityCenterWorkspaceGroupVersionKind = GroupVersion.WithKind(SecurityCenterWorkspaceKind)
)

func init() {
	SchemeBuilder.Register(&SecurityCenterWorkspace{}, &SecurityCenterWorkspaceList{})
}
