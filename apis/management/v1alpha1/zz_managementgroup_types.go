/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ManagementGroupObservation struct {
}

type ManagementGroupParameters struct {

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`

	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`

	// +kubebuilder:validation:Optional
	ParentManagementGroupID *string `json:"parentManagementGroupId,omitempty" tf:"parent_management_group_id"`

	// +kubebuilder:validation:Optional
	SubscriptionIds []string `json:"subscriptionIds,omitempty" tf:"subscription_ids"`
}

// ManagementGroupSpec defines the desired state of ManagementGroup
type ManagementGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ManagementGroupParameters `json:"forProvider"`
}

// ManagementGroupStatus defines the observed state of ManagementGroup.
type ManagementGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ManagementGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementGroup is the Schema for the ManagementGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ManagementGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementGroupSpec   `json:"spec"`
	Status            ManagementGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementGroupList contains a list of ManagementGroups
type ManagementGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementGroup `json:"items"`
}

// Repository type metadata.
var (
	ManagementGroupKind             = "ManagementGroup"
	ManagementGroupGroupKind        = schema.GroupKind{Group: Group, Kind: ManagementGroupKind}.String()
	ManagementGroupKindAPIVersion   = ManagementGroupKind + "." + GroupVersion.String()
	ManagementGroupGroupVersionKind = GroupVersion.WithKind(ManagementGroupKind)
)

func init() {
	SchemeBuilder.Register(&ManagementGroup{}, &ManagementGroupList{})
}
