/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ManagementGroupTemplateDeploymentObservation struct {
	OutputContent string `json:"outputContent,omitempty" tf:"output_content"`
}

type ManagementGroupTemplateDeploymentParameters struct {

	// +kubebuilder:validation:Optional
	DebugLevel *string `json:"debugLevel,omitempty" tf:"debug_level"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	ManagementGroupID string `json:"managementGroupId" tf:"management_group_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	ParametersContent *string `json:"parametersContent,omitempty" tf:"parameters_content"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TemplateContent *string `json:"templateContent,omitempty" tf:"template_content"`

	// +kubebuilder:validation:Optional
	TemplateSpecVersionID *string `json:"templateSpecVersionId,omitempty" tf:"template_spec_version_id"`
}

// ManagementGroupTemplateDeploymentSpec defines the desired state of ManagementGroupTemplateDeployment
type ManagementGroupTemplateDeploymentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ManagementGroupTemplateDeploymentParameters `json:"forProvider"`
}

// ManagementGroupTemplateDeploymentStatus defines the observed state of ManagementGroupTemplateDeployment.
type ManagementGroupTemplateDeploymentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ManagementGroupTemplateDeploymentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementGroupTemplateDeployment is the Schema for the ManagementGroupTemplateDeployments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ManagementGroupTemplateDeployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementGroupTemplateDeploymentSpec   `json:"spec"`
	Status            ManagementGroupTemplateDeploymentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementGroupTemplateDeploymentList contains a list of ManagementGroupTemplateDeployments
type ManagementGroupTemplateDeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementGroupTemplateDeployment `json:"items"`
}

// Repository type metadata.
var (
	ManagementGroupTemplateDeploymentKind             = "ManagementGroupTemplateDeployment"
	ManagementGroupTemplateDeploymentGroupKind        = schema.GroupKind{Group: Group, Kind: ManagementGroupTemplateDeploymentKind}.String()
	ManagementGroupTemplateDeploymentKindAPIVersion   = ManagementGroupTemplateDeploymentKind + "." + GroupVersion.String()
	ManagementGroupTemplateDeploymentGroupVersionKind = GroupVersion.WithKind(ManagementGroupTemplateDeploymentKind)
)

func init() {
	SchemeBuilder.Register(&ManagementGroupTemplateDeployment{}, &ManagementGroupTemplateDeploymentList{})
}
