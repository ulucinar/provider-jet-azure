/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type SpringCloudAppRedisAssociationObservation struct {
}

type SpringCloudAppRedisAssociationParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	RedisAccessKey string `json:"redisAccessKey" tf:"redis_access_key"`

	// +kubebuilder:validation:Required
	RedisCacheID string `json:"redisCacheId" tf:"redis_cache_id"`

	// +kubebuilder:validation:Required
	SpringCloudAppID string `json:"springCloudAppId" tf:"spring_cloud_app_id"`

	// +kubebuilder:validation:Optional
	SslEnabled *bool `json:"sslEnabled,omitempty" tf:"ssl_enabled"`
}

// SpringCloudAppRedisAssociationSpec defines the desired state of SpringCloudAppRedisAssociation
type SpringCloudAppRedisAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SpringCloudAppRedisAssociationParameters `json:"forProvider"`
}

// SpringCloudAppRedisAssociationStatus defines the observed state of SpringCloudAppRedisAssociation.
type SpringCloudAppRedisAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SpringCloudAppRedisAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SpringCloudAppRedisAssociation is the Schema for the SpringCloudAppRedisAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SpringCloudAppRedisAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SpringCloudAppRedisAssociationSpec   `json:"spec"`
	Status            SpringCloudAppRedisAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SpringCloudAppRedisAssociationList contains a list of SpringCloudAppRedisAssociations
type SpringCloudAppRedisAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SpringCloudAppRedisAssociation `json:"items"`
}

// Repository type metadata.
var (
	SpringCloudAppRedisAssociationKind             = "SpringCloudAppRedisAssociation"
	SpringCloudAppRedisAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: SpringCloudAppRedisAssociationKind}.String()
	SpringCloudAppRedisAssociationKindAPIVersion   = SpringCloudAppRedisAssociationKind + "." + GroupVersion.String()
	SpringCloudAppRedisAssociationGroupVersionKind = GroupVersion.WithKind(SpringCloudAppRedisAssociationKind)
)

func init() {
	SchemeBuilder.Register(&SpringCloudAppRedisAssociation{}, &SpringCloudAppRedisAssociationList{})
}
