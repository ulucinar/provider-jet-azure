/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type PersistentDiskObservation struct {
}

type PersistentDiskParameters struct {

	// +kubebuilder:validation:Optional
	MountPath *string `json:"mountPath,omitempty" tf:"mount_path"`

	// +kubebuilder:validation:Required
	SizeInGb int64 `json:"sizeInGb" tf:"size_in_gb"`
}

type SpringCloudAppObservation struct {
	Fqdn string `json:"fqdn,omitempty" tf:"fqdn"`

	URL string `json:"url,omitempty" tf:"url"`
}

type SpringCloudAppParameters struct {

	// +kubebuilder:validation:Optional
	HTTPSOnly *bool `json:"httpsOnly,omitempty" tf:"https_only"`

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Optional
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PersistentDisk []PersistentDiskParameters `json:"persistentDisk,omitempty" tf:"persistent_disk"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	ServiceName string `json:"serviceName" tf:"service_name"`

	// +kubebuilder:validation:Optional
	TLSEnabled *bool `json:"tlsEnabled,omitempty" tf:"tls_enabled"`
}

// SpringCloudAppSpec defines the desired state of SpringCloudApp
type SpringCloudAppSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SpringCloudAppParameters `json:"forProvider"`
}

// SpringCloudAppStatus defines the observed state of SpringCloudApp.
type SpringCloudAppStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SpringCloudAppObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SpringCloudApp is the Schema for the SpringCloudApps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SpringCloudApp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SpringCloudAppSpec   `json:"spec"`
	Status            SpringCloudAppStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SpringCloudAppList contains a list of SpringCloudApps
type SpringCloudAppList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SpringCloudApp `json:"items"`
}

// Repository type metadata.
var (
	SpringCloudAppKind             = "SpringCloudApp"
	SpringCloudAppGroupKind        = schema.GroupKind{Group: Group, Kind: SpringCloudAppKind}.String()
	SpringCloudAppKindAPIVersion   = SpringCloudAppKind + "." + GroupVersion.String()
	SpringCloudAppGroupVersionKind = GroupVersion.WithKind(SpringCloudAppKind)
)

func init() {
	SchemeBuilder.Register(&SpringCloudApp{}, &SpringCloudAppList{})
}
