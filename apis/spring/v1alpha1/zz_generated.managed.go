/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this SpringCloudActiveDeployment.
func (mg *SpringCloudActiveDeployment) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this SpringCloudActiveDeployment.
func (mg *SpringCloudActiveDeployment) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this SpringCloudActiveDeployment.
func (mg *SpringCloudActiveDeployment) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this SpringCloudActiveDeployment.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *SpringCloudActiveDeployment) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this SpringCloudActiveDeployment.
func (mg *SpringCloudActiveDeployment) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this SpringCloudActiveDeployment.
func (mg *SpringCloudActiveDeployment) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this SpringCloudActiveDeployment.
func (mg *SpringCloudActiveDeployment) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this SpringCloudActiveDeployment.
func (mg *SpringCloudActiveDeployment) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this SpringCloudActiveDeployment.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *SpringCloudActiveDeployment) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this SpringCloudActiveDeployment.
func (mg *SpringCloudActiveDeployment) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this SpringCloudApp.
func (mg *SpringCloudApp) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this SpringCloudApp.
func (mg *SpringCloudApp) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this SpringCloudApp.
func (mg *SpringCloudApp) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this SpringCloudApp.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *SpringCloudApp) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this SpringCloudApp.
func (mg *SpringCloudApp) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this SpringCloudApp.
func (mg *SpringCloudApp) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this SpringCloudApp.
func (mg *SpringCloudApp) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this SpringCloudApp.
func (mg *SpringCloudApp) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this SpringCloudApp.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *SpringCloudApp) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this SpringCloudApp.
func (mg *SpringCloudApp) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this SpringCloudAppCosmosdbAssociation.
func (mg *SpringCloudAppCosmosdbAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this SpringCloudAppCosmosdbAssociation.
func (mg *SpringCloudAppCosmosdbAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this SpringCloudAppCosmosdbAssociation.
func (mg *SpringCloudAppCosmosdbAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this SpringCloudAppCosmosdbAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *SpringCloudAppCosmosdbAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this SpringCloudAppCosmosdbAssociation.
func (mg *SpringCloudAppCosmosdbAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this SpringCloudAppCosmosdbAssociation.
func (mg *SpringCloudAppCosmosdbAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this SpringCloudAppCosmosdbAssociation.
func (mg *SpringCloudAppCosmosdbAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this SpringCloudAppCosmosdbAssociation.
func (mg *SpringCloudAppCosmosdbAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this SpringCloudAppCosmosdbAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *SpringCloudAppCosmosdbAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this SpringCloudAppCosmosdbAssociation.
func (mg *SpringCloudAppCosmosdbAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this SpringCloudAppMysqlAssociation.
func (mg *SpringCloudAppMysqlAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this SpringCloudAppMysqlAssociation.
func (mg *SpringCloudAppMysqlAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this SpringCloudAppMysqlAssociation.
func (mg *SpringCloudAppMysqlAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this SpringCloudAppMysqlAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *SpringCloudAppMysqlAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this SpringCloudAppMysqlAssociation.
func (mg *SpringCloudAppMysqlAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this SpringCloudAppMysqlAssociation.
func (mg *SpringCloudAppMysqlAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this SpringCloudAppMysqlAssociation.
func (mg *SpringCloudAppMysqlAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this SpringCloudAppMysqlAssociation.
func (mg *SpringCloudAppMysqlAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this SpringCloudAppMysqlAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *SpringCloudAppMysqlAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this SpringCloudAppMysqlAssociation.
func (mg *SpringCloudAppMysqlAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this SpringCloudAppRedisAssociation.
func (mg *SpringCloudAppRedisAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this SpringCloudAppRedisAssociation.
func (mg *SpringCloudAppRedisAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this SpringCloudAppRedisAssociation.
func (mg *SpringCloudAppRedisAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this SpringCloudAppRedisAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *SpringCloudAppRedisAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this SpringCloudAppRedisAssociation.
func (mg *SpringCloudAppRedisAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this SpringCloudAppRedisAssociation.
func (mg *SpringCloudAppRedisAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this SpringCloudAppRedisAssociation.
func (mg *SpringCloudAppRedisAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this SpringCloudAppRedisAssociation.
func (mg *SpringCloudAppRedisAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this SpringCloudAppRedisAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *SpringCloudAppRedisAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this SpringCloudAppRedisAssociation.
func (mg *SpringCloudAppRedisAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this SpringCloudCertificate.
func (mg *SpringCloudCertificate) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this SpringCloudCertificate.
func (mg *SpringCloudCertificate) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this SpringCloudCertificate.
func (mg *SpringCloudCertificate) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this SpringCloudCertificate.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *SpringCloudCertificate) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this SpringCloudCertificate.
func (mg *SpringCloudCertificate) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this SpringCloudCertificate.
func (mg *SpringCloudCertificate) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this SpringCloudCertificate.
func (mg *SpringCloudCertificate) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this SpringCloudCertificate.
func (mg *SpringCloudCertificate) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this SpringCloudCertificate.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *SpringCloudCertificate) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this SpringCloudCertificate.
func (mg *SpringCloudCertificate) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this SpringCloudCustomDomain.
func (mg *SpringCloudCustomDomain) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this SpringCloudCustomDomain.
func (mg *SpringCloudCustomDomain) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this SpringCloudCustomDomain.
func (mg *SpringCloudCustomDomain) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this SpringCloudCustomDomain.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *SpringCloudCustomDomain) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this SpringCloudCustomDomain.
func (mg *SpringCloudCustomDomain) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this SpringCloudCustomDomain.
func (mg *SpringCloudCustomDomain) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this SpringCloudCustomDomain.
func (mg *SpringCloudCustomDomain) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this SpringCloudCustomDomain.
func (mg *SpringCloudCustomDomain) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this SpringCloudCustomDomain.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *SpringCloudCustomDomain) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this SpringCloudCustomDomain.
func (mg *SpringCloudCustomDomain) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this SpringCloudJavaDeployment.
func (mg *SpringCloudJavaDeployment) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this SpringCloudJavaDeployment.
func (mg *SpringCloudJavaDeployment) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this SpringCloudJavaDeployment.
func (mg *SpringCloudJavaDeployment) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this SpringCloudJavaDeployment.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *SpringCloudJavaDeployment) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this SpringCloudJavaDeployment.
func (mg *SpringCloudJavaDeployment) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this SpringCloudJavaDeployment.
func (mg *SpringCloudJavaDeployment) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this SpringCloudJavaDeployment.
func (mg *SpringCloudJavaDeployment) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this SpringCloudJavaDeployment.
func (mg *SpringCloudJavaDeployment) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this SpringCloudJavaDeployment.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *SpringCloudJavaDeployment) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this SpringCloudJavaDeployment.
func (mg *SpringCloudJavaDeployment) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this SpringCloudService.
func (mg *SpringCloudService) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this SpringCloudService.
func (mg *SpringCloudService) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this SpringCloudService.
func (mg *SpringCloudService) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this SpringCloudService.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *SpringCloudService) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this SpringCloudService.
func (mg *SpringCloudService) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this SpringCloudService.
func (mg *SpringCloudService) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this SpringCloudService.
func (mg *SpringCloudService) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this SpringCloudService.
func (mg *SpringCloudService) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this SpringCloudService.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *SpringCloudService) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this SpringCloudService.
func (mg *SpringCloudService) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
