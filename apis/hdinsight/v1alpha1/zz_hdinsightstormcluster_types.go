/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type HdinsightStormClusterComponentVersionObservation struct {
}

type HdinsightStormClusterComponentVersionParameters struct {

	// +kubebuilder:validation:Required
	Storm string `json:"storm" tf:"storm"`
}

type HdinsightStormClusterGatewayObservation struct {
}

type HdinsightStormClusterGatewayParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type HdinsightStormClusterMetastoresAmbariObservation struct {
}

type HdinsightStormClusterMetastoresAmbariParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Server string `json:"server" tf:"server"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type HdinsightStormClusterMetastoresHiveObservation struct {
}

type HdinsightStormClusterMetastoresHiveParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Server string `json:"server" tf:"server"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type HdinsightStormClusterMetastoresObservation struct {
}

type HdinsightStormClusterMetastoresOozieObservation struct {
}

type HdinsightStormClusterMetastoresOozieParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Server string `json:"server" tf:"server"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type HdinsightStormClusterMetastoresParameters struct {

	// +kubebuilder:validation:Optional
	Ambari []HdinsightStormClusterMetastoresAmbariParameters `json:"ambari,omitempty" tf:"ambari"`

	// +kubebuilder:validation:Optional
	Hive []HdinsightStormClusterMetastoresHiveParameters `json:"hive,omitempty" tf:"hive"`

	// +kubebuilder:validation:Optional
	Oozie []HdinsightStormClusterMetastoresOozieParameters `json:"oozie,omitempty" tf:"oozie"`
}

type HdinsightStormClusterMonitorObservation struct {
}

type HdinsightStormClusterMonitorParameters struct {

	// +kubebuilder:validation:Required
	LogAnalyticsWorkspaceID string `json:"logAnalyticsWorkspaceId" tf:"log_analytics_workspace_id"`

	// +kubebuilder:validation:Required
	PrimaryKey string `json:"primaryKey" tf:"primary_key"`
}

type HdinsightStormClusterObservation struct {
	HTTPSEndpoint string `json:"httpsEndpoint,omitempty" tf:"https_endpoint"`

	SSHEndpoint string `json:"sshEndpoint,omitempty" tf:"ssh_endpoint"`
}

type HdinsightStormClusterParameters struct {

	// +kubebuilder:validation:Required
	ClusterVersion string `json:"clusterVersion" tf:"cluster_version"`

	// +kubebuilder:validation:Required
	ComponentVersion []HdinsightStormClusterComponentVersionParameters `json:"componentVersion" tf:"component_version"`

	// +kubebuilder:validation:Required
	Gateway []HdinsightStormClusterGatewayParameters `json:"gateway" tf:"gateway"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	Metastores []HdinsightStormClusterMetastoresParameters `json:"metastores,omitempty" tf:"metastores"`

	// +kubebuilder:validation:Optional
	Monitor []HdinsightStormClusterMonitorParameters `json:"monitor,omitempty" tf:"monitor"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Roles []HdinsightStormClusterRolesParameters `json:"roles" tf:"roles"`

	// +kubebuilder:validation:Optional
	StorageAccount []HdinsightStormClusterStorageAccountParameters `json:"storageAccount,omitempty" tf:"storage_account"`

	// +kubebuilder:validation:Optional
	TLSMinVersion *string `json:"tlsMinVersion,omitempty" tf:"tls_min_version"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	Tier string `json:"tier" tf:"tier"`
}

type HdinsightStormClusterRolesHeadNodeObservation struct {
}

type HdinsightStormClusterRolesHeadNodeParameters struct {

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`

	// +kubebuilder:validation:Required
	VMSize string `json:"vmSize" tf:"vm_size"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type HdinsightStormClusterRolesObservation struct {
}

type HdinsightStormClusterRolesParameters struct {

	// +kubebuilder:validation:Required
	HeadNode []HdinsightStormClusterRolesHeadNodeParameters `json:"headNode" tf:"head_node"`

	// +kubebuilder:validation:Required
	WorkerNode []HdinsightStormClusterRolesWorkerNodeParameters `json:"workerNode" tf:"worker_node"`

	// +kubebuilder:validation:Required
	ZookeeperNode []HdinsightStormClusterRolesZookeeperNodeParameters `json:"zookeeperNode" tf:"zookeeper_node"`
}

type HdinsightStormClusterRolesWorkerNodeObservation struct {
}

type HdinsightStormClusterRolesWorkerNodeParameters struct {

	// +kubebuilder:validation:Optional
	MinInstanceCount *int64 `json:"minInstanceCount,omitempty" tf:"min_instance_count"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Required
	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`

	// +kubebuilder:validation:Required
	VMSize string `json:"vmSize" tf:"vm_size"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type HdinsightStormClusterRolesZookeeperNodeObservation struct {
}

type HdinsightStormClusterRolesZookeeperNodeParameters struct {

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`

	// +kubebuilder:validation:Required
	VMSize string `json:"vmSize" tf:"vm_size"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type HdinsightStormClusterStorageAccountObservation struct {
}

type HdinsightStormClusterStorageAccountParameters struct {

	// +kubebuilder:validation:Required
	IsDefault bool `json:"isDefault" tf:"is_default"`

	// +kubebuilder:validation:Required
	StorageAccountKey string `json:"storageAccountKey" tf:"storage_account_key"`

	// +kubebuilder:validation:Required
	StorageContainerID string `json:"storageContainerId" tf:"storage_container_id"`
}

// HdinsightStormClusterSpec defines the desired state of HdinsightStormCluster
type HdinsightStormClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       HdinsightStormClusterParameters `json:"forProvider"`
}

// HdinsightStormClusterStatus defines the observed state of HdinsightStormCluster.
type HdinsightStormClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          HdinsightStormClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightStormCluster is the Schema for the HdinsightStormClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HdinsightStormCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HdinsightStormClusterSpec   `json:"spec"`
	Status            HdinsightStormClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightStormClusterList contains a list of HdinsightStormClusters
type HdinsightStormClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HdinsightStormCluster `json:"items"`
}

// Repository type metadata.
var (
	HdinsightStormClusterKind             = "HdinsightStormCluster"
	HdinsightStormClusterGroupKind        = schema.GroupKind{Group: Group, Kind: HdinsightStormClusterKind}.String()
	HdinsightStormClusterKindAPIVersion   = HdinsightStormClusterKind + "." + GroupVersion.String()
	HdinsightStormClusterGroupVersionKind = GroupVersion.WithKind(HdinsightStormClusterKind)
)

func init() {
	SchemeBuilder.Register(&HdinsightStormCluster{}, &HdinsightStormClusterList{})
}
