/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutoscaleRecurrenceObservation struct {
}

type AutoscaleRecurrenceParameters struct {

	// +kubebuilder:validation:Required
	Schedule []RecurrenceScheduleParameters `json:"schedule" tf:"schedule"`

	// +kubebuilder:validation:Required
	Timezone string `json:"timezone" tf:"timezone"`
}

type HdinsightHbaseClusterComponentVersionObservation struct {
}

type HdinsightHbaseClusterComponentVersionParameters struct {

	// +kubebuilder:validation:Required
	Hbase string `json:"hbase" tf:"hbase"`
}

type HdinsightHbaseClusterGatewayObservation struct {
}

type HdinsightHbaseClusterGatewayParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type HdinsightHbaseClusterMetastoresObservation struct {
}

type HdinsightHbaseClusterMetastoresParameters struct {

	// +kubebuilder:validation:Optional
	Ambari []MetastoresAmbariParameters `json:"ambari,omitempty" tf:"ambari"`

	// +kubebuilder:validation:Optional
	Hive []MetastoresHiveParameters `json:"hive,omitempty" tf:"hive"`

	// +kubebuilder:validation:Optional
	Oozie []MetastoresOozieParameters `json:"oozie,omitempty" tf:"oozie"`
}

type HdinsightHbaseClusterMonitorObservation struct {
}

type HdinsightHbaseClusterMonitorParameters struct {

	// +kubebuilder:validation:Required
	LogAnalyticsWorkspaceID string `json:"logAnalyticsWorkspaceId" tf:"log_analytics_workspace_id"`

	// +kubebuilder:validation:Required
	PrimaryKey string `json:"primaryKey" tf:"primary_key"`
}

type HdinsightHbaseClusterObservation struct {
	HTTPSEndpoint string `json:"httpsEndpoint,omitempty" tf:"https_endpoint"`

	SSHEndpoint string `json:"sshEndpoint,omitempty" tf:"ssh_endpoint"`
}

type HdinsightHbaseClusterParameters struct {

	// +kubebuilder:validation:Required
	ClusterVersion string `json:"clusterVersion" tf:"cluster_version"`

	// +kubebuilder:validation:Required
	ComponentVersion []HdinsightHbaseClusterComponentVersionParameters `json:"componentVersion" tf:"component_version"`

	// +kubebuilder:validation:Required
	Gateway []HdinsightHbaseClusterGatewayParameters `json:"gateway" tf:"gateway"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	Metastores []HdinsightHbaseClusterMetastoresParameters `json:"metastores,omitempty" tf:"metastores"`

	// +kubebuilder:validation:Optional
	Monitor []HdinsightHbaseClusterMonitorParameters `json:"monitor,omitempty" tf:"monitor"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Roles []HdinsightHbaseClusterRolesParameters `json:"roles" tf:"roles"`

	// +kubebuilder:validation:Optional
	StorageAccount []HdinsightHbaseClusterStorageAccountParameters `json:"storageAccount,omitempty" tf:"storage_account"`

	// +kubebuilder:validation:Optional
	StorageAccountGen2 []HdinsightHbaseClusterStorageAccountGen2Parameters `json:"storageAccountGen2,omitempty" tf:"storage_account_gen2"`

	// +kubebuilder:validation:Optional
	TLSMinVersion *string `json:"tlsMinVersion,omitempty" tf:"tls_min_version"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	Tier string `json:"tier" tf:"tier"`
}

type HdinsightHbaseClusterRolesObservation struct {
}

type HdinsightHbaseClusterRolesParameters struct {

	// +kubebuilder:validation:Required
	HeadNode []RolesHeadNodeParameters `json:"headNode" tf:"head_node"`

	// +kubebuilder:validation:Required
	WorkerNode []RolesWorkerNodeParameters `json:"workerNode" tf:"worker_node"`

	// +kubebuilder:validation:Required
	ZookeeperNode []RolesZookeeperNodeParameters `json:"zookeeperNode" tf:"zookeeper_node"`
}

type HdinsightHbaseClusterStorageAccountGen2Observation struct {
}

type HdinsightHbaseClusterStorageAccountGen2Parameters struct {

	// +kubebuilder:validation:Required
	FilesystemID string `json:"filesystemId" tf:"filesystem_id"`

	// +kubebuilder:validation:Required
	IsDefault bool `json:"isDefault" tf:"is_default"`

	// +kubebuilder:validation:Required
	ManagedIdentityResourceID string `json:"managedIdentityResourceId" tf:"managed_identity_resource_id"`

	// +kubebuilder:validation:Required
	StorageResourceID string `json:"storageResourceId" tf:"storage_resource_id"`
}

type HdinsightHbaseClusterStorageAccountObservation struct {
}

type HdinsightHbaseClusterStorageAccountParameters struct {

	// +kubebuilder:validation:Required
	IsDefault bool `json:"isDefault" tf:"is_default"`

	// +kubebuilder:validation:Required
	StorageAccountKey string `json:"storageAccountKey" tf:"storage_account_key"`

	// +kubebuilder:validation:Required
	StorageContainerID string `json:"storageContainerId" tf:"storage_container_id"`
}

type MetastoresAmbariObservation struct {
}

type MetastoresAmbariParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Server string `json:"server" tf:"server"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type MetastoresHiveObservation struct {
}

type MetastoresHiveParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Server string `json:"server" tf:"server"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type MetastoresOozieObservation struct {
}

type MetastoresOozieParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Server string `json:"server" tf:"server"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type RecurrenceScheduleObservation struct {
}

type RecurrenceScheduleParameters struct {

	// +kubebuilder:validation:Required
	Days []string `json:"days" tf:"days"`

	// +kubebuilder:validation:Required
	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	// +kubebuilder:validation:Required
	Time string `json:"time" tf:"time"`
}

type RolesHeadNodeObservation struct {
}

type RolesHeadNodeParameters struct {

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`

	// +kubebuilder:validation:Required
	VMSize string `json:"vmSize" tf:"vm_size"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type RolesWorkerNodeObservation struct {
}

type RolesWorkerNodeParameters struct {

	// +kubebuilder:validation:Optional
	Autoscale []WorkerNodeAutoscaleParameters `json:"autoscale,omitempty" tf:"autoscale"`

	// +kubebuilder:validation:Optional
	MinInstanceCount *int64 `json:"minInstanceCount,omitempty" tf:"min_instance_count"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Required
	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`

	// +kubebuilder:validation:Required
	VMSize string `json:"vmSize" tf:"vm_size"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type RolesZookeeperNodeObservation struct {
}

type RolesZookeeperNodeParameters struct {

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`

	// +kubebuilder:validation:Required
	VMSize string `json:"vmSize" tf:"vm_size"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type WorkerNodeAutoscaleObservation struct {
}

type WorkerNodeAutoscaleParameters struct {

	// +kubebuilder:validation:Optional
	Recurrence []AutoscaleRecurrenceParameters `json:"recurrence,omitempty" tf:"recurrence"`
}

// HdinsightHbaseClusterSpec defines the desired state of HdinsightHbaseCluster
type HdinsightHbaseClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       HdinsightHbaseClusterParameters `json:"forProvider"`
}

// HdinsightHbaseClusterStatus defines the observed state of HdinsightHbaseCluster.
type HdinsightHbaseClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          HdinsightHbaseClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightHbaseCluster is the Schema for the HdinsightHbaseClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HdinsightHbaseCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HdinsightHbaseClusterSpec   `json:"spec"`
	Status            HdinsightHbaseClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightHbaseClusterList contains a list of HdinsightHbaseClusters
type HdinsightHbaseClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HdinsightHbaseCluster `json:"items"`
}

// Repository type metadata.
var (
	HdinsightHbaseClusterKind             = "HdinsightHbaseCluster"
	HdinsightHbaseClusterGroupKind        = schema.GroupKind{Group: Group, Kind: HdinsightHbaseClusterKind}.String()
	HdinsightHbaseClusterKindAPIVersion   = HdinsightHbaseClusterKind + "." + GroupVersion.String()
	HdinsightHbaseClusterGroupVersionKind = GroupVersion.WithKind(HdinsightHbaseClusterKind)
)

func init() {
	SchemeBuilder.Register(&HdinsightHbaseCluster{}, &HdinsightHbaseClusterList{})
}
