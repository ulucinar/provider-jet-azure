/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutoscaleCapacityObservation struct {
}

type AutoscaleCapacityParameters struct {

	// +kubebuilder:validation:Required
	MaxInstanceCount int64 `json:"maxInstanceCount" tf:"max_instance_count"`

	// +kubebuilder:validation:Required
	MinInstanceCount int64 `json:"minInstanceCount" tf:"min_instance_count"`
}

type AutoscaleRecurrenceScheduleObservation struct {
}

type AutoscaleRecurrenceScheduleParameters struct {

	// +kubebuilder:validation:Required
	Days []string `json:"days" tf:"days"`

	// +kubebuilder:validation:Required
	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	// +kubebuilder:validation:Required
	Time string `json:"time" tf:"time"`
}

type HdinsightInteractiveQueryClusterComponentVersionObservation struct {
}

type HdinsightInteractiveQueryClusterComponentVersionParameters struct {

	// +kubebuilder:validation:Required
	InteractiveHive string `json:"interactiveHive" tf:"interactive_hive"`
}

type HdinsightInteractiveQueryClusterGatewayObservation struct {
}

type HdinsightInteractiveQueryClusterGatewayParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type HdinsightInteractiveQueryClusterMetastoresAmbariObservation struct {
}

type HdinsightInteractiveQueryClusterMetastoresAmbariParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Server string `json:"server" tf:"server"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type HdinsightInteractiveQueryClusterMetastoresHiveObservation struct {
}

type HdinsightInteractiveQueryClusterMetastoresHiveParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Server string `json:"server" tf:"server"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type HdinsightInteractiveQueryClusterMetastoresObservation struct {
}

type HdinsightInteractiveQueryClusterMetastoresOozieObservation struct {
}

type HdinsightInteractiveQueryClusterMetastoresOozieParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Server string `json:"server" tf:"server"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type HdinsightInteractiveQueryClusterMetastoresParameters struct {

	// +kubebuilder:validation:Optional
	Ambari []HdinsightInteractiveQueryClusterMetastoresAmbariParameters `json:"ambari,omitempty" tf:"ambari"`

	// +kubebuilder:validation:Optional
	Hive []HdinsightInteractiveQueryClusterMetastoresHiveParameters `json:"hive,omitempty" tf:"hive"`

	// +kubebuilder:validation:Optional
	Oozie []HdinsightInteractiveQueryClusterMetastoresOozieParameters `json:"oozie,omitempty" tf:"oozie"`
}

type HdinsightInteractiveQueryClusterMonitorObservation struct {
}

type HdinsightInteractiveQueryClusterMonitorParameters struct {

	// +kubebuilder:validation:Required
	LogAnalyticsWorkspaceID string `json:"logAnalyticsWorkspaceId" tf:"log_analytics_workspace_id"`

	// +kubebuilder:validation:Required
	PrimaryKey string `json:"primaryKey" tf:"primary_key"`
}

type HdinsightInteractiveQueryClusterNetworkObservation struct {
}

type HdinsightInteractiveQueryClusterNetworkParameters struct {

	// +kubebuilder:validation:Optional
	ConnectionDirection *string `json:"connectionDirection,omitempty" tf:"connection_direction"`

	// +kubebuilder:validation:Optional
	PrivateLinkEnabled *bool `json:"privateLinkEnabled,omitempty" tf:"private_link_enabled"`
}

type HdinsightInteractiveQueryClusterObservation struct {
	HTTPSEndpoint string `json:"httpsEndpoint,omitempty" tf:"https_endpoint"`

	SSHEndpoint string `json:"sshEndpoint,omitempty" tf:"ssh_endpoint"`
}

type HdinsightInteractiveQueryClusterParameters struct {

	// +kubebuilder:validation:Required
	ClusterVersion string `json:"clusterVersion" tf:"cluster_version"`

	// +kubebuilder:validation:Required
	ComponentVersion []HdinsightInteractiveQueryClusterComponentVersionParameters `json:"componentVersion" tf:"component_version"`

	// +kubebuilder:validation:Optional
	EncryptionInTransitEnabled *bool `json:"encryptionInTransitEnabled,omitempty" tf:"encryption_in_transit_enabled"`

	// +kubebuilder:validation:Required
	Gateway []HdinsightInteractiveQueryClusterGatewayParameters `json:"gateway" tf:"gateway"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	Metastores []HdinsightInteractiveQueryClusterMetastoresParameters `json:"metastores,omitempty" tf:"metastores"`

	// +kubebuilder:validation:Optional
	Monitor []HdinsightInteractiveQueryClusterMonitorParameters `json:"monitor,omitempty" tf:"monitor"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Network []HdinsightInteractiveQueryClusterNetworkParameters `json:"network,omitempty" tf:"network"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Roles []HdinsightInteractiveQueryClusterRolesParameters `json:"roles" tf:"roles"`

	// +kubebuilder:validation:Optional
	StorageAccount []HdinsightInteractiveQueryClusterStorageAccountParameters `json:"storageAccount,omitempty" tf:"storage_account"`

	// +kubebuilder:validation:Optional
	StorageAccountGen2 []HdinsightInteractiveQueryClusterStorageAccountGen2Parameters `json:"storageAccountGen2,omitempty" tf:"storage_account_gen2"`

	// +kubebuilder:validation:Optional
	TLSMinVersion *string `json:"tlsMinVersion,omitempty" tf:"tls_min_version"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	Tier string `json:"tier" tf:"tier"`
}

type HdinsightInteractiveQueryClusterRolesHeadNodeObservation struct {
}

type HdinsightInteractiveQueryClusterRolesHeadNodeParameters struct {

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`

	// +kubebuilder:validation:Required
	VMSize string `json:"vmSize" tf:"vm_size"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type HdinsightInteractiveQueryClusterRolesObservation struct {
}

type HdinsightInteractiveQueryClusterRolesParameters struct {

	// +kubebuilder:validation:Required
	HeadNode []HdinsightInteractiveQueryClusterRolesHeadNodeParameters `json:"headNode" tf:"head_node"`

	// +kubebuilder:validation:Required
	WorkerNode []HdinsightInteractiveQueryClusterRolesWorkerNodeParameters `json:"workerNode" tf:"worker_node"`

	// +kubebuilder:validation:Required
	ZookeeperNode []HdinsightInteractiveQueryClusterRolesZookeeperNodeParameters `json:"zookeeperNode" tf:"zookeeper_node"`
}

type HdinsightInteractiveQueryClusterRolesWorkerNodeObservation struct {
}

type HdinsightInteractiveQueryClusterRolesWorkerNodeParameters struct {

	// +kubebuilder:validation:Optional
	Autoscale []RolesWorkerNodeAutoscaleParameters `json:"autoscale,omitempty" tf:"autoscale"`

	// +kubebuilder:validation:Optional
	MinInstanceCount *int64 `json:"minInstanceCount,omitempty" tf:"min_instance_count"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Required
	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`

	// +kubebuilder:validation:Required
	VMSize string `json:"vmSize" tf:"vm_size"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type HdinsightInteractiveQueryClusterRolesZookeeperNodeObservation struct {
}

type HdinsightInteractiveQueryClusterRolesZookeeperNodeParameters struct {

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`

	// +kubebuilder:validation:Required
	VMSize string `json:"vmSize" tf:"vm_size"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type HdinsightInteractiveQueryClusterStorageAccountGen2Observation struct {
}

type HdinsightInteractiveQueryClusterStorageAccountGen2Parameters struct {

	// +kubebuilder:validation:Required
	FilesystemID string `json:"filesystemId" tf:"filesystem_id"`

	// +kubebuilder:validation:Required
	IsDefault bool `json:"isDefault" tf:"is_default"`

	// +kubebuilder:validation:Required
	ManagedIdentityResourceID string `json:"managedIdentityResourceId" tf:"managed_identity_resource_id"`

	// +kubebuilder:validation:Required
	StorageResourceID string `json:"storageResourceId" tf:"storage_resource_id"`
}

type HdinsightInteractiveQueryClusterStorageAccountObservation struct {
}

type HdinsightInteractiveQueryClusterStorageAccountParameters struct {

	// +kubebuilder:validation:Required
	IsDefault bool `json:"isDefault" tf:"is_default"`

	// +kubebuilder:validation:Required
	StorageAccountKey string `json:"storageAccountKey" tf:"storage_account_key"`

	// +kubebuilder:validation:Required
	StorageContainerID string `json:"storageContainerId" tf:"storage_container_id"`
}

type RolesWorkerNodeAutoscaleObservation struct {
}

type RolesWorkerNodeAutoscaleParameters struct {

	// +kubebuilder:validation:Optional
	Capacity []AutoscaleCapacityParameters `json:"capacity,omitempty" tf:"capacity"`

	// +kubebuilder:validation:Optional
	Recurrence []WorkerNodeAutoscaleRecurrenceParameters `json:"recurrence,omitempty" tf:"recurrence"`
}

type WorkerNodeAutoscaleRecurrenceObservation struct {
}

type WorkerNodeAutoscaleRecurrenceParameters struct {

	// +kubebuilder:validation:Required
	Schedule []AutoscaleRecurrenceScheduleParameters `json:"schedule" tf:"schedule"`

	// +kubebuilder:validation:Required
	Timezone string `json:"timezone" tf:"timezone"`
}

// HdinsightInteractiveQueryClusterSpec defines the desired state of HdinsightInteractiveQueryCluster
type HdinsightInteractiveQueryClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       HdinsightInteractiveQueryClusterParameters `json:"forProvider"`
}

// HdinsightInteractiveQueryClusterStatus defines the observed state of HdinsightInteractiveQueryCluster.
type HdinsightInteractiveQueryClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          HdinsightInteractiveQueryClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightInteractiveQueryCluster is the Schema for the HdinsightInteractiveQueryClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HdinsightInteractiveQueryCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HdinsightInteractiveQueryClusterSpec   `json:"spec"`
	Status            HdinsightInteractiveQueryClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightInteractiveQueryClusterList contains a list of HdinsightInteractiveQueryClusters
type HdinsightInteractiveQueryClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HdinsightInteractiveQueryCluster `json:"items"`
}

// Repository type metadata.
var (
	HdinsightInteractiveQueryClusterKind             = "HdinsightInteractiveQueryCluster"
	HdinsightInteractiveQueryClusterGroupKind        = schema.GroupKind{Group: Group, Kind: HdinsightInteractiveQueryClusterKind}.String()
	HdinsightInteractiveQueryClusterKindAPIVersion   = HdinsightInteractiveQueryClusterKind + "." + GroupVersion.String()
	HdinsightInteractiveQueryClusterGroupVersionKind = GroupVersion.WithKind(HdinsightInteractiveQueryClusterKind)
)

func init() {
	SchemeBuilder.Register(&HdinsightInteractiveQueryCluster{}, &HdinsightInteractiveQueryClusterList{})
}
