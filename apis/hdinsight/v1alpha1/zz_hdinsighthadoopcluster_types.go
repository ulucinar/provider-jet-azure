/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AmbariObservation struct {
}

type AmbariParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Server string `json:"server" tf:"server"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type AutoscaleObservation struct {
}

type AutoscaleParameters struct {

	// +kubebuilder:validation:Optional
	Capacity []CapacityParameters `json:"capacity,omitempty" tf:"capacity"`

	// +kubebuilder:validation:Optional
	Recurrence []RecurrenceParameters `json:"recurrence,omitempty" tf:"recurrence"`
}

type CapacityObservation struct {
}

type CapacityParameters struct {

	// +kubebuilder:validation:Required
	MaxInstanceCount int64 `json:"maxInstanceCount" tf:"max_instance_count"`

	// +kubebuilder:validation:Required
	MinInstanceCount int64 `json:"minInstanceCount" tf:"min_instance_count"`
}

type ComponentVersionObservation struct {
}

type ComponentVersionParameters struct {

	// +kubebuilder:validation:Required
	Hadoop string `json:"hadoop" tf:"hadoop"`
}

type EdgeNodeObservation struct {
}

type EdgeNodeParameters struct {

	// +kubebuilder:validation:Required
	InstallScriptAction []InstallScriptActionParameters `json:"installScriptAction" tf:"install_script_action"`

	// +kubebuilder:validation:Required
	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	// +kubebuilder:validation:Required
	VMSize string `json:"vmSize" tf:"vm_size"`
}

type GatewayObservation struct {
}

type GatewayParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type HdinsightHadoopClusterObservation struct {
	HTTPSEndpoint string `json:"httpsEndpoint,omitempty" tf:"https_endpoint"`

	SSHEndpoint string `json:"sshEndpoint,omitempty" tf:"ssh_endpoint"`
}

type HdinsightHadoopClusterParameters struct {

	// +kubebuilder:validation:Required
	ClusterVersion string `json:"clusterVersion" tf:"cluster_version"`

	// +kubebuilder:validation:Required
	ComponentVersion []ComponentVersionParameters `json:"componentVersion" tf:"component_version"`

	// +kubebuilder:validation:Required
	Gateway []GatewayParameters `json:"gateway" tf:"gateway"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	Metastores []MetastoresParameters `json:"metastores,omitempty" tf:"metastores"`

	// +kubebuilder:validation:Optional
	Monitor []MonitorParameters `json:"monitor,omitempty" tf:"monitor"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Roles []RolesParameters `json:"roles" tf:"roles"`

	// +kubebuilder:validation:Optional
	StorageAccount []StorageAccountParameters `json:"storageAccount,omitempty" tf:"storage_account"`

	// +kubebuilder:validation:Optional
	StorageAccountGen2 []StorageAccountGen2Parameters `json:"storageAccountGen2,omitempty" tf:"storage_account_gen2"`

	// +kubebuilder:validation:Optional
	TLSMinVersion *string `json:"tlsMinVersion,omitempty" tf:"tls_min_version"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	Tier string `json:"tier" tf:"tier"`
}

type HeadNodeObservation struct {
}

type HeadNodeParameters struct {

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`

	// +kubebuilder:validation:Required
	VMSize string `json:"vmSize" tf:"vm_size"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type HiveObservation struct {
}

type HiveParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Server string `json:"server" tf:"server"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type InstallScriptActionObservation struct {
}

type InstallScriptActionParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	URI string `json:"uri" tf:"uri"`
}

type MetastoresObservation struct {
}

type MetastoresParameters struct {

	// +kubebuilder:validation:Optional
	Ambari []AmbariParameters `json:"ambari,omitempty" tf:"ambari"`

	// +kubebuilder:validation:Optional
	Hive []HiveParameters `json:"hive,omitempty" tf:"hive"`

	// +kubebuilder:validation:Optional
	Oozie []OozieParameters `json:"oozie,omitempty" tf:"oozie"`
}

type MonitorObservation struct {
}

type MonitorParameters struct {

	// +kubebuilder:validation:Required
	LogAnalyticsWorkspaceID string `json:"logAnalyticsWorkspaceId" tf:"log_analytics_workspace_id"`

	// +kubebuilder:validation:Required
	PrimaryKey string `json:"primaryKey" tf:"primary_key"`
}

type NetworkObservation struct {
}

type NetworkParameters struct {

	// +kubebuilder:validation:Optional
	ConnectionDirection *string `json:"connectionDirection,omitempty" tf:"connection_direction"`

	// +kubebuilder:validation:Optional
	PrivateLinkEnabled *bool `json:"privateLinkEnabled,omitempty" tf:"private_link_enabled"`
}

type OozieObservation struct {
}

type OozieParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Server string `json:"server" tf:"server"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type RecurrenceObservation struct {
}

type RecurrenceParameters struct {

	// +kubebuilder:validation:Required
	Schedule []ScheduleParameters `json:"schedule" tf:"schedule"`

	// +kubebuilder:validation:Required
	Timezone string `json:"timezone" tf:"timezone"`
}

type RolesObservation struct {
}

type RolesParameters struct {

	// +kubebuilder:validation:Optional
	EdgeNode []EdgeNodeParameters `json:"edgeNode,omitempty" tf:"edge_node"`

	// +kubebuilder:validation:Required
	HeadNode []HeadNodeParameters `json:"headNode" tf:"head_node"`

	// +kubebuilder:validation:Required
	WorkerNode []WorkerNodeParameters `json:"workerNode" tf:"worker_node"`

	// +kubebuilder:validation:Required
	ZookeeperNode []ZookeeperNodeParameters `json:"zookeeperNode" tf:"zookeeper_node"`
}

type ScheduleObservation struct {
}

type ScheduleParameters struct {

	// +kubebuilder:validation:Required
	Days []string `json:"days" tf:"days"`

	// +kubebuilder:validation:Required
	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	// +kubebuilder:validation:Required
	Time string `json:"time" tf:"time"`
}

type StorageAccountGen2Observation struct {
}

type StorageAccountGen2Parameters struct {

	// +kubebuilder:validation:Required
	FilesystemID string `json:"filesystemId" tf:"filesystem_id"`

	// +kubebuilder:validation:Required
	IsDefault bool `json:"isDefault" tf:"is_default"`

	// +kubebuilder:validation:Required
	ManagedIdentityResourceID string `json:"managedIdentityResourceId" tf:"managed_identity_resource_id"`

	// +kubebuilder:validation:Required
	StorageResourceID string `json:"storageResourceId" tf:"storage_resource_id"`
}

type StorageAccountObservation struct {
}

type StorageAccountParameters struct {

	// +kubebuilder:validation:Required
	IsDefault bool `json:"isDefault" tf:"is_default"`

	// +kubebuilder:validation:Required
	StorageAccountKey string `json:"storageAccountKey" tf:"storage_account_key"`

	// +kubebuilder:validation:Required
	StorageContainerID string `json:"storageContainerId" tf:"storage_container_id"`
}

type WorkerNodeObservation struct {
}

type WorkerNodeParameters struct {

	// +kubebuilder:validation:Optional
	Autoscale []AutoscaleParameters `json:"autoscale,omitempty" tf:"autoscale"`

	// +kubebuilder:validation:Optional
	MinInstanceCount *int64 `json:"minInstanceCount,omitempty" tf:"min_instance_count"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Required
	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`

	// +kubebuilder:validation:Required
	VMSize string `json:"vmSize" tf:"vm_size"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type ZookeeperNodeObservation struct {
}

type ZookeeperNodeParameters struct {

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`

	// +kubebuilder:validation:Required
	VMSize string `json:"vmSize" tf:"vm_size"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

// HdinsightHadoopClusterSpec defines the desired state of HdinsightHadoopCluster
type HdinsightHadoopClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       HdinsightHadoopClusterParameters `json:"forProvider"`
}

// HdinsightHadoopClusterStatus defines the observed state of HdinsightHadoopCluster.
type HdinsightHadoopClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          HdinsightHadoopClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightHadoopCluster is the Schema for the HdinsightHadoopClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HdinsightHadoopCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HdinsightHadoopClusterSpec   `json:"spec"`
	Status            HdinsightHadoopClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightHadoopClusterList contains a list of HdinsightHadoopClusters
type HdinsightHadoopClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HdinsightHadoopCluster `json:"items"`
}

// Repository type metadata.
var (
	HdinsightHadoopClusterKind             = "HdinsightHadoopCluster"
	HdinsightHadoopClusterGroupKind        = schema.GroupKind{Group: Group, Kind: HdinsightHadoopClusterKind}.String()
	HdinsightHadoopClusterKindAPIVersion   = HdinsightHadoopClusterKind + "." + GroupVersion.String()
	HdinsightHadoopClusterGroupVersionKind = GroupVersion.WithKind(HdinsightHadoopClusterKind)
)

func init() {
	SchemeBuilder.Register(&HdinsightHadoopCluster{}, &HdinsightHadoopClusterList{})
}
