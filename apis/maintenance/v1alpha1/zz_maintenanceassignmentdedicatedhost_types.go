/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MaintenanceAssignmentDedicatedHostObservation struct {
}

type MaintenanceAssignmentDedicatedHostParameters struct {

	// +kubebuilder:validation:Required
	DedicatedHostID string `json:"dedicatedHostId" tf:"dedicated_host_id"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	MaintenanceConfigurationID string `json:"maintenanceConfigurationId" tf:"maintenance_configuration_id"`
}

// MaintenanceAssignmentDedicatedHostSpec defines the desired state of MaintenanceAssignmentDedicatedHost
type MaintenanceAssignmentDedicatedHostSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MaintenanceAssignmentDedicatedHostParameters `json:"forProvider"`
}

// MaintenanceAssignmentDedicatedHostStatus defines the observed state of MaintenanceAssignmentDedicatedHost.
type MaintenanceAssignmentDedicatedHostStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MaintenanceAssignmentDedicatedHostObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MaintenanceAssignmentDedicatedHost is the Schema for the MaintenanceAssignmentDedicatedHosts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MaintenanceAssignmentDedicatedHost struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MaintenanceAssignmentDedicatedHostSpec   `json:"spec"`
	Status            MaintenanceAssignmentDedicatedHostStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MaintenanceAssignmentDedicatedHostList contains a list of MaintenanceAssignmentDedicatedHosts
type MaintenanceAssignmentDedicatedHostList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MaintenanceAssignmentDedicatedHost `json:"items"`
}

// Repository type metadata.
var (
	MaintenanceAssignmentDedicatedHostKind             = "MaintenanceAssignmentDedicatedHost"
	MaintenanceAssignmentDedicatedHostGroupKind        = schema.GroupKind{Group: Group, Kind: MaintenanceAssignmentDedicatedHostKind}.String()
	MaintenanceAssignmentDedicatedHostKindAPIVersion   = MaintenanceAssignmentDedicatedHostKind + "." + GroupVersion.String()
	MaintenanceAssignmentDedicatedHostGroupVersionKind = GroupVersion.WithKind(MaintenanceAssignmentDedicatedHostKind)
)

func init() {
	SchemeBuilder.Register(&MaintenanceAssignmentDedicatedHost{}, &MaintenanceAssignmentDedicatedHostList{})
}
