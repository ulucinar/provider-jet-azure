/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this MaintenanceAssignmentDedicatedHost.
func (mg *MaintenanceAssignmentDedicatedHost) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this MaintenanceAssignmentDedicatedHost.
func (mg *MaintenanceAssignmentDedicatedHost) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this MaintenanceAssignmentDedicatedHost.
func (mg *MaintenanceAssignmentDedicatedHost) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this MaintenanceAssignmentDedicatedHost.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *MaintenanceAssignmentDedicatedHost) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this MaintenanceAssignmentDedicatedHost.
func (mg *MaintenanceAssignmentDedicatedHost) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this MaintenanceAssignmentDedicatedHost.
func (mg *MaintenanceAssignmentDedicatedHost) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this MaintenanceAssignmentDedicatedHost.
func (mg *MaintenanceAssignmentDedicatedHost) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this MaintenanceAssignmentDedicatedHost.
func (mg *MaintenanceAssignmentDedicatedHost) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this MaintenanceAssignmentDedicatedHost.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *MaintenanceAssignmentDedicatedHost) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this MaintenanceAssignmentDedicatedHost.
func (mg *MaintenanceAssignmentDedicatedHost) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this MaintenanceAssignmentVirtualMachine.
func (mg *MaintenanceAssignmentVirtualMachine) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this MaintenanceAssignmentVirtualMachine.
func (mg *MaintenanceAssignmentVirtualMachine) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this MaintenanceAssignmentVirtualMachine.
func (mg *MaintenanceAssignmentVirtualMachine) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this MaintenanceAssignmentVirtualMachine.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *MaintenanceAssignmentVirtualMachine) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this MaintenanceAssignmentVirtualMachine.
func (mg *MaintenanceAssignmentVirtualMachine) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this MaintenanceAssignmentVirtualMachine.
func (mg *MaintenanceAssignmentVirtualMachine) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this MaintenanceAssignmentVirtualMachine.
func (mg *MaintenanceAssignmentVirtualMachine) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this MaintenanceAssignmentVirtualMachine.
func (mg *MaintenanceAssignmentVirtualMachine) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this MaintenanceAssignmentVirtualMachine.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *MaintenanceAssignmentVirtualMachine) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this MaintenanceAssignmentVirtualMachine.
func (mg *MaintenanceAssignmentVirtualMachine) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this MaintenanceAssignmentVirtualMachineScaleSet.
func (mg *MaintenanceAssignmentVirtualMachineScaleSet) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this MaintenanceAssignmentVirtualMachineScaleSet.
func (mg *MaintenanceAssignmentVirtualMachineScaleSet) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this MaintenanceAssignmentVirtualMachineScaleSet.
func (mg *MaintenanceAssignmentVirtualMachineScaleSet) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this MaintenanceAssignmentVirtualMachineScaleSet.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *MaintenanceAssignmentVirtualMachineScaleSet) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this MaintenanceAssignmentVirtualMachineScaleSet.
func (mg *MaintenanceAssignmentVirtualMachineScaleSet) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this MaintenanceAssignmentVirtualMachineScaleSet.
func (mg *MaintenanceAssignmentVirtualMachineScaleSet) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this MaintenanceAssignmentVirtualMachineScaleSet.
func (mg *MaintenanceAssignmentVirtualMachineScaleSet) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this MaintenanceAssignmentVirtualMachineScaleSet.
func (mg *MaintenanceAssignmentVirtualMachineScaleSet) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this MaintenanceAssignmentVirtualMachineScaleSet.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *MaintenanceAssignmentVirtualMachineScaleSet) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this MaintenanceAssignmentVirtualMachineScaleSet.
func (mg *MaintenanceAssignmentVirtualMachineScaleSet) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this MaintenanceConfiguration.
func (mg *MaintenanceConfiguration) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this MaintenanceConfiguration.
func (mg *MaintenanceConfiguration) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this MaintenanceConfiguration.
func (mg *MaintenanceConfiguration) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this MaintenanceConfiguration.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *MaintenanceConfiguration) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this MaintenanceConfiguration.
func (mg *MaintenanceConfiguration) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this MaintenanceConfiguration.
func (mg *MaintenanceConfiguration) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this MaintenanceConfiguration.
func (mg *MaintenanceConfiguration) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this MaintenanceConfiguration.
func (mg *MaintenanceConfiguration) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this MaintenanceConfiguration.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *MaintenanceConfiguration) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this MaintenanceConfiguration.
func (mg *MaintenanceConfiguration) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
