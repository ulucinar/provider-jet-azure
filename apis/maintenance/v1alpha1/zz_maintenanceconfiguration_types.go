/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MaintenanceConfigurationObservation struct {
}

type MaintenanceConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Properties map[string]string `json:"properties,omitempty" tf:"properties"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	Visibility *string `json:"visibility,omitempty" tf:"visibility"`

	// +kubebuilder:validation:Optional
	Window []WindowParameters `json:"window,omitempty" tf:"window"`
}

type WindowObservation struct {
}

type WindowParameters struct {

	// +kubebuilder:validation:Optional
	Duration *string `json:"duration,omitempty" tf:"duration"`

	// +kubebuilder:validation:Optional
	ExpirationDateTime *string `json:"expirationDateTime,omitempty" tf:"expiration_date_time"`

	// +kubebuilder:validation:Optional
	RecurEvery *string `json:"recurEvery,omitempty" tf:"recur_every"`

	// +kubebuilder:validation:Required
	StartDateTime string `json:"startDateTime" tf:"start_date_time"`

	// +kubebuilder:validation:Required
	TimeZone string `json:"timeZone" tf:"time_zone"`
}

// MaintenanceConfigurationSpec defines the desired state of MaintenanceConfiguration
type MaintenanceConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MaintenanceConfigurationParameters `json:"forProvider"`
}

// MaintenanceConfigurationStatus defines the observed state of MaintenanceConfiguration.
type MaintenanceConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MaintenanceConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MaintenanceConfiguration is the Schema for the MaintenanceConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MaintenanceConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MaintenanceConfigurationSpec   `json:"spec"`
	Status            MaintenanceConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MaintenanceConfigurationList contains a list of MaintenanceConfigurations
type MaintenanceConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MaintenanceConfiguration `json:"items"`
}

// Repository type metadata.
var (
	MaintenanceConfigurationKind             = "MaintenanceConfiguration"
	MaintenanceConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: MaintenanceConfigurationKind}.String()
	MaintenanceConfigurationKindAPIVersion   = MaintenanceConfigurationKind + "." + GroupVersion.String()
	MaintenanceConfigurationGroupVersionKind = GroupVersion.WithKind(MaintenanceConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&MaintenanceConfiguration{}, &MaintenanceConfigurationList{})
}
