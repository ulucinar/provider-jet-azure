/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutomaticInstanceRepairObservation struct {
}

type AutomaticInstanceRepairParameters struct {

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`

	// +kubebuilder:validation:Optional
	GracePeriod *string `json:"gracePeriod,omitempty" tf:"grace_period"`
}

type AutomaticOsUpgradePolicyObservation struct {
}

type AutomaticOsUpgradePolicyParameters struct {

	// +kubebuilder:validation:Required
	DisableAutomaticRollback bool `json:"disableAutomaticRollback" tf:"disable_automatic_rollback"`

	// +kubebuilder:validation:Required
	EnableAutomaticOsUpgrade bool `json:"enableAutomaticOsUpgrade" tf:"enable_automatic_os_upgrade"`
}

type DataDiskObservation struct {
}

type DataDiskParameters struct {

	// +kubebuilder:validation:Required
	Caching string `json:"caching" tf:"caching"`

	// +kubebuilder:validation:Optional
	CreateOption *string `json:"createOption,omitempty" tf:"create_option"`

	// +kubebuilder:validation:Optional
	DiskEncryptionSetID *string `json:"diskEncryptionSetId,omitempty" tf:"disk_encryption_set_id"`

	// +kubebuilder:validation:Optional
	DiskIopsReadWrite *int64 `json:"diskIopsReadWrite,omitempty" tf:"disk_iops_read_write"`

	// +kubebuilder:validation:Optional
	DiskMbpsReadWrite *int64 `json:"diskMbpsReadWrite,omitempty" tf:"disk_mbps_read_write"`

	// +kubebuilder:validation:Required
	DiskSizeGb int64 `json:"diskSizeGb" tf:"disk_size_gb"`

	// +kubebuilder:validation:Required
	Lun int64 `json:"lun" tf:"lun"`

	// +kubebuilder:validation:Required
	StorageAccountType string `json:"storageAccountType" tf:"storage_account_type"`

	// +kubebuilder:validation:Optional
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty" tf:"write_accelerator_enabled"`
}

type ExtensionObservation struct {
}

type ExtensionParameters struct {

	// +kubebuilder:validation:Optional
	AutoUpgradeMinorVersion *bool `json:"autoUpgradeMinorVersion,omitempty" tf:"auto_upgrade_minor_version"`

	// +kubebuilder:validation:Optional
	ForceUpdateTag *string `json:"forceUpdateTag,omitempty" tf:"force_update_tag"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	ProtectedSettings *string `json:"protectedSettings,omitempty" tf:"protected_settings"`

	// +kubebuilder:validation:Optional
	ProvisionAfterExtensions []string `json:"provisionAfterExtensions,omitempty" tf:"provision_after_extensions"`

	// +kubebuilder:validation:Required
	Publisher string `json:"publisher" tf:"publisher"`

	// +kubebuilder:validation:Optional
	Settings *string `json:"settings,omitempty" tf:"settings"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`

	// +kubebuilder:validation:Required
	TypeHandlerVersion string `json:"typeHandlerVersion" tf:"type_handler_version"`
}

type IPConfigurationObservation struct {
}

type IPConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	ApplicationGatewayBackendAddressPoolIds []string `json:"applicationGatewayBackendAddressPoolIds,omitempty" tf:"application_gateway_backend_address_pool_ids"`

	// +kubebuilder:validation:Optional
	ApplicationSecurityGroupIds []string `json:"applicationSecurityGroupIds,omitempty" tf:"application_security_group_ids"`

	// +kubebuilder:validation:Optional
	LoadBalancerBackendAddressPoolIds []string `json:"loadBalancerBackendAddressPoolIds,omitempty" tf:"load_balancer_backend_address_pool_ids"`

	// +kubebuilder:validation:Optional
	LoadBalancerInboundNatRulesIds []string `json:"loadBalancerInboundNatRulesIds,omitempty" tf:"load_balancer_inbound_nat_rules_ids"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Primary *bool `json:"primary,omitempty" tf:"primary"`

	// +kubebuilder:validation:Optional
	PublicIPAddress []PublicIPAddressParameters `json:"publicIpAddress,omitempty" tf:"public_ip_address"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type IPTagObservation struct {
}

type IPTagParameters struct {

	// +kubebuilder:validation:Required
	Tag string `json:"tag" tf:"tag"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type NetworkInterfaceObservation struct {
}

type NetworkInterfaceParameters struct {

	// +kubebuilder:validation:Optional
	DNSServers []string `json:"dnsServers,omitempty" tf:"dns_servers"`

	// +kubebuilder:validation:Optional
	EnableAcceleratedNetworking *bool `json:"enableAcceleratedNetworking,omitempty" tf:"enable_accelerated_networking"`

	// +kubebuilder:validation:Optional
	EnableIPForwarding *bool `json:"enableIpForwarding,omitempty" tf:"enable_ip_forwarding"`

	// +kubebuilder:validation:Required
	IPConfiguration []IPConfigurationParameters `json:"ipConfiguration" tf:"ip_configuration"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	NetworkSecurityGroupID *string `json:"networkSecurityGroupId,omitempty" tf:"network_security_group_id"`

	// +kubebuilder:validation:Optional
	Primary *bool `json:"primary,omitempty" tf:"primary"`
}

type OsDiskDiffDiskSettingsObservation struct {
}

type OsDiskDiffDiskSettingsParameters struct {

	// +kubebuilder:validation:Required
	Option string `json:"option" tf:"option"`
}

type PublicIPAddressObservation struct {
}

type PublicIPAddressParameters struct {

	// +kubebuilder:validation:Optional
	DomainNameLabel *string `json:"domainNameLabel,omitempty" tf:"domain_name_label"`

	// +kubebuilder:validation:Optional
	IPTag []IPTagParameters `json:"ipTag,omitempty" tf:"ip_tag"`

	// +kubebuilder:validation:Optional
	IdleTimeoutInMinutes *int64 `json:"idleTimeoutInMinutes,omitempty" tf:"idle_timeout_in_minutes"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PublicIPPrefixID *string `json:"publicIpPrefixId,omitempty" tf:"public_ip_prefix_id"`
}

type RollingUpgradePolicyObservation struct {
}

type RollingUpgradePolicyParameters struct {

	// +kubebuilder:validation:Required
	MaxBatchInstancePercent int64 `json:"maxBatchInstancePercent" tf:"max_batch_instance_percent"`

	// +kubebuilder:validation:Required
	MaxUnhealthyInstancePercent int64 `json:"maxUnhealthyInstancePercent" tf:"max_unhealthy_instance_percent"`

	// +kubebuilder:validation:Required
	MaxUnhealthyUpgradedInstancePercent int64 `json:"maxUnhealthyUpgradedInstancePercent" tf:"max_unhealthy_upgraded_instance_percent"`

	// +kubebuilder:validation:Required
	PauseTimeBetweenBatches string `json:"pauseTimeBetweenBatches" tf:"pause_time_between_batches"`
}

type SecretCertificateObservation struct {
}

type SecretCertificateParameters struct {

	// +kubebuilder:validation:Required
	Store string `json:"store" tf:"store"`

	// +kubebuilder:validation:Required
	URL string `json:"url" tf:"url"`
}

type TerminateNotificationObservation struct {
}

type TerminateNotificationParameters struct {

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`

	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout"`
}

type WindowsVirtualMachineScaleSetAdditionalCapabilitiesObservation struct {
}

type WindowsVirtualMachineScaleSetAdditionalCapabilitiesParameters struct {

	// +kubebuilder:validation:Optional
	UltraSsdEnabled *bool `json:"ultraSsdEnabled,omitempty" tf:"ultra_ssd_enabled"`
}

type WindowsVirtualMachineScaleSetAdditionalUnattendContentObservation struct {
}

type WindowsVirtualMachineScaleSetAdditionalUnattendContentParameters struct {

	// +kubebuilder:validation:Required
	Content string `json:"content" tf:"content"`

	// +kubebuilder:validation:Required
	Setting string `json:"setting" tf:"setting"`
}

type WindowsVirtualMachineScaleSetBootDiagnosticsObservation struct {
}

type WindowsVirtualMachineScaleSetBootDiagnosticsParameters struct {

	// +kubebuilder:validation:Optional
	StorageAccountURI *string `json:"storageAccountUri,omitempty" tf:"storage_account_uri"`
}

type WindowsVirtualMachineScaleSetIdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`
}

type WindowsVirtualMachineScaleSetIdentityParameters struct {

	// +kubebuilder:validation:Optional
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type WindowsVirtualMachineScaleSetObservation struct {
	UniqueID string `json:"uniqueId,omitempty" tf:"unique_id"`
}

type WindowsVirtualMachineScaleSetOsDiskObservation struct {
}

type WindowsVirtualMachineScaleSetOsDiskParameters struct {

	// +kubebuilder:validation:Required
	Caching string `json:"caching" tf:"caching"`

	// +kubebuilder:validation:Optional
	DiffDiskSettings []OsDiskDiffDiskSettingsParameters `json:"diffDiskSettings,omitempty" tf:"diff_disk_settings"`

	// +kubebuilder:validation:Optional
	DiskEncryptionSetID *string `json:"diskEncryptionSetId,omitempty" tf:"disk_encryption_set_id"`

	// +kubebuilder:validation:Optional
	DiskSizeGb *int64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb"`

	// +kubebuilder:validation:Required
	StorageAccountType string `json:"storageAccountType" tf:"storage_account_type"`

	// +kubebuilder:validation:Optional
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty" tf:"write_accelerator_enabled"`
}

type WindowsVirtualMachineScaleSetParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalCapabilities []WindowsVirtualMachineScaleSetAdditionalCapabilitiesParameters `json:"additionalCapabilities,omitempty" tf:"additional_capabilities"`

	// +kubebuilder:validation:Optional
	AdditionalUnattendContent []WindowsVirtualMachineScaleSetAdditionalUnattendContentParameters `json:"additionalUnattendContent,omitempty" tf:"additional_unattend_content"`

	// +kubebuilder:validation:Required
	AdminPassword string `json:"adminPassword" tf:"admin_password"`

	// +kubebuilder:validation:Required
	AdminUsername string `json:"adminUsername" tf:"admin_username"`

	// +kubebuilder:validation:Optional
	AutomaticInstanceRepair []AutomaticInstanceRepairParameters `json:"automaticInstanceRepair,omitempty" tf:"automatic_instance_repair"`

	// +kubebuilder:validation:Optional
	AutomaticOsUpgradePolicy []AutomaticOsUpgradePolicyParameters `json:"automaticOsUpgradePolicy,omitempty" tf:"automatic_os_upgrade_policy"`

	// +kubebuilder:validation:Optional
	BootDiagnostics []WindowsVirtualMachineScaleSetBootDiagnosticsParameters `json:"bootDiagnostics,omitempty" tf:"boot_diagnostics"`

	// +kubebuilder:validation:Optional
	ComputerNamePrefix *string `json:"computerNamePrefix,omitempty" tf:"computer_name_prefix"`

	// +kubebuilder:validation:Optional
	CustomData *string `json:"customData,omitempty" tf:"custom_data"`

	// +kubebuilder:validation:Optional
	DataDisk []DataDiskParameters `json:"dataDisk,omitempty" tf:"data_disk"`

	// +kubebuilder:validation:Optional
	DoNotRunExtensionsOnOverprovisionedMachines *bool `json:"doNotRunExtensionsOnOverprovisionedMachines,omitempty" tf:"do_not_run_extensions_on_overprovisioned_machines"`

	// +kubebuilder:validation:Optional
	EnableAutomaticUpdates *bool `json:"enableAutomaticUpdates,omitempty" tf:"enable_automatic_updates"`

	// +kubebuilder:validation:Optional
	EncryptionAtHostEnabled *bool `json:"encryptionAtHostEnabled,omitempty" tf:"encryption_at_host_enabled"`

	// +kubebuilder:validation:Optional
	EvictionPolicy *string `json:"evictionPolicy,omitempty" tf:"eviction_policy"`

	// +kubebuilder:validation:Optional
	Extension []ExtensionParameters `json:"extension,omitempty" tf:"extension"`

	// +kubebuilder:validation:Optional
	ExtensionsTimeBudget *string `json:"extensionsTimeBudget,omitempty" tf:"extensions_time_budget"`

	// +kubebuilder:validation:Optional
	HealthProbeID *string `json:"healthProbeId,omitempty" tf:"health_probe_id"`

	// +kubebuilder:validation:Optional
	Identity []WindowsVirtualMachineScaleSetIdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Required
	Instances int64 `json:"instances" tf:"instances"`

	// +kubebuilder:validation:Optional
	LicenseType *string `json:"licenseType,omitempty" tf:"license_type"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	MaxBidPrice *float64 `json:"maxBidPrice,omitempty" tf:"max_bid_price"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	NetworkInterface []NetworkInterfaceParameters `json:"networkInterface" tf:"network_interface"`

	// +kubebuilder:validation:Required
	OsDisk []WindowsVirtualMachineScaleSetOsDiskParameters `json:"osDisk" tf:"os_disk"`

	// +kubebuilder:validation:Optional
	Overprovision *bool `json:"overprovision,omitempty" tf:"overprovision"`

	// +kubebuilder:validation:Optional
	Plan []WindowsVirtualMachineScaleSetPlanParameters `json:"plan,omitempty" tf:"plan"`

	// +kubebuilder:validation:Optional
	PlatformFaultDomainCount *int64 `json:"platformFaultDomainCount,omitempty" tf:"platform_fault_domain_count"`

	// +kubebuilder:validation:Optional
	Priority *string `json:"priority,omitempty" tf:"priority"`

	// +kubebuilder:validation:Optional
	ProvisionVMAgent *bool `json:"provisionVmAgent,omitempty" tf:"provision_vm_agent"`

	// +kubebuilder:validation:Optional
	ProximityPlacementGroupID *string `json:"proximityPlacementGroupId,omitempty" tf:"proximity_placement_group_id"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	RollingUpgradePolicy []RollingUpgradePolicyParameters `json:"rollingUpgradePolicy,omitempty" tf:"rolling_upgrade_policy"`

	// +kubebuilder:validation:Optional
	ScaleInPolicy *string `json:"scaleInPolicy,omitempty" tf:"scale_in_policy"`

	// +kubebuilder:validation:Optional
	Secret []WindowsVirtualMachineScaleSetSecretParameters `json:"secret,omitempty" tf:"secret"`

	// +kubebuilder:validation:Optional
	SinglePlacementGroup *bool `json:"singlePlacementGroup,omitempty" tf:"single_placement_group"`

	// +kubebuilder:validation:Required
	Sku string `json:"sku" tf:"sku"`

	// +kubebuilder:validation:Optional
	SourceImageID *string `json:"sourceImageId,omitempty" tf:"source_image_id"`

	// +kubebuilder:validation:Optional
	SourceImageReference []WindowsVirtualMachineScaleSetSourceImageReferenceParameters `json:"sourceImageReference,omitempty" tf:"source_image_reference"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TerminateNotification []TerminateNotificationParameters `json:"terminateNotification,omitempty" tf:"terminate_notification"`

	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone"`

	// +kubebuilder:validation:Optional
	UpgradeMode *string `json:"upgradeMode,omitempty" tf:"upgrade_mode"`

	// +kubebuilder:validation:Optional
	WinrmListener []WindowsVirtualMachineScaleSetWinrmListenerParameters `json:"winrmListener,omitempty" tf:"winrm_listener"`

	// +kubebuilder:validation:Optional
	ZoneBalance *bool `json:"zoneBalance,omitempty" tf:"zone_balance"`

	// +kubebuilder:validation:Optional
	Zones []string `json:"zones,omitempty" tf:"zones"`
}

type WindowsVirtualMachineScaleSetPlanObservation struct {
}

type WindowsVirtualMachineScaleSetPlanParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Product string `json:"product" tf:"product"`

	// +kubebuilder:validation:Required
	Publisher string `json:"publisher" tf:"publisher"`
}

type WindowsVirtualMachineScaleSetSecretObservation struct {
}

type WindowsVirtualMachineScaleSetSecretParameters struct {

	// +kubebuilder:validation:Required
	Certificate []SecretCertificateParameters `json:"certificate" tf:"certificate"`

	// +kubebuilder:validation:Required
	KeyVaultID string `json:"keyVaultId" tf:"key_vault_id"`
}

type WindowsVirtualMachineScaleSetSourceImageReferenceObservation struct {
}

type WindowsVirtualMachineScaleSetSourceImageReferenceParameters struct {

	// +kubebuilder:validation:Required
	Offer string `json:"offer" tf:"offer"`

	// +kubebuilder:validation:Required
	Publisher string `json:"publisher" tf:"publisher"`

	// +kubebuilder:validation:Required
	Sku string `json:"sku" tf:"sku"`

	// +kubebuilder:validation:Required
	Version string `json:"version" tf:"version"`
}

type WindowsVirtualMachineScaleSetWinrmListenerObservation struct {
}

type WindowsVirtualMachineScaleSetWinrmListenerParameters struct {

	// +kubebuilder:validation:Optional
	CertificateURL *string `json:"certificateUrl,omitempty" tf:"certificate_url"`

	// +kubebuilder:validation:Required
	Protocol string `json:"protocol" tf:"protocol"`
}

// WindowsVirtualMachineScaleSetSpec defines the desired state of WindowsVirtualMachineScaleSet
type WindowsVirtualMachineScaleSetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       WindowsVirtualMachineScaleSetParameters `json:"forProvider"`
}

// WindowsVirtualMachineScaleSetStatus defines the observed state of WindowsVirtualMachineScaleSet.
type WindowsVirtualMachineScaleSetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          WindowsVirtualMachineScaleSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WindowsVirtualMachineScaleSet is the Schema for the WindowsVirtualMachineScaleSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type WindowsVirtualMachineScaleSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WindowsVirtualMachineScaleSetSpec   `json:"spec"`
	Status            WindowsVirtualMachineScaleSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WindowsVirtualMachineScaleSetList contains a list of WindowsVirtualMachineScaleSets
type WindowsVirtualMachineScaleSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WindowsVirtualMachineScaleSet `json:"items"`
}

// Repository type metadata.
var (
	WindowsVirtualMachineScaleSetKind             = "WindowsVirtualMachineScaleSet"
	WindowsVirtualMachineScaleSetGroupKind        = schema.GroupKind{Group: Group, Kind: WindowsVirtualMachineScaleSetKind}.String()
	WindowsVirtualMachineScaleSetKindAPIVersion   = WindowsVirtualMachineScaleSetKind + "." + GroupVersion.String()
	WindowsVirtualMachineScaleSetGroupVersionKind = GroupVersion.WithKind(WindowsVirtualMachineScaleSetKind)
)

func init() {
	SchemeBuilder.Register(&WindowsVirtualMachineScaleSet{}, &WindowsVirtualMachineScaleSetList{})
}
