/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AdditionalCapabilitiesObservation struct {
}

type AdditionalCapabilitiesParameters struct {

	// +kubebuilder:validation:Optional
	UltraSsdEnabled *bool `json:"ultraSsdEnabled,omitempty" tf:"ultra_ssd_enabled"`
}

type AdditionalUnattendContentObservation struct {
}

type AdditionalUnattendContentParameters struct {

	// +kubebuilder:validation:Required
	Content string `json:"content" tf:"content"`

	// +kubebuilder:validation:Required
	Setting string `json:"setting" tf:"setting"`
}

type BootDiagnosticsObservation struct {
}

type BootDiagnosticsParameters struct {

	// +kubebuilder:validation:Optional
	StorageAccountURI *string `json:"storageAccountUri,omitempty" tf:"storage_account_uri"`
}

type CertificateObservation struct {
}

type CertificateParameters struct {

	// +kubebuilder:validation:Required
	Store string `json:"store" tf:"store"`

	// +kubebuilder:validation:Required
	URL string `json:"url" tf:"url"`
}

type DiffDiskSettingsObservation struct {
}

type DiffDiskSettingsParameters struct {

	// +kubebuilder:validation:Required
	Option string `json:"option" tf:"option"`
}

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Optional
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type OsDiskObservation struct {
}

type OsDiskParameters struct {

	// +kubebuilder:validation:Required
	Caching string `json:"caching" tf:"caching"`

	// +kubebuilder:validation:Optional
	DiffDiskSettings []DiffDiskSettingsParameters `json:"diffDiskSettings,omitempty" tf:"diff_disk_settings"`

	// +kubebuilder:validation:Optional
	DiskEncryptionSetID *string `json:"diskEncryptionSetId,omitempty" tf:"disk_encryption_set_id"`

	// +kubebuilder:validation:Optional
	DiskSizeGb *int64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`

	// +kubebuilder:validation:Required
	StorageAccountType string `json:"storageAccountType" tf:"storage_account_type"`

	// +kubebuilder:validation:Optional
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty" tf:"write_accelerator_enabled"`
}

type PlanObservation struct {
}

type PlanParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Product string `json:"product" tf:"product"`

	// +kubebuilder:validation:Required
	Publisher string `json:"publisher" tf:"publisher"`
}

type SecretObservation struct {
}

type SecretParameters struct {

	// +kubebuilder:validation:Required
	Certificate []CertificateParameters `json:"certificate" tf:"certificate"`

	// +kubebuilder:validation:Required
	KeyVaultID string `json:"keyVaultId" tf:"key_vault_id"`
}

type SourceImageReferenceObservation struct {
}

type SourceImageReferenceParameters struct {

	// +kubebuilder:validation:Required
	Offer string `json:"offer" tf:"offer"`

	// +kubebuilder:validation:Required
	Publisher string `json:"publisher" tf:"publisher"`

	// +kubebuilder:validation:Required
	Sku string `json:"sku" tf:"sku"`

	// +kubebuilder:validation:Required
	Version string `json:"version" tf:"version"`
}

type WindowsVirtualMachineObservation struct {
	PrivateIPAddress string `json:"privateIpAddress,omitempty" tf:"private_ip_address"`

	PrivateIPAddresses []string `json:"privateIpAddresses,omitempty" tf:"private_ip_addresses"`

	PublicIPAddress string `json:"publicIpAddress,omitempty" tf:"public_ip_address"`

	PublicIPAddresses []string `json:"publicIpAddresses,omitempty" tf:"public_ip_addresses"`

	VirtualMachineID string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id"`
}

type WindowsVirtualMachineParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalCapabilities []AdditionalCapabilitiesParameters `json:"additionalCapabilities,omitempty" tf:"additional_capabilities"`

	// +kubebuilder:validation:Optional
	AdditionalUnattendContent []AdditionalUnattendContentParameters `json:"additionalUnattendContent,omitempty" tf:"additional_unattend_content"`

	// +kubebuilder:validation:Required
	AdminPassword string `json:"adminPassword" tf:"admin_password"`

	// +kubebuilder:validation:Required
	AdminUsername string `json:"adminUsername" tf:"admin_username"`

	// +kubebuilder:validation:Optional
	AllowExtensionOperations *bool `json:"allowExtensionOperations,omitempty" tf:"allow_extension_operations"`

	// +kubebuilder:validation:Optional
	AvailabilitySetID *string `json:"availabilitySetId,omitempty" tf:"availability_set_id"`

	// +kubebuilder:validation:Optional
	BootDiagnostics []BootDiagnosticsParameters `json:"bootDiagnostics,omitempty" tf:"boot_diagnostics"`

	// +kubebuilder:validation:Optional
	ComputerName *string `json:"computerName,omitempty" tf:"computer_name"`

	// +kubebuilder:validation:Optional
	CustomData *string `json:"customData,omitempty" tf:"custom_data"`

	// +kubebuilder:validation:Optional
	DedicatedHostID *string `json:"dedicatedHostId,omitempty" tf:"dedicated_host_id"`

	// +kubebuilder:validation:Optional
	EnableAutomaticUpdates *bool `json:"enableAutomaticUpdates,omitempty" tf:"enable_automatic_updates"`

	// +kubebuilder:validation:Optional
	EncryptionAtHostEnabled *bool `json:"encryptionAtHostEnabled,omitempty" tf:"encryption_at_host_enabled"`

	// +kubebuilder:validation:Optional
	EvictionPolicy *string `json:"evictionPolicy,omitempty" tf:"eviction_policy"`

	// +kubebuilder:validation:Optional
	ExtensionsTimeBudget *string `json:"extensionsTimeBudget,omitempty" tf:"extensions_time_budget"`

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Optional
	LicenseType *string `json:"licenseType,omitempty" tf:"license_type"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	MaxBidPrice *float64 `json:"maxBidPrice,omitempty" tf:"max_bid_price"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	NetworkInterfaceIds []string `json:"networkInterfaceIds" tf:"network_interface_ids"`

	// +kubebuilder:validation:Required
	OsDisk []OsDiskParameters `json:"osDisk" tf:"os_disk"`

	// +kubebuilder:validation:Optional
	PatchMode *string `json:"patchMode,omitempty" tf:"patch_mode"`

	// +kubebuilder:validation:Optional
	Plan []PlanParameters `json:"plan,omitempty" tf:"plan"`

	// +kubebuilder:validation:Optional
	PlatformFaultDomain *int64 `json:"platformFaultDomain,omitempty" tf:"platform_fault_domain"`

	// +kubebuilder:validation:Optional
	Priority *string `json:"priority,omitempty" tf:"priority"`

	// +kubebuilder:validation:Optional
	ProvisionVMAgent *bool `json:"provisionVmAgent,omitempty" tf:"provision_vm_agent"`

	// +kubebuilder:validation:Optional
	ProximityPlacementGroupID *string `json:"proximityPlacementGroupId,omitempty" tf:"proximity_placement_group_id"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Secret []SecretParameters `json:"secret,omitempty" tf:"secret"`

	// +kubebuilder:validation:Required
	Size string `json:"size" tf:"size"`

	// +kubebuilder:validation:Optional
	SourceImageID *string `json:"sourceImageId,omitempty" tf:"source_image_id"`

	// +kubebuilder:validation:Optional
	SourceImageReference []SourceImageReferenceParameters `json:"sourceImageReference,omitempty" tf:"source_image_reference"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone"`

	// +kubebuilder:validation:Optional
	VirtualMachineScaleSetID *string `json:"virtualMachineScaleSetId,omitempty" tf:"virtual_machine_scale_set_id"`

	// +kubebuilder:validation:Optional
	WinrmListener []WinrmListenerParameters `json:"winrmListener,omitempty" tf:"winrm_listener"`

	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone"`
}

type WinrmListenerObservation struct {
}

type WinrmListenerParameters struct {

	// +kubebuilder:validation:Optional
	CertificateURL *string `json:"certificateUrl,omitempty" tf:"certificate_url"`

	// +kubebuilder:validation:Required
	Protocol string `json:"protocol" tf:"protocol"`
}

// WindowsVirtualMachineSpec defines the desired state of WindowsVirtualMachine
type WindowsVirtualMachineSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       WindowsVirtualMachineParameters `json:"forProvider"`
}

// WindowsVirtualMachineStatus defines the observed state of WindowsVirtualMachine.
type WindowsVirtualMachineStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          WindowsVirtualMachineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WindowsVirtualMachine is the Schema for the WindowsVirtualMachines API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type WindowsVirtualMachine struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WindowsVirtualMachineSpec   `json:"spec"`
	Status            WindowsVirtualMachineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WindowsVirtualMachineList contains a list of WindowsVirtualMachines
type WindowsVirtualMachineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WindowsVirtualMachine `json:"items"`
}

// Repository type metadata.
var (
	WindowsVirtualMachineKind             = "WindowsVirtualMachine"
	WindowsVirtualMachineGroupKind        = schema.GroupKind{Group: Group, Kind: WindowsVirtualMachineKind}.String()
	WindowsVirtualMachineKindAPIVersion   = WindowsVirtualMachineKind + "." + GroupVersion.String()
	WindowsVirtualMachineGroupVersionKind = GroupVersion.WithKind(WindowsVirtualMachineKind)
)

func init() {
	SchemeBuilder.Register(&WindowsVirtualMachine{}, &WindowsVirtualMachineList{})
}
