/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type SqlElasticpoolObservation struct {
	CreationDate string `json:"creationDate,omitempty" tf:"creation_date"`
}

type SqlElasticpoolParameters struct {

	// +kubebuilder:validation:Optional
	DBDtuMax *int64 `json:"dbDtuMax,omitempty" tf:"db_dtu_max"`

	// +kubebuilder:validation:Optional
	DBDtuMin *int64 `json:"dbDtuMin,omitempty" tf:"db_dtu_min"`

	// +kubebuilder:validation:Required
	Dtu int64 `json:"dtu" tf:"dtu"`

	// +kubebuilder:validation:Required
	Edition string `json:"edition" tf:"edition"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PoolSize *int64 `json:"poolSize,omitempty" tf:"pool_size"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	ServerName string `json:"serverName" tf:"server_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// SqlElasticpoolSpec defines the desired state of SqlElasticpool
type SqlElasticpoolSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SqlElasticpoolParameters `json:"forProvider"`
}

// SqlElasticpoolStatus defines the observed state of SqlElasticpool.
type SqlElasticpoolStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SqlElasticpoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SqlElasticpool is the Schema for the SqlElasticpools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SqlElasticpool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SqlElasticpoolSpec   `json:"spec"`
	Status            SqlElasticpoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SqlElasticpoolList contains a list of SqlElasticpools
type SqlElasticpoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SqlElasticpool `json:"items"`
}

// Repository type metadata.
var (
	SqlElasticpoolKind             = "SqlElasticpool"
	SqlElasticpoolGroupKind        = schema.GroupKind{Group: Group, Kind: SqlElasticpoolKind}.String()
	SqlElasticpoolKindAPIVersion   = SqlElasticpoolKind + "." + GroupVersion.String()
	SqlElasticpoolGroupVersionKind = GroupVersion.WithKind(SqlElasticpoolKind)
)

func init() {
	SchemeBuilder.Register(&SqlElasticpool{}, &SqlElasticpoolList{})
}
