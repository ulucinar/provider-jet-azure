/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VariableDateTimeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VariableDateTimeParameters struct {

	// +kubebuilder:validation:Required
	AutomationAccountName *string `json:"automationAccountName" tf:"automation_account_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// VariableDateTimeSpec defines the desired state of VariableDateTime
type VariableDateTimeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VariableDateTimeParameters `json:"forProvider"`
}

// VariableDateTimeStatus defines the observed state of VariableDateTime.
type VariableDateTimeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VariableDateTimeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VariableDateTime is the Schema for the VariableDateTimes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type VariableDateTime struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VariableDateTimeSpec   `json:"spec"`
	Status            VariableDateTimeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VariableDateTimeList contains a list of VariableDateTimes
type VariableDateTimeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VariableDateTime `json:"items"`
}

// Repository type metadata.
var (
	VariableDateTime_Kind             = "VariableDateTime"
	VariableDateTime_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VariableDateTime_Kind}.String()
	VariableDateTime_KindAPIVersion   = VariableDateTime_Kind + "." + CRDGroupVersion.String()
	VariableDateTime_GroupVersionKind = CRDGroupVersion.WithKind(VariableDateTime_Kind)
)

func init() {
	SchemeBuilder.Register(&VariableDateTime{}, &VariableDateTimeList{})
}
