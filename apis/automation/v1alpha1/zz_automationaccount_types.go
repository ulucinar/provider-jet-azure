/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutomationAccountObservation struct {
	DscPrimaryAccessKey string `json:"dscPrimaryAccessKey,omitempty" tf:"dsc_primary_access_key"`

	DscSecondaryAccessKey string `json:"dscSecondaryAccessKey,omitempty" tf:"dsc_secondary_access_key"`

	DscServerEndpoint string `json:"dscServerEndpoint,omitempty" tf:"dsc_server_endpoint"`
}

type AutomationAccountParameters struct {

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	SkuName string `json:"skuName" tf:"sku_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// AutomationAccountSpec defines the desired state of AutomationAccount
type AutomationAccountSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AutomationAccountParameters `json:"forProvider"`
}

// AutomationAccountStatus defines the observed state of AutomationAccount.
type AutomationAccountStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AutomationAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationAccount is the Schema for the AutomationAccounts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AutomationAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutomationAccountSpec   `json:"spec"`
	Status            AutomationAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationAccountList contains a list of AutomationAccounts
type AutomationAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutomationAccount `json:"items"`
}

// Repository type metadata.
var (
	AutomationAccountKind             = "AutomationAccount"
	AutomationAccountGroupKind        = schema.GroupKind{Group: Group, Kind: AutomationAccountKind}.String()
	AutomationAccountKindAPIVersion   = AutomationAccountKind + "." + GroupVersion.String()
	AutomationAccountGroupVersionKind = GroupVersion.WithKind(AutomationAccountKind)
)

func init() {
	SchemeBuilder.Register(&AutomationAccount{}, &AutomationAccountList{})
}
