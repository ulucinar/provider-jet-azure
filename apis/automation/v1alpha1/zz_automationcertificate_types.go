/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutomationCertificateObservation struct {
	Thumbprint string `json:"thumbprint,omitempty" tf:"thumbprint"`
}

type AutomationCertificateParameters struct {

	// +kubebuilder:validation:Required
	AutomationAccountName string `json:"automationAccountName" tf:"automation_account_name"`

	// +kubebuilder:validation:Required
	Base64 string `json:"base64" tf:"base64"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	Exportable *bool `json:"exportable,omitempty" tf:"exportable"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

// AutomationCertificateSpec defines the desired state of AutomationCertificate
type AutomationCertificateSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AutomationCertificateParameters `json:"forProvider"`
}

// AutomationCertificateStatus defines the observed state of AutomationCertificate.
type AutomationCertificateStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AutomationCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationCertificate is the Schema for the AutomationCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AutomationCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutomationCertificateSpec   `json:"spec"`
	Status            AutomationCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationCertificateList contains a list of AutomationCertificates
type AutomationCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutomationCertificate `json:"items"`
}

// Repository type metadata.
var (
	AutomationCertificateKind             = "AutomationCertificate"
	AutomationCertificateGroupKind        = schema.GroupKind{Group: Group, Kind: AutomationCertificateKind}.String()
	AutomationCertificateKindAPIVersion   = AutomationCertificateKind + "." + GroupVersion.String()
	AutomationCertificateGroupVersionKind = GroupVersion.WithKind(AutomationCertificateKind)
)

func init() {
	SchemeBuilder.Register(&AutomationCertificate{}, &AutomationCertificateList{})
}
