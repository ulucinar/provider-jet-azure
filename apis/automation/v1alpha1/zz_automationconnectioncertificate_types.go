/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutomationConnectionCertificateObservation struct {
}

type AutomationConnectionCertificateParameters struct {

	// +kubebuilder:validation:Required
	AutomationAccountName string `json:"automationAccountName" tf:"automation_account_name"`

	// +kubebuilder:validation:Required
	AutomationCertificateName string `json:"automationCertificateName" tf:"automation_certificate_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	SubscriptionID string `json:"subscriptionId" tf:"subscription_id"`
}

// AutomationConnectionCertificateSpec defines the desired state of AutomationConnectionCertificate
type AutomationConnectionCertificateSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AutomationConnectionCertificateParameters `json:"forProvider"`
}

// AutomationConnectionCertificateStatus defines the observed state of AutomationConnectionCertificate.
type AutomationConnectionCertificateStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AutomationConnectionCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationConnectionCertificate is the Schema for the AutomationConnectionCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AutomationConnectionCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutomationConnectionCertificateSpec   `json:"spec"`
	Status            AutomationConnectionCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationConnectionCertificateList contains a list of AutomationConnectionCertificates
type AutomationConnectionCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutomationConnectionCertificate `json:"items"`
}

// Repository type metadata.
var (
	AutomationConnectionCertificateKind             = "AutomationConnectionCertificate"
	AutomationConnectionCertificateGroupKind        = schema.GroupKind{Group: Group, Kind: AutomationConnectionCertificateKind}.String()
	AutomationConnectionCertificateKindAPIVersion   = AutomationConnectionCertificateKind + "." + GroupVersion.String()
	AutomationConnectionCertificateGroupVersionKind = GroupVersion.WithKind(AutomationConnectionCertificateKind)
)

func init() {
	SchemeBuilder.Register(&AutomationConnectionCertificate{}, &AutomationConnectionCertificateList{})
}
