/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutomationConnectionClassicCertificateObservation struct {
}

type AutomationConnectionClassicCertificateParameters struct {

	// +kubebuilder:validation:Required
	AutomationAccountName string `json:"automationAccountName" tf:"automation_account_name"`

	// +kubebuilder:validation:Required
	CertificateAssetName string `json:"certificateAssetName" tf:"certificate_asset_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	SubscriptionID string `json:"subscriptionId" tf:"subscription_id"`

	// +kubebuilder:validation:Required
	SubscriptionName string `json:"subscriptionName" tf:"subscription_name"`
}

// AutomationConnectionClassicCertificateSpec defines the desired state of AutomationConnectionClassicCertificate
type AutomationConnectionClassicCertificateSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AutomationConnectionClassicCertificateParameters `json:"forProvider"`
}

// AutomationConnectionClassicCertificateStatus defines the observed state of AutomationConnectionClassicCertificate.
type AutomationConnectionClassicCertificateStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AutomationConnectionClassicCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationConnectionClassicCertificate is the Schema for the AutomationConnectionClassicCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AutomationConnectionClassicCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutomationConnectionClassicCertificateSpec   `json:"spec"`
	Status            AutomationConnectionClassicCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationConnectionClassicCertificateList contains a list of AutomationConnectionClassicCertificates
type AutomationConnectionClassicCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutomationConnectionClassicCertificate `json:"items"`
}

// Repository type metadata.
var (
	AutomationConnectionClassicCertificateKind             = "AutomationConnectionClassicCertificate"
	AutomationConnectionClassicCertificateGroupKind        = schema.GroupKind{Group: Group, Kind: AutomationConnectionClassicCertificateKind}.String()
	AutomationConnectionClassicCertificateKindAPIVersion   = AutomationConnectionClassicCertificateKind + "." + GroupVersion.String()
	AutomationConnectionClassicCertificateGroupVersionKind = GroupVersion.WithKind(AutomationConnectionClassicCertificateKind)
)

func init() {
	SchemeBuilder.Register(&AutomationConnectionClassicCertificate{}, &AutomationConnectionClassicCertificateList{})
}
