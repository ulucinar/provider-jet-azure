/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutomationDscConfigurationObservation struct {
	State string `json:"state,omitempty" tf:"state"`
}

type AutomationDscConfigurationParameters struct {

	// +kubebuilder:validation:Required
	AutomationAccountName string `json:"automationAccountName" tf:"automation_account_name"`

	// +kubebuilder:validation:Required
	ContentEmbedded string `json:"contentEmbedded" tf:"content_embedded"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	LogVerbose *bool `json:"logVerbose,omitempty" tf:"log_verbose"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// AutomationDscConfigurationSpec defines the desired state of AutomationDscConfiguration
type AutomationDscConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AutomationDscConfigurationParameters `json:"forProvider"`
}

// AutomationDscConfigurationStatus defines the observed state of AutomationDscConfiguration.
type AutomationDscConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AutomationDscConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationDscConfiguration is the Schema for the AutomationDscConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AutomationDscConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutomationDscConfigurationSpec   `json:"spec"`
	Status            AutomationDscConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationDscConfigurationList contains a list of AutomationDscConfigurations
type AutomationDscConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutomationDscConfiguration `json:"items"`
}

// Repository type metadata.
var (
	AutomationDscConfigurationKind             = "AutomationDscConfiguration"
	AutomationDscConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: AutomationDscConfigurationKind}.String()
	AutomationDscConfigurationKindAPIVersion   = AutomationDscConfigurationKind + "." + GroupVersion.String()
	AutomationDscConfigurationGroupVersionKind = GroupVersion.WithKind(AutomationDscConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&AutomationDscConfiguration{}, &AutomationDscConfigurationList{})
}
