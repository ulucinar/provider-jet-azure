/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutomationRunbookObservation struct {
}

type AutomationRunbookParameters struct {

	// +kubebuilder:validation:Required
	AutomationAccountName string `json:"automationAccountName" tf:"automation_account_name"`

	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	JobSchedule []JobScheduleParameters `json:"jobSchedule,omitempty" tf:"job_schedule"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	LogProgress bool `json:"logProgress" tf:"log_progress"`

	// +kubebuilder:validation:Required
	LogVerbose bool `json:"logVerbose" tf:"log_verbose"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PublishContentLink []PublishContentLinkParameters `json:"publishContentLink,omitempty" tf:"publish_content_link"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	RunbookType string `json:"runbookType" tf:"runbook_type"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type JobScheduleObservation struct {
	JobScheduleID string `json:"jobScheduleId,omitempty" tf:"job_schedule_id"`
}

type JobScheduleParameters struct {

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Optional
	RunOn *string `json:"runOn,omitempty" tf:"run_on"`

	// +kubebuilder:validation:Required
	ScheduleName string `json:"scheduleName" tf:"schedule_name"`
}

type PublishContentLinkHashObservation struct {
}

type PublishContentLinkHashParameters struct {

	// +kubebuilder:validation:Required
	Algorithm string `json:"algorithm" tf:"algorithm"`

	// +kubebuilder:validation:Required
	Value string `json:"value" tf:"value"`
}

type PublishContentLinkObservation struct {
}

type PublishContentLinkParameters struct {

	// +kubebuilder:validation:Optional
	Hash []PublishContentLinkHashParameters `json:"hash,omitempty" tf:"hash"`

	// +kubebuilder:validation:Required
	URI string `json:"uri" tf:"uri"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version"`
}

// AutomationRunbookSpec defines the desired state of AutomationRunbook
type AutomationRunbookSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AutomationRunbookParameters `json:"forProvider"`
}

// AutomationRunbookStatus defines the observed state of AutomationRunbook.
type AutomationRunbookStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AutomationRunbookObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationRunbook is the Schema for the AutomationRunbooks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AutomationRunbook struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutomationRunbookSpec   `json:"spec"`
	Status            AutomationRunbookStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationRunbookList contains a list of AutomationRunbooks
type AutomationRunbookList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutomationRunbook `json:"items"`
}

// Repository type metadata.
var (
	AutomationRunbookKind             = "AutomationRunbook"
	AutomationRunbookGroupKind        = schema.GroupKind{Group: Group, Kind: AutomationRunbookKind}.String()
	AutomationRunbookKindAPIVersion   = AutomationRunbookKind + "." + GroupVersion.String()
	AutomationRunbookGroupVersionKind = GroupVersion.WithKind(AutomationRunbookKind)
)

func init() {
	SchemeBuilder.Register(&AutomationRunbook{}, &AutomationRunbookList{})
}
