/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutomationDscNodeconfigurationObservation struct {
	ConfigurationName string `json:"configurationName,omitempty" tf:"configuration_name"`
}

type AutomationDscNodeconfigurationParameters struct {

	// +kubebuilder:validation:Required
	AutomationAccountName string `json:"automationAccountName" tf:"automation_account_name"`

	// +kubebuilder:validation:Required
	ContentEmbedded string `json:"contentEmbedded" tf:"content_embedded"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

// AutomationDscNodeconfigurationSpec defines the desired state of AutomationDscNodeconfiguration
type AutomationDscNodeconfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AutomationDscNodeconfigurationParameters `json:"forProvider"`
}

// AutomationDscNodeconfigurationStatus defines the observed state of AutomationDscNodeconfiguration.
type AutomationDscNodeconfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AutomationDscNodeconfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationDscNodeconfiguration is the Schema for the AutomationDscNodeconfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AutomationDscNodeconfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutomationDscNodeconfigurationSpec   `json:"spec"`
	Status            AutomationDscNodeconfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationDscNodeconfigurationList contains a list of AutomationDscNodeconfigurations
type AutomationDscNodeconfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutomationDscNodeconfiguration `json:"items"`
}

// Repository type metadata.
var (
	AutomationDscNodeconfigurationKind             = "AutomationDscNodeconfiguration"
	AutomationDscNodeconfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: AutomationDscNodeconfigurationKind}.String()
	AutomationDscNodeconfigurationKindAPIVersion   = AutomationDscNodeconfigurationKind + "." + GroupVersion.String()
	AutomationDscNodeconfigurationGroupVersionKind = GroupVersion.WithKind(AutomationDscNodeconfigurationKind)
)

func init() {
	SchemeBuilder.Register(&AutomationDscNodeconfiguration{}, &AutomationDscNodeconfigurationList{})
}
