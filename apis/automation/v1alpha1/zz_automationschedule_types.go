/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutomationScheduleObservation struct {
}

type AutomationScheduleParameters struct {

	// +kubebuilder:validation:Required
	AutomationAccountName string `json:"automationAccountName" tf:"automation_account_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	ExpiryTime *string `json:"expiryTime,omitempty" tf:"expiry_time"`

	// +kubebuilder:validation:Required
	Frequency string `json:"frequency" tf:"frequency"`

	// +kubebuilder:validation:Optional
	Interval *int64 `json:"interval,omitempty" tf:"interval"`

	// +kubebuilder:validation:Optional
	MonthDays []int64 `json:"monthDays,omitempty" tf:"month_days"`

	// +kubebuilder:validation:Optional
	MonthlyOccurrence []MonthlyOccurrenceParameters `json:"monthlyOccurrence,omitempty" tf:"monthly_occurrence"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time"`

	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone"`

	// +kubebuilder:validation:Optional
	WeekDays []string `json:"weekDays,omitempty" tf:"week_days"`
}

type MonthlyOccurrenceObservation struct {
}

type MonthlyOccurrenceParameters struct {

	// +kubebuilder:validation:Required
	Day string `json:"day" tf:"day"`

	// +kubebuilder:validation:Required
	Occurrence int64 `json:"occurrence" tf:"occurrence"`
}

// AutomationScheduleSpec defines the desired state of AutomationSchedule
type AutomationScheduleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AutomationScheduleParameters `json:"forProvider"`
}

// AutomationScheduleStatus defines the observed state of AutomationSchedule.
type AutomationScheduleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AutomationScheduleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationSchedule is the Schema for the AutomationSchedules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AutomationSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutomationScheduleSpec   `json:"spec"`
	Status            AutomationScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationScheduleList contains a list of AutomationSchedules
type AutomationScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutomationSchedule `json:"items"`
}

// Repository type metadata.
var (
	AutomationScheduleKind             = "AutomationSchedule"
	AutomationScheduleGroupKind        = schema.GroupKind{Group: Group, Kind: AutomationScheduleKind}.String()
	AutomationScheduleKindAPIVersion   = AutomationScheduleKind + "." + GroupVersion.String()
	AutomationScheduleGroupVersionKind = GroupVersion.WithKind(AutomationScheduleKind)
)

func init() {
	SchemeBuilder.Register(&AutomationSchedule{}, &AutomationScheduleList{})
}
