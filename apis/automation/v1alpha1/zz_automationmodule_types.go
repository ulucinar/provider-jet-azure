/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutomationModuleObservation struct {
}

type AutomationModuleParameters struct {

	// +kubebuilder:validation:Required
	AutomationAccountName string `json:"automationAccountName" tf:"automation_account_name"`

	// +kubebuilder:validation:Required
	ModuleLink []ModuleLinkParameters `json:"moduleLink" tf:"module_link"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

type HashObservation struct {
}

type HashParameters struct {

	// +kubebuilder:validation:Required
	Algorithm string `json:"algorithm" tf:"algorithm"`

	// +kubebuilder:validation:Required
	Value string `json:"value" tf:"value"`
}

type ModuleLinkObservation struct {
}

type ModuleLinkParameters struct {

	// +kubebuilder:validation:Optional
	Hash []HashParameters `json:"hash,omitempty" tf:"hash"`

	// +kubebuilder:validation:Required
	URI string `json:"uri" tf:"uri"`
}

// AutomationModuleSpec defines the desired state of AutomationModule
type AutomationModuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AutomationModuleParameters `json:"forProvider"`
}

// AutomationModuleStatus defines the observed state of AutomationModule.
type AutomationModuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AutomationModuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationModule is the Schema for the AutomationModules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AutomationModule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutomationModuleSpec   `json:"spec"`
	Status            AutomationModuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationModuleList contains a list of AutomationModules
type AutomationModuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutomationModule `json:"items"`
}

// Repository type metadata.
var (
	AutomationModuleKind             = "AutomationModule"
	AutomationModuleGroupKind        = schema.GroupKind{Group: Group, Kind: AutomationModuleKind}.String()
	AutomationModuleKindAPIVersion   = AutomationModuleKind + "." + GroupVersion.String()
	AutomationModuleGroupVersionKind = GroupVersion.WithKind(AutomationModuleKind)
)

func init() {
	SchemeBuilder.Register(&AutomationModule{}, &AutomationModuleList{})
}
