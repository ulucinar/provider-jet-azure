/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupInstanceDiskObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BackupInstanceDiskParameters struct {

	// +kubebuilder:validation:Required
	BackupPolicyID *string `json:"backupPolicyId" tf:"backup_policy_id,omitempty"`

	// +kubebuilder:validation:Required
	DiskID *string `json:"diskId" tf:"disk_id,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	SnapshotResourceGroupName *string `json:"snapshotResourceGroupName,omitempty" tf:"snapshot_resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	SnapshotResourceGroupNameRef *v1.Reference `json:"snapshotResourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SnapshotResourceGroupNameSelector *v1.Selector `json:"snapshotResourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	VaultID *string `json:"vaultId" tf:"vault_id,omitempty"`
}

// BackupInstanceDiskSpec defines the desired state of BackupInstanceDisk
type BackupInstanceDiskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupInstanceDiskParameters `json:"forProvider"`
}

// BackupInstanceDiskStatus defines the observed state of BackupInstanceDisk.
type BackupInstanceDiskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupInstanceDiskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupInstanceDisk is the Schema for the BackupInstanceDisks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type BackupInstanceDisk struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupInstanceDiskSpec   `json:"spec"`
	Status            BackupInstanceDiskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupInstanceDiskList contains a list of BackupInstanceDisks
type BackupInstanceDiskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupInstanceDisk `json:"items"`
}

// Repository type metadata.
var (
	BackupInstanceDisk_Kind             = "BackupInstanceDisk"
	BackupInstanceDisk_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupInstanceDisk_Kind}.String()
	BackupInstanceDisk_KindAPIVersion   = BackupInstanceDisk_Kind + "." + CRDGroupVersion.String()
	BackupInstanceDisk_GroupVersionKind = CRDGroupVersion.WithKind(BackupInstanceDisk_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupInstanceDisk{}, &BackupInstanceDiskList{})
}
