/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApplicationPortsObservation struct {
}

type ApplicationPortsParameters struct {

	// +kubebuilder:validation:Required
	EndPort int64 `json:"endPort" tf:"end_port"`

	// +kubebuilder:validation:Required
	StartPort int64 `json:"startPort" tf:"start_port"`
}

type AzureActiveDirectoryObservation struct {
}

type AzureActiveDirectoryParameters struct {

	// +kubebuilder:validation:Required
	ClientApplicationID string `json:"clientApplicationId" tf:"client_application_id"`

	// +kubebuilder:validation:Required
	ClusterApplicationID string `json:"clusterApplicationId" tf:"cluster_application_id"`

	// +kubebuilder:validation:Required
	TenantID string `json:"tenantId" tf:"tenant_id"`
}

type CertificateCommonNamesObservation struct {
}

type CertificateCommonNamesParameters struct {

	// +kubebuilder:validation:Required
	CommonNames []CommonNamesParameters `json:"commonNames" tf:"common_names"`

	// +kubebuilder:validation:Required
	X509StoreName string `json:"x509StoreName" tf:"x509_store_name"`
}

type CertificateObservation struct {
}

type CertificateParameters struct {

	// +kubebuilder:validation:Required
	Thumbprint string `json:"thumbprint" tf:"thumbprint"`

	// +kubebuilder:validation:Optional
	ThumbprintSecondary *string `json:"thumbprintSecondary,omitempty" tf:"thumbprint_secondary"`

	// +kubebuilder:validation:Required
	X509StoreName string `json:"x509StoreName" tf:"x509_store_name"`
}

type ClientCertificateCommonNameObservation struct {
}

type ClientCertificateCommonNameParameters struct {

	// +kubebuilder:validation:Required
	CommonName string `json:"commonName" tf:"common_name"`

	// +kubebuilder:validation:Required
	IsAdmin bool `json:"isAdmin" tf:"is_admin"`

	// +kubebuilder:validation:Optional
	IssuerThumbprint *string `json:"issuerThumbprint,omitempty" tf:"issuer_thumbprint"`
}

type ClientCertificateThumbprintObservation struct {
}

type ClientCertificateThumbprintParameters struct {

	// +kubebuilder:validation:Required
	IsAdmin bool `json:"isAdmin" tf:"is_admin"`

	// +kubebuilder:validation:Required
	Thumbprint string `json:"thumbprint" tf:"thumbprint"`
}

type CommonNamesObservation struct {
}

type CommonNamesParameters struct {

	// +kubebuilder:validation:Required
	CertificateCommonName string `json:"certificateCommonName" tf:"certificate_common_name"`

	// +kubebuilder:validation:Optional
	CertificateIssuerThumbprint *string `json:"certificateIssuerThumbprint,omitempty" tf:"certificate_issuer_thumbprint"`
}

type DeltaHealthPolicyObservation struct {
}

type DeltaHealthPolicyParameters struct {

	// +kubebuilder:validation:Optional
	MaxDeltaUnhealthyApplicationsPercent *int64 `json:"maxDeltaUnhealthyApplicationsPercent,omitempty" tf:"max_delta_unhealthy_applications_percent"`

	// +kubebuilder:validation:Optional
	MaxDeltaUnhealthyNodesPercent *int64 `json:"maxDeltaUnhealthyNodesPercent,omitempty" tf:"max_delta_unhealthy_nodes_percent"`

	// +kubebuilder:validation:Optional
	MaxUpgradeDomainDeltaUnhealthyNodesPercent *int64 `json:"maxUpgradeDomainDeltaUnhealthyNodesPercent,omitempty" tf:"max_upgrade_domain_delta_unhealthy_nodes_percent"`
}

type DiagnosticsConfigObservation struct {
}

type DiagnosticsConfigParameters struct {

	// +kubebuilder:validation:Required
	BlobEndpoint string `json:"blobEndpoint" tf:"blob_endpoint"`

	// +kubebuilder:validation:Required
	ProtectedAccountKeyName string `json:"protectedAccountKeyName" tf:"protected_account_key_name"`

	// +kubebuilder:validation:Required
	QueueEndpoint string `json:"queueEndpoint" tf:"queue_endpoint"`

	// +kubebuilder:validation:Required
	StorageAccountName string `json:"storageAccountName" tf:"storage_account_name"`

	// +kubebuilder:validation:Required
	TableEndpoint string `json:"tableEndpoint" tf:"table_endpoint"`
}

type EphemeralPortsObservation struct {
}

type EphemeralPortsParameters struct {

	// +kubebuilder:validation:Required
	EndPort int64 `json:"endPort" tf:"end_port"`

	// +kubebuilder:validation:Required
	StartPort int64 `json:"startPort" tf:"start_port"`
}

type FabricSettingsObservation struct {
}

type FabricSettingsParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type HealthPolicyObservation struct {
}

type HealthPolicyParameters struct {

	// +kubebuilder:validation:Optional
	MaxUnhealthyApplicationsPercent *int64 `json:"maxUnhealthyApplicationsPercent,omitempty" tf:"max_unhealthy_applications_percent"`

	// +kubebuilder:validation:Optional
	MaxUnhealthyNodesPercent *int64 `json:"maxUnhealthyNodesPercent,omitempty" tf:"max_unhealthy_nodes_percent"`
}

type NodeTypeObservation struct {
}

type NodeTypeParameters struct {

	// +kubebuilder:validation:Optional
	ApplicationPorts []ApplicationPortsParameters `json:"applicationPorts,omitempty" tf:"application_ports"`

	// +kubebuilder:validation:Optional
	Capacities map[string]string `json:"capacities,omitempty" tf:"capacities"`

	// +kubebuilder:validation:Required
	ClientEndpointPort int64 `json:"clientEndpointPort" tf:"client_endpoint_port"`

	// +kubebuilder:validation:Optional
	DurabilityLevel *string `json:"durabilityLevel,omitempty" tf:"durability_level"`

	// +kubebuilder:validation:Optional
	EphemeralPorts []EphemeralPortsParameters `json:"ephemeralPorts,omitempty" tf:"ephemeral_ports"`

	// +kubebuilder:validation:Required
	HTTPEndpointPort int64 `json:"httpEndpointPort" tf:"http_endpoint_port"`

	// +kubebuilder:validation:Required
	InstanceCount int64 `json:"instanceCount" tf:"instance_count"`

	// +kubebuilder:validation:Required
	IsPrimary bool `json:"isPrimary" tf:"is_primary"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PlacementProperties map[string]string `json:"placementProperties,omitempty" tf:"placement_properties"`

	// +kubebuilder:validation:Optional
	ReverseProxyEndpointPort *int64 `json:"reverseProxyEndpointPort,omitempty" tf:"reverse_proxy_endpoint_port"`
}

type ReverseProxyCertificateCommonNamesCommonNamesObservation struct {
}

type ReverseProxyCertificateCommonNamesCommonNamesParameters struct {

	// +kubebuilder:validation:Required
	CertificateCommonName string `json:"certificateCommonName" tf:"certificate_common_name"`

	// +kubebuilder:validation:Optional
	CertificateIssuerThumbprint *string `json:"certificateIssuerThumbprint,omitempty" tf:"certificate_issuer_thumbprint"`
}

type ReverseProxyCertificateCommonNamesObservation struct {
}

type ReverseProxyCertificateCommonNamesParameters struct {

	// +kubebuilder:validation:Required
	CommonNames []ReverseProxyCertificateCommonNamesCommonNamesParameters `json:"commonNames" tf:"common_names"`

	// +kubebuilder:validation:Required
	X509StoreName string `json:"x509StoreName" tf:"x509_store_name"`
}

type ReverseProxyCertificateObservation struct {
}

type ReverseProxyCertificateParameters struct {

	// +kubebuilder:validation:Required
	Thumbprint string `json:"thumbprint" tf:"thumbprint"`

	// +kubebuilder:validation:Optional
	ThumbprintSecondary *string `json:"thumbprintSecondary,omitempty" tf:"thumbprint_secondary"`

	// +kubebuilder:validation:Required
	X509StoreName string `json:"x509StoreName" tf:"x509_store_name"`
}

type ServiceFabricClusterObservation struct {
	ClusterEndpoint string `json:"clusterEndpoint,omitempty" tf:"cluster_endpoint"`
}

type ServiceFabricClusterParameters struct {

	// +kubebuilder:validation:Optional
	AddOnFeatures []string `json:"addOnFeatures,omitempty" tf:"add_on_features"`

	// +kubebuilder:validation:Optional
	AzureActiveDirectory []AzureActiveDirectoryParameters `json:"azureActiveDirectory,omitempty" tf:"azure_active_directory"`

	// +kubebuilder:validation:Optional
	Certificate []CertificateParameters `json:"certificate,omitempty" tf:"certificate"`

	// +kubebuilder:validation:Optional
	CertificateCommonNames []CertificateCommonNamesParameters `json:"certificateCommonNames,omitempty" tf:"certificate_common_names"`

	// +kubebuilder:validation:Optional
	ClientCertificateCommonName []ClientCertificateCommonNameParameters `json:"clientCertificateCommonName,omitempty" tf:"client_certificate_common_name"`

	// +kubebuilder:validation:Optional
	ClientCertificateThumbprint []ClientCertificateThumbprintParameters `json:"clientCertificateThumbprint,omitempty" tf:"client_certificate_thumbprint"`

	// +kubebuilder:validation:Optional
	ClusterCodeVersion *string `json:"clusterCodeVersion,omitempty" tf:"cluster_code_version"`

	// +kubebuilder:validation:Optional
	DiagnosticsConfig []DiagnosticsConfigParameters `json:"diagnosticsConfig,omitempty" tf:"diagnostics_config"`

	// +kubebuilder:validation:Optional
	FabricSettings []FabricSettingsParameters `json:"fabricSettings,omitempty" tf:"fabric_settings"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	ManagementEndpoint string `json:"managementEndpoint" tf:"management_endpoint"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	NodeType []NodeTypeParameters `json:"nodeType" tf:"node_type"`

	// +kubebuilder:validation:Required
	ReliabilityLevel string `json:"reliabilityLevel" tf:"reliability_level"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	ReverseProxyCertificate []ReverseProxyCertificateParameters `json:"reverseProxyCertificate,omitempty" tf:"reverse_proxy_certificate"`

	// +kubebuilder:validation:Optional
	ReverseProxyCertificateCommonNames []ReverseProxyCertificateCommonNamesParameters `json:"reverseProxyCertificateCommonNames,omitempty" tf:"reverse_proxy_certificate_common_names"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	UpgradeMode string `json:"upgradeMode" tf:"upgrade_mode"`

	// +kubebuilder:validation:Optional
	UpgradePolicy []UpgradePolicyParameters `json:"upgradePolicy,omitempty" tf:"upgrade_policy"`

	// +kubebuilder:validation:Required
	VMImage string `json:"vmImage" tf:"vm_image"`
}

type UpgradePolicyObservation struct {
}

type UpgradePolicyParameters struct {

	// +kubebuilder:validation:Optional
	DeltaHealthPolicy []DeltaHealthPolicyParameters `json:"deltaHealthPolicy,omitempty" tf:"delta_health_policy"`

	// +kubebuilder:validation:Optional
	ForceRestartEnabled *bool `json:"forceRestartEnabled,omitempty" tf:"force_restart_enabled"`

	// +kubebuilder:validation:Optional
	HealthCheckRetryTimeout *string `json:"healthCheckRetryTimeout,omitempty" tf:"health_check_retry_timeout"`

	// +kubebuilder:validation:Optional
	HealthCheckStableDuration *string `json:"healthCheckStableDuration,omitempty" tf:"health_check_stable_duration"`

	// +kubebuilder:validation:Optional
	HealthCheckWaitDuration *string `json:"healthCheckWaitDuration,omitempty" tf:"health_check_wait_duration"`

	// +kubebuilder:validation:Optional
	HealthPolicy []HealthPolicyParameters `json:"healthPolicy,omitempty" tf:"health_policy"`

	// +kubebuilder:validation:Optional
	UpgradeDomainTimeout *string `json:"upgradeDomainTimeout,omitempty" tf:"upgrade_domain_timeout"`

	// +kubebuilder:validation:Optional
	UpgradeReplicaSetCheckTimeout *string `json:"upgradeReplicaSetCheckTimeout,omitempty" tf:"upgrade_replica_set_check_timeout"`

	// +kubebuilder:validation:Optional
	UpgradeTimeout *string `json:"upgradeTimeout,omitempty" tf:"upgrade_timeout"`
}

// ServiceFabricClusterSpec defines the desired state of ServiceFabricCluster
type ServiceFabricClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ServiceFabricClusterParameters `json:"forProvider"`
}

// ServiceFabricClusterStatus defines the observed state of ServiceFabricCluster.
type ServiceFabricClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ServiceFabricClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceFabricCluster is the Schema for the ServiceFabricClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ServiceFabricCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceFabricClusterSpec   `json:"spec"`
	Status            ServiceFabricClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceFabricClusterList contains a list of ServiceFabricClusters
type ServiceFabricClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceFabricCluster `json:"items"`
}

// Repository type metadata.
var (
	ServiceFabricClusterKind             = "ServiceFabricCluster"
	ServiceFabricClusterGroupKind        = schema.GroupKind{Group: Group, Kind: ServiceFabricClusterKind}.String()
	ServiceFabricClusterKindAPIVersion   = ServiceFabricClusterKind + "." + GroupVersion.String()
	ServiceFabricClusterGroupVersionKind = GroupVersion.WithKind(ServiceFabricClusterKind)
)

func init() {
	SchemeBuilder.Register(&ServiceFabricCluster{}, &ServiceFabricClusterList{})
}
