/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this ServiceFabricCluster.
func (mg *ServiceFabricCluster) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServiceFabricCluster.
func (mg *ServiceFabricCluster) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServiceFabricCluster.
func (mg *ServiceFabricCluster) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServiceFabricCluster.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServiceFabricCluster) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServiceFabricCluster.
func (mg *ServiceFabricCluster) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServiceFabricCluster.
func (mg *ServiceFabricCluster) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServiceFabricCluster.
func (mg *ServiceFabricCluster) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServiceFabricCluster.
func (mg *ServiceFabricCluster) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServiceFabricCluster.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServiceFabricCluster) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServiceFabricCluster.
func (mg *ServiceFabricCluster) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ServiceFabricMeshApplication.
func (mg *ServiceFabricMeshApplication) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServiceFabricMeshApplication.
func (mg *ServiceFabricMeshApplication) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServiceFabricMeshApplication.
func (mg *ServiceFabricMeshApplication) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServiceFabricMeshApplication.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServiceFabricMeshApplication) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServiceFabricMeshApplication.
func (mg *ServiceFabricMeshApplication) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServiceFabricMeshApplication.
func (mg *ServiceFabricMeshApplication) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServiceFabricMeshApplication.
func (mg *ServiceFabricMeshApplication) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServiceFabricMeshApplication.
func (mg *ServiceFabricMeshApplication) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServiceFabricMeshApplication.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServiceFabricMeshApplication) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServiceFabricMeshApplication.
func (mg *ServiceFabricMeshApplication) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ServiceFabricMeshLocalNetwork.
func (mg *ServiceFabricMeshLocalNetwork) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServiceFabricMeshLocalNetwork.
func (mg *ServiceFabricMeshLocalNetwork) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServiceFabricMeshLocalNetwork.
func (mg *ServiceFabricMeshLocalNetwork) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServiceFabricMeshLocalNetwork.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServiceFabricMeshLocalNetwork) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServiceFabricMeshLocalNetwork.
func (mg *ServiceFabricMeshLocalNetwork) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServiceFabricMeshLocalNetwork.
func (mg *ServiceFabricMeshLocalNetwork) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServiceFabricMeshLocalNetwork.
func (mg *ServiceFabricMeshLocalNetwork) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServiceFabricMeshLocalNetwork.
func (mg *ServiceFabricMeshLocalNetwork) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServiceFabricMeshLocalNetwork.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServiceFabricMeshLocalNetwork) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServiceFabricMeshLocalNetwork.
func (mg *ServiceFabricMeshLocalNetwork) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ServiceFabricMeshSecret.
func (mg *ServiceFabricMeshSecret) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServiceFabricMeshSecret.
func (mg *ServiceFabricMeshSecret) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServiceFabricMeshSecret.
func (mg *ServiceFabricMeshSecret) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServiceFabricMeshSecret.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServiceFabricMeshSecret) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServiceFabricMeshSecret.
func (mg *ServiceFabricMeshSecret) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServiceFabricMeshSecret.
func (mg *ServiceFabricMeshSecret) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServiceFabricMeshSecret.
func (mg *ServiceFabricMeshSecret) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServiceFabricMeshSecret.
func (mg *ServiceFabricMeshSecret) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServiceFabricMeshSecret.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServiceFabricMeshSecret) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServiceFabricMeshSecret.
func (mg *ServiceFabricMeshSecret) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ServiceFabricMeshSecretValue.
func (mg *ServiceFabricMeshSecretValue) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServiceFabricMeshSecretValue.
func (mg *ServiceFabricMeshSecretValue) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServiceFabricMeshSecretValue.
func (mg *ServiceFabricMeshSecretValue) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServiceFabricMeshSecretValue.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServiceFabricMeshSecretValue) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServiceFabricMeshSecretValue.
func (mg *ServiceFabricMeshSecretValue) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServiceFabricMeshSecretValue.
func (mg *ServiceFabricMeshSecretValue) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServiceFabricMeshSecretValue.
func (mg *ServiceFabricMeshSecretValue) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServiceFabricMeshSecretValue.
func (mg *ServiceFabricMeshSecretValue) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServiceFabricMeshSecretValue.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServiceFabricMeshSecretValue) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServiceFabricMeshSecretValue.
func (mg *ServiceFabricMeshSecretValue) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
