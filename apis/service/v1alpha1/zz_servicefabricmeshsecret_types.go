/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ServiceFabricMeshSecretObservation struct {
}

type ServiceFabricMeshSecretParameters struct {

	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// ServiceFabricMeshSecretSpec defines the desired state of ServiceFabricMeshSecret
type ServiceFabricMeshSecretSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ServiceFabricMeshSecretParameters `json:"forProvider"`
}

// ServiceFabricMeshSecretStatus defines the observed state of ServiceFabricMeshSecret.
type ServiceFabricMeshSecretStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ServiceFabricMeshSecretObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceFabricMeshSecret is the Schema for the ServiceFabricMeshSecrets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ServiceFabricMeshSecret struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceFabricMeshSecretSpec   `json:"spec"`
	Status            ServiceFabricMeshSecretStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceFabricMeshSecretList contains a list of ServiceFabricMeshSecrets
type ServiceFabricMeshSecretList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceFabricMeshSecret `json:"items"`
}

// Repository type metadata.
var (
	ServiceFabricMeshSecretKind             = "ServiceFabricMeshSecret"
	ServiceFabricMeshSecretGroupKind        = schema.GroupKind{Group: Group, Kind: ServiceFabricMeshSecretKind}.String()
	ServiceFabricMeshSecretKindAPIVersion   = ServiceFabricMeshSecretKind + "." + GroupVersion.String()
	ServiceFabricMeshSecretGroupVersionKind = GroupVersion.WithKind(ServiceFabricMeshSecretKind)
)

func init() {
	SchemeBuilder.Register(&ServiceFabricMeshSecret{}, &ServiceFabricMeshSecretList{})
}
