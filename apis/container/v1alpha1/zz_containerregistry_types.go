/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ContainerRegistryIdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type ContainerRegistryIdentityParameters struct {

	// +kubebuilder:validation:Optional
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type ContainerRegistryObservation struct {
	AdminPassword string `json:"adminPassword,omitempty" tf:"admin_password"`

	AdminUsername string `json:"adminUsername,omitempty" tf:"admin_username"`

	LoginServer string `json:"loginServer,omitempty" tf:"login_server"`
}

type ContainerRegistryParameters struct {

	// +kubebuilder:validation:Optional
	AdminEnabled *bool `json:"adminEnabled,omitempty" tf:"admin_enabled"`

	// +kubebuilder:validation:Optional
	Encryption []EncryptionParameters `json:"encryption,omitempty" tf:"encryption"`

	// +kubebuilder:validation:Optional
	GeoreplicationLocations []string `json:"georeplicationLocations,omitempty" tf:"georeplication_locations"`

	// +kubebuilder:validation:Optional
	Georeplications []GeoreplicationsParameters `json:"georeplications,omitempty" tf:"georeplications"`

	// +kubebuilder:validation:Optional
	Identity []ContainerRegistryIdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	NetworkRuleSet []NetworkRuleSetParameters `json:"networkRuleSet,omitempty" tf:"network_rule_set"`

	// +kubebuilder:validation:Optional
	PublicNetworkAccessEnabled *bool `json:"publicNetworkAccessEnabled,omitempty" tf:"public_network_access_enabled"`

	// +kubebuilder:validation:Optional
	QuarantinePolicyEnabled *bool `json:"quarantinePolicyEnabled,omitempty" tf:"quarantine_policy_enabled"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	RetentionPolicy []RetentionPolicyParameters `json:"retentionPolicy,omitempty" tf:"retention_policy"`

	// +kubebuilder:validation:Optional
	Sku *string `json:"sku,omitempty" tf:"sku"`

	// +kubebuilder:validation:Optional
	StorageAccountID *string `json:"storageAccountId,omitempty" tf:"storage_account_id"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TrustPolicy []TrustPolicyParameters `json:"trustPolicy,omitempty" tf:"trust_policy"`

	// +kubebuilder:validation:Optional
	ZoneRedundancyEnabled *bool `json:"zoneRedundancyEnabled,omitempty" tf:"zone_redundancy_enabled"`
}

type EncryptionObservation struct {
}

type EncryptionParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Required
	IdentityClientID string `json:"identityClientId" tf:"identity_client_id"`

	// +kubebuilder:validation:Required
	KeyVaultKeyID string `json:"keyVaultKeyId" tf:"key_vault_key_id"`
}

type GeoreplicationsObservation struct {
}

type GeoreplicationsParameters struct {

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	ZoneRedundancyEnabled *bool `json:"zoneRedundancyEnabled,omitempty" tf:"zone_redundancy_enabled"`
}

type IPRuleObservation struct {
}

type IPRuleParameters struct {

	// +kubebuilder:validation:Required
	Action string `json:"action" tf:"action"`

	// +kubebuilder:validation:Required
	IPRange string `json:"ipRange" tf:"ip_range"`
}

type NetworkRuleSetObservation struct {
}

type NetworkRuleSetParameters struct {

	// +kubebuilder:validation:Optional
	DefaultAction *string `json:"defaultAction,omitempty" tf:"default_action"`

	// +kubebuilder:validation:Optional
	IPRule []IPRuleParameters `json:"ipRule,omitempty" tf:"ip_rule"`

	// +kubebuilder:validation:Optional
	VirtualNetwork []VirtualNetworkParameters `json:"virtualNetwork,omitempty" tf:"virtual_network"`
}

type RetentionPolicyObservation struct {
}

type RetentionPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Days *int64 `json:"days,omitempty" tf:"days"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type TrustPolicyObservation struct {
}

type TrustPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type VirtualNetworkObservation struct {
}

type VirtualNetworkParameters struct {

	// +kubebuilder:validation:Required
	Action string `json:"action" tf:"action"`

	// +kubebuilder:validation:Required
	SubnetID string `json:"subnetId" tf:"subnet_id"`
}

// ContainerRegistrySpec defines the desired state of ContainerRegistry
type ContainerRegistrySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ContainerRegistryParameters `json:"forProvider"`
}

// ContainerRegistryStatus defines the observed state of ContainerRegistry.
type ContainerRegistryStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ContainerRegistryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerRegistry is the Schema for the ContainerRegistrys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ContainerRegistry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ContainerRegistrySpec   `json:"spec"`
	Status            ContainerRegistryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerRegistryList contains a list of ContainerRegistrys
type ContainerRegistryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContainerRegistry `json:"items"`
}

// Repository type metadata.
var (
	ContainerRegistryKind             = "ContainerRegistry"
	ContainerRegistryGroupKind        = schema.GroupKind{Group: Group, Kind: ContainerRegistryKind}.String()
	ContainerRegistryKindAPIVersion   = ContainerRegistryKind + "." + GroupVersion.String()
	ContainerRegistryGroupVersionKind = GroupVersion.WithKind(ContainerRegistryKind)
)

func init() {
	SchemeBuilder.Register(&ContainerRegistry{}, &ContainerRegistryList{})
}
