/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ContainerRegistryWebhookObservation struct {
}

type ContainerRegistryWebhookParameters struct {

	// +kubebuilder:validation:Required
	Actions []string `json:"actions" tf:"actions"`

	// +kubebuilder:validation:Optional
	CustomHeaders map[string]string `json:"customHeaders,omitempty" tf:"custom_headers"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	RegistryName string `json:"registryName" tf:"registry_name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope"`

	// +kubebuilder:validation:Required
	ServiceURI string `json:"serviceUri" tf:"service_uri"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// ContainerRegistryWebhookSpec defines the desired state of ContainerRegistryWebhook
type ContainerRegistryWebhookSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ContainerRegistryWebhookParameters `json:"forProvider"`
}

// ContainerRegistryWebhookStatus defines the observed state of ContainerRegistryWebhook.
type ContainerRegistryWebhookStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ContainerRegistryWebhookObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerRegistryWebhook is the Schema for the ContainerRegistryWebhooks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ContainerRegistryWebhook struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ContainerRegistryWebhookSpec   `json:"spec"`
	Status            ContainerRegistryWebhookStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerRegistryWebhookList contains a list of ContainerRegistryWebhooks
type ContainerRegistryWebhookList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContainerRegistryWebhook `json:"items"`
}

// Repository type metadata.
var (
	ContainerRegistryWebhookKind             = "ContainerRegistryWebhook"
	ContainerRegistryWebhookGroupKind        = schema.GroupKind{Group: Group, Kind: ContainerRegistryWebhookKind}.String()
	ContainerRegistryWebhookKindAPIVersion   = ContainerRegistryWebhookKind + "." + GroupVersion.String()
	ContainerRegistryWebhookGroupVersionKind = GroupVersion.WithKind(ContainerRegistryWebhookKind)
)

func init() {
	SchemeBuilder.Register(&ContainerRegistryWebhook{}, &ContainerRegistryWebhookList{})
}
