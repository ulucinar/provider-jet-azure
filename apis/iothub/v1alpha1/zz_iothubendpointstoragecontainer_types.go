/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IothubEndpointStorageContainerObservation struct {
}

type IothubEndpointStorageContainerParameters struct {

	// +kubebuilder:validation:Optional
	BatchFrequencyInSeconds *int64 `json:"batchFrequencyInSeconds,omitempty" tf:"batch_frequency_in_seconds"`

	// +kubebuilder:validation:Required
	ConnectionString string `json:"connectionString" tf:"connection_string"`

	// +kubebuilder:validation:Required
	ContainerName string `json:"containerName" tf:"container_name"`

	// +kubebuilder:validation:Optional
	Encoding *string `json:"encoding,omitempty" tf:"encoding"`

	// +kubebuilder:validation:Optional
	FileNameFormat *string `json:"fileNameFormat,omitempty" tf:"file_name_format"`

	// +kubebuilder:validation:Required
	IothubName string `json:"iothubName" tf:"iothub_name"`

	// +kubebuilder:validation:Optional
	MaxChunkSizeInBytes *int64 `json:"maxChunkSizeInBytes,omitempty" tf:"max_chunk_size_in_bytes"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

// IothubEndpointStorageContainerSpec defines the desired state of IothubEndpointStorageContainer
type IothubEndpointStorageContainerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       IothubEndpointStorageContainerParameters `json:"forProvider"`
}

// IothubEndpointStorageContainerStatus defines the observed state of IothubEndpointStorageContainer.
type IothubEndpointStorageContainerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          IothubEndpointStorageContainerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IothubEndpointStorageContainer is the Schema for the IothubEndpointStorageContainers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type IothubEndpointStorageContainer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IothubEndpointStorageContainerSpec   `json:"spec"`
	Status            IothubEndpointStorageContainerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IothubEndpointStorageContainerList contains a list of IothubEndpointStorageContainers
type IothubEndpointStorageContainerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IothubEndpointStorageContainer `json:"items"`
}

// Repository type metadata.
var (
	IothubEndpointStorageContainerKind             = "IothubEndpointStorageContainer"
	IothubEndpointStorageContainerGroupKind        = schema.GroupKind{Group: Group, Kind: IothubEndpointStorageContainerKind}.String()
	IothubEndpointStorageContainerKindAPIVersion   = IothubEndpointStorageContainerKind + "." + GroupVersion.String()
	IothubEndpointStorageContainerGroupVersionKind = GroupVersion.WithKind(IothubEndpointStorageContainerKind)
)

func init() {
	SchemeBuilder.Register(&IothubEndpointStorageContainer{}, &IothubEndpointStorageContainerList{})
}
