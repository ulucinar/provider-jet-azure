/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupPolicyVMBackupObservation struct {
}

type BackupPolicyVMBackupParameters struct {

	// +kubebuilder:validation:Required
	Frequency *string `json:"frequency" tf:"frequency,omitempty"`

	// +kubebuilder:validation:Required
	Time *string `json:"time" tf:"time,omitempty"`

	// +kubebuilder:validation:Optional
	Weekdays []*string `json:"weekdays,omitempty" tf:"weekdays,omitempty"`
}

type BackupPolicyVMObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BackupPolicyVMParameters struct {

	// +kubebuilder:validation:Required
	Backup []BackupPolicyVMBackupParameters `json:"backup" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	InstantRestoreRetentionDays *int64 `json:"instantRestoreRetentionDays,omitempty" tf:"instant_restore_retention_days,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	RecoveryVaultName *string `json:"recoveryVaultName" tf:"recovery_vault_name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RetentionDaily []BackupPolicyVMRetentionDailyParameters `json:"retentionDaily,omitempty" tf:"retention_daily,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionMonthly []BackupPolicyVMRetentionMonthlyParameters `json:"retentionMonthly,omitempty" tf:"retention_monthly,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionWeekly []BackupPolicyVMRetentionWeeklyParameters `json:"retentionWeekly,omitempty" tf:"retention_weekly,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionYearly []BackupPolicyVMRetentionYearlyParameters `json:"retentionYearly,omitempty" tf:"retention_yearly,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type BackupPolicyVMRetentionDailyObservation struct {
}

type BackupPolicyVMRetentionDailyParameters struct {

	// +kubebuilder:validation:Required
	Count *int64 `json:"count" tf:"count,omitempty"`
}

type BackupPolicyVMRetentionMonthlyObservation struct {
}

type BackupPolicyVMRetentionMonthlyParameters struct {

	// +kubebuilder:validation:Required
	Count *int64 `json:"count" tf:"count,omitempty"`

	// +kubebuilder:validation:Required
	Weekdays []*string `json:"weekdays" tf:"weekdays,omitempty"`

	// +kubebuilder:validation:Required
	Weeks []*string `json:"weeks" tf:"weeks,omitempty"`
}

type BackupPolicyVMRetentionWeeklyObservation struct {
}

type BackupPolicyVMRetentionWeeklyParameters struct {

	// +kubebuilder:validation:Required
	Count *int64 `json:"count" tf:"count,omitempty"`

	// +kubebuilder:validation:Required
	Weekdays []*string `json:"weekdays" tf:"weekdays,omitempty"`
}

type BackupPolicyVMRetentionYearlyObservation struct {
}

type BackupPolicyVMRetentionYearlyParameters struct {

	// +kubebuilder:validation:Required
	Count *int64 `json:"count" tf:"count,omitempty"`

	// +kubebuilder:validation:Required
	Months []*string `json:"months" tf:"months,omitempty"`

	// +kubebuilder:validation:Required
	Weekdays []*string `json:"weekdays" tf:"weekdays,omitempty"`

	// +kubebuilder:validation:Required
	Weeks []*string `json:"weeks" tf:"weeks,omitempty"`
}

// BackupPolicyVMSpec defines the desired state of BackupPolicyVM
type BackupPolicyVMSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupPolicyVMParameters `json:"forProvider"`
}

// BackupPolicyVMStatus defines the observed state of BackupPolicyVM.
type BackupPolicyVMStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupPolicyVMObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPolicyVM is the Schema for the BackupPolicyVMs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type BackupPolicyVM struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupPolicyVMSpec   `json:"spec"`
	Status            BackupPolicyVMStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPolicyVMList contains a list of BackupPolicyVMs
type BackupPolicyVMList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupPolicyVM `json:"items"`
}

// Repository type metadata.
var (
	BackupPolicyVM_Kind             = "BackupPolicyVM"
	BackupPolicyVM_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupPolicyVM_Kind}.String()
	BackupPolicyVM_KindAPIVersion   = BackupPolicyVM_Kind + "." + CRDGroupVersion.String()
	BackupPolicyVM_GroupVersionKind = CRDGroupVersion.WithKind(BackupPolicyVM_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupPolicyVM{}, &BackupPolicyVMList{})
}
