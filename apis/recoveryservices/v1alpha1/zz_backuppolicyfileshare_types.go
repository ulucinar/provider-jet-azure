/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupObservation struct {
}

type BackupParameters struct {

	// +kubebuilder:validation:Required
	Frequency *string `json:"frequency" tf:"frequency,omitempty"`

	// +kubebuilder:validation:Required
	Time *string `json:"time" tf:"time,omitempty"`
}

type BackupPolicyFileShareObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BackupPolicyFileShareParameters struct {

	// +kubebuilder:validation:Required
	Backup []BackupParameters `json:"backup" tf:"backup,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	RecoveryVaultName *string `json:"recoveryVaultName" tf:"recovery_vault_name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	RetentionDaily []RetentionDailyParameters `json:"retentionDaily" tf:"retention_daily,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionMonthly []RetentionMonthlyParameters `json:"retentionMonthly,omitempty" tf:"retention_monthly,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionWeekly []RetentionWeeklyParameters `json:"retentionWeekly,omitempty" tf:"retention_weekly,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionYearly []RetentionYearlyParameters `json:"retentionYearly,omitempty" tf:"retention_yearly,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type RetentionDailyObservation struct {
}

type RetentionDailyParameters struct {

	// +kubebuilder:validation:Required
	Count *int64 `json:"count" tf:"count,omitempty"`
}

type RetentionMonthlyObservation struct {
}

type RetentionMonthlyParameters struct {

	// +kubebuilder:validation:Required
	Count *int64 `json:"count" tf:"count,omitempty"`

	// +kubebuilder:validation:Required
	Weekdays []*string `json:"weekdays" tf:"weekdays,omitempty"`

	// +kubebuilder:validation:Required
	Weeks []*string `json:"weeks" tf:"weeks,omitempty"`
}

type RetentionWeeklyObservation struct {
}

type RetentionWeeklyParameters struct {

	// +kubebuilder:validation:Required
	Count *int64 `json:"count" tf:"count,omitempty"`

	// +kubebuilder:validation:Required
	Weekdays []*string `json:"weekdays" tf:"weekdays,omitempty"`
}

type RetentionYearlyObservation struct {
}

type RetentionYearlyParameters struct {

	// +kubebuilder:validation:Required
	Count *int64 `json:"count" tf:"count,omitempty"`

	// +kubebuilder:validation:Required
	Months []*string `json:"months" tf:"months,omitempty"`

	// +kubebuilder:validation:Required
	Weekdays []*string `json:"weekdays" tf:"weekdays,omitempty"`

	// +kubebuilder:validation:Required
	Weeks []*string `json:"weeks" tf:"weeks,omitempty"`
}

// BackupPolicyFileShareSpec defines the desired state of BackupPolicyFileShare
type BackupPolicyFileShareSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupPolicyFileShareParameters `json:"forProvider"`
}

// BackupPolicyFileShareStatus defines the observed state of BackupPolicyFileShare.
type BackupPolicyFileShareStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupPolicyFileShareObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPolicyFileShare is the Schema for the BackupPolicyFileShares API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type BackupPolicyFileShare struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupPolicyFileShareSpec   `json:"spec"`
	Status            BackupPolicyFileShareStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPolicyFileShareList contains a list of BackupPolicyFileShares
type BackupPolicyFileShareList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupPolicyFileShare `json:"items"`
}

// Repository type metadata.
var (
	BackupPolicyFileShare_Kind             = "BackupPolicyFileShare"
	BackupPolicyFileShare_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupPolicyFileShare_Kind}.String()
	BackupPolicyFileShare_KindAPIVersion   = BackupPolicyFileShare_Kind + "." + CRDGroupVersion.String()
	BackupPolicyFileShare_GroupVersionKind = CRDGroupVersion.WithKind(BackupPolicyFileShare_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupPolicyFileShare{}, &BackupPolicyFileShareList{})
}
