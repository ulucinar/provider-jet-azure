/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MapsAccountObservation struct {
	PrimaryAccessKey string `json:"primaryAccessKey,omitempty" tf:"primary_access_key"`

	SecondaryAccessKey string `json:"secondaryAccessKey,omitempty" tf:"secondary_access_key"`

	XMsClientID string `json:"xMsClientId,omitempty" tf:"x_ms_client_id"`
}

type MapsAccountParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	SkuName string `json:"skuName" tf:"sku_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// MapsAccountSpec defines the desired state of MapsAccount
type MapsAccountSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MapsAccountParameters `json:"forProvider"`
}

// MapsAccountStatus defines the observed state of MapsAccount.
type MapsAccountStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MapsAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MapsAccount is the Schema for the MapsAccounts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MapsAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MapsAccountSpec   `json:"spec"`
	Status            MapsAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MapsAccountList contains a list of MapsAccounts
type MapsAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MapsAccount `json:"items"`
}

// Repository type metadata.
var (
	MapsAccountKind             = "MapsAccount"
	MapsAccountGroupKind        = schema.GroupKind{Group: Group, Kind: MapsAccountKind}.String()
	MapsAccountKindAPIVersion   = MapsAccountKind + "." + GroupVersion.String()
	MapsAccountGroupVersionKind = GroupVersion.WithKind(MapsAccountKind)
)

func init() {
	SchemeBuilder.Register(&MapsAccount{}, &MapsAccountList{})
}
