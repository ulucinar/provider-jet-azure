/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ScopeMapObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ScopeMapParameters struct {

	// +kubebuilder:validation:Required
	Actions []*string `json:"actions" tf:"actions,omitempty"`

	// +kubebuilder:validation:Required
	ContainerRegistryName *string `json:"containerRegistryName" tf:"container_registry_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`
}

// ScopeMapSpec defines the desired state of ScopeMap
type ScopeMapSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScopeMapParameters `json:"forProvider"`
}

// ScopeMapStatus defines the observed state of ScopeMap.
type ScopeMapStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScopeMapObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ScopeMap is the Schema for the ScopeMaps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ScopeMap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ScopeMapSpec   `json:"spec"`
	Status            ScopeMapStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScopeMapList contains a list of ScopeMaps
type ScopeMapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScopeMap `json:"items"`
}

// Repository type metadata.
var (
	ScopeMap_Kind             = "ScopeMap"
	ScopeMap_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ScopeMap_Kind}.String()
	ScopeMap_KindAPIVersion   = ScopeMap_Kind + "." + CRDGroupVersion.String()
	ScopeMap_GroupVersionKind = CRDGroupVersion.WithKind(ScopeMap_Kind)
)

func init() {
	SchemeBuilder.Register(&ScopeMap{}, &ScopeMapList{})
}
