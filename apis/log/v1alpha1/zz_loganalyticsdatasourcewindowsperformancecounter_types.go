/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type LogAnalyticsDatasourceWindowsPerformanceCounterObservation struct {
}

type LogAnalyticsDatasourceWindowsPerformanceCounterParameters struct {

	// +kubebuilder:validation:Required
	CounterName string `json:"counterName" tf:"counter_name"`

	// +kubebuilder:validation:Required
	InstanceName string `json:"instanceName" tf:"instance_name"`

	// +kubebuilder:validation:Required
	IntervalSeconds int64 `json:"intervalSeconds" tf:"interval_seconds"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ObjectName string `json:"objectName" tf:"object_name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	WorkspaceName string `json:"workspaceName" tf:"workspace_name"`
}

// LogAnalyticsDatasourceWindowsPerformanceCounterSpec defines the desired state of LogAnalyticsDatasourceWindowsPerformanceCounter
type LogAnalyticsDatasourceWindowsPerformanceCounterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LogAnalyticsDatasourceWindowsPerformanceCounterParameters `json:"forProvider"`
}

// LogAnalyticsDatasourceWindowsPerformanceCounterStatus defines the observed state of LogAnalyticsDatasourceWindowsPerformanceCounter.
type LogAnalyticsDatasourceWindowsPerformanceCounterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LogAnalyticsDatasourceWindowsPerformanceCounterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogAnalyticsDatasourceWindowsPerformanceCounter is the Schema for the LogAnalyticsDatasourceWindowsPerformanceCounters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LogAnalyticsDatasourceWindowsPerformanceCounter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogAnalyticsDatasourceWindowsPerformanceCounterSpec   `json:"spec"`
	Status            LogAnalyticsDatasourceWindowsPerformanceCounterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogAnalyticsDatasourceWindowsPerformanceCounterList contains a list of LogAnalyticsDatasourceWindowsPerformanceCounters
type LogAnalyticsDatasourceWindowsPerformanceCounterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogAnalyticsDatasourceWindowsPerformanceCounter `json:"items"`
}

// Repository type metadata.
var (
	LogAnalyticsDatasourceWindowsPerformanceCounterKind             = "LogAnalyticsDatasourceWindowsPerformanceCounter"
	LogAnalyticsDatasourceWindowsPerformanceCounterGroupKind        = schema.GroupKind{Group: Group, Kind: LogAnalyticsDatasourceWindowsPerformanceCounterKind}.String()
	LogAnalyticsDatasourceWindowsPerformanceCounterKindAPIVersion   = LogAnalyticsDatasourceWindowsPerformanceCounterKind + "." + GroupVersion.String()
	LogAnalyticsDatasourceWindowsPerformanceCounterGroupVersionKind = GroupVersion.WithKind(LogAnalyticsDatasourceWindowsPerformanceCounterKind)
)

func init() {
	SchemeBuilder.Register(&LogAnalyticsDatasourceWindowsPerformanceCounter{}, &LogAnalyticsDatasourceWindowsPerformanceCounterList{})
}
