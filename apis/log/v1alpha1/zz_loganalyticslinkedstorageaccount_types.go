/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type LogAnalyticsLinkedStorageAccountObservation struct {
}

type LogAnalyticsLinkedStorageAccountParameters struct {

	// +kubebuilder:validation:Required
	DataSourceType string `json:"dataSourceType" tf:"data_source_type"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	StorageAccountIds []string `json:"storageAccountIds" tf:"storage_account_ids"`

	// +kubebuilder:validation:Required
	WorkspaceResourceID string `json:"workspaceResourceId" tf:"workspace_resource_id"`
}

// LogAnalyticsLinkedStorageAccountSpec defines the desired state of LogAnalyticsLinkedStorageAccount
type LogAnalyticsLinkedStorageAccountSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LogAnalyticsLinkedStorageAccountParameters `json:"forProvider"`
}

// LogAnalyticsLinkedStorageAccountStatus defines the observed state of LogAnalyticsLinkedStorageAccount.
type LogAnalyticsLinkedStorageAccountStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LogAnalyticsLinkedStorageAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogAnalyticsLinkedStorageAccount is the Schema for the LogAnalyticsLinkedStorageAccounts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LogAnalyticsLinkedStorageAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogAnalyticsLinkedStorageAccountSpec   `json:"spec"`
	Status            LogAnalyticsLinkedStorageAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogAnalyticsLinkedStorageAccountList contains a list of LogAnalyticsLinkedStorageAccounts
type LogAnalyticsLinkedStorageAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogAnalyticsLinkedStorageAccount `json:"items"`
}

// Repository type metadata.
var (
	LogAnalyticsLinkedStorageAccountKind             = "LogAnalyticsLinkedStorageAccount"
	LogAnalyticsLinkedStorageAccountGroupKind        = schema.GroupKind{Group: Group, Kind: LogAnalyticsLinkedStorageAccountKind}.String()
	LogAnalyticsLinkedStorageAccountKindAPIVersion   = LogAnalyticsLinkedStorageAccountKind + "." + GroupVersion.String()
	LogAnalyticsLinkedStorageAccountGroupVersionKind = GroupVersion.WithKind(LogAnalyticsLinkedStorageAccountKind)
)

func init() {
	SchemeBuilder.Register(&LogAnalyticsLinkedStorageAccount{}, &LogAnalyticsLinkedStorageAccountList{})
}
