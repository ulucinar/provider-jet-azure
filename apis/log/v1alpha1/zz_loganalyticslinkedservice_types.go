/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type LogAnalyticsLinkedServiceObservation struct {
	Name string `json:"name,omitempty" tf:"name"`
}

type LogAnalyticsLinkedServiceParameters struct {

	// +kubebuilder:validation:Optional
	LinkedServiceName *string `json:"linkedServiceName,omitempty" tf:"linked_service_name"`

	// +kubebuilder:validation:Optional
	ReadAccessID *string `json:"readAccessId,omitempty" tf:"read_access_id"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	WorkspaceID *string `json:"workspaceId,omitempty" tf:"workspace_id"`

	// +kubebuilder:validation:Optional
	WorkspaceName *string `json:"workspaceName,omitempty" tf:"workspace_name"`

	// +kubebuilder:validation:Optional
	WriteAccessID *string `json:"writeAccessId,omitempty" tf:"write_access_id"`
}

// LogAnalyticsLinkedServiceSpec defines the desired state of LogAnalyticsLinkedService
type LogAnalyticsLinkedServiceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LogAnalyticsLinkedServiceParameters `json:"forProvider"`
}

// LogAnalyticsLinkedServiceStatus defines the observed state of LogAnalyticsLinkedService.
type LogAnalyticsLinkedServiceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LogAnalyticsLinkedServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogAnalyticsLinkedService is the Schema for the LogAnalyticsLinkedServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LogAnalyticsLinkedService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogAnalyticsLinkedServiceSpec   `json:"spec"`
	Status            LogAnalyticsLinkedServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogAnalyticsLinkedServiceList contains a list of LogAnalyticsLinkedServices
type LogAnalyticsLinkedServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogAnalyticsLinkedService `json:"items"`
}

// Repository type metadata.
var (
	LogAnalyticsLinkedServiceKind             = "LogAnalyticsLinkedService"
	LogAnalyticsLinkedServiceGroupKind        = schema.GroupKind{Group: Group, Kind: LogAnalyticsLinkedServiceKind}.String()
	LogAnalyticsLinkedServiceKindAPIVersion   = LogAnalyticsLinkedServiceKind + "." + GroupVersion.String()
	LogAnalyticsLinkedServiceGroupVersionKind = GroupVersion.WithKind(LogAnalyticsLinkedServiceKind)
)

func init() {
	SchemeBuilder.Register(&LogAnalyticsLinkedService{}, &LogAnalyticsLinkedServiceList{})
}
