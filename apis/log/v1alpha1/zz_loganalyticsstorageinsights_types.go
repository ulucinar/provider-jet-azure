/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type LogAnalyticsStorageInsightsObservation struct {
}

type LogAnalyticsStorageInsightsParameters struct {

	// +kubebuilder:validation:Optional
	BlobContainerNames []string `json:"blobContainerNames,omitempty" tf:"blob_container_names"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	StorageAccountID string `json:"storageAccountId" tf:"storage_account_id"`

	// +kubebuilder:validation:Required
	StorageAccountKey string `json:"storageAccountKey" tf:"storage_account_key"`

	// +kubebuilder:validation:Optional
	TableNames []string `json:"tableNames,omitempty" tf:"table_names"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	WorkspaceID string `json:"workspaceId" tf:"workspace_id"`
}

// LogAnalyticsStorageInsightsSpec defines the desired state of LogAnalyticsStorageInsights
type LogAnalyticsStorageInsightsSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LogAnalyticsStorageInsightsParameters `json:"forProvider"`
}

// LogAnalyticsStorageInsightsStatus defines the observed state of LogAnalyticsStorageInsights.
type LogAnalyticsStorageInsightsStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LogAnalyticsStorageInsightsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogAnalyticsStorageInsights is the Schema for the LogAnalyticsStorageInsightss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LogAnalyticsStorageInsights struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogAnalyticsStorageInsightsSpec   `json:"spec"`
	Status            LogAnalyticsStorageInsightsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogAnalyticsStorageInsightsList contains a list of LogAnalyticsStorageInsightss
type LogAnalyticsStorageInsightsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogAnalyticsStorageInsights `json:"items"`
}

// Repository type metadata.
var (
	LogAnalyticsStorageInsightsKind             = "LogAnalyticsStorageInsights"
	LogAnalyticsStorageInsightsGroupKind        = schema.GroupKind{Group: Group, Kind: LogAnalyticsStorageInsightsKind}.String()
	LogAnalyticsStorageInsightsKindAPIVersion   = LogAnalyticsStorageInsightsKind + "." + GroupVersion.String()
	LogAnalyticsStorageInsightsGroupVersionKind = GroupVersion.WithKind(LogAnalyticsStorageInsightsKind)
)

func init() {
	SchemeBuilder.Register(&LogAnalyticsStorageInsights{}, &LogAnalyticsStorageInsightsList{})
}
