/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this NatGateway.
func (mg *NatGateway) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this NatGateway.
func (mg *NatGateway) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this NatGateway.
func (mg *NatGateway) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this NatGateway.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *NatGateway) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this NatGateway.
func (mg *NatGateway) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this NatGateway.
func (mg *NatGateway) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this NatGateway.
func (mg *NatGateway) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this NatGateway.
func (mg *NatGateway) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this NatGateway.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *NatGateway) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this NatGateway.
func (mg *NatGateway) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this NatGatewayPublicIpAssociation.
func (mg *NatGatewayPublicIpAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this NatGatewayPublicIpAssociation.
func (mg *NatGatewayPublicIpAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this NatGatewayPublicIpAssociation.
func (mg *NatGatewayPublicIpAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this NatGatewayPublicIpAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *NatGatewayPublicIpAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this NatGatewayPublicIpAssociation.
func (mg *NatGatewayPublicIpAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this NatGatewayPublicIpAssociation.
func (mg *NatGatewayPublicIpAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this NatGatewayPublicIpAssociation.
func (mg *NatGatewayPublicIpAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this NatGatewayPublicIpAssociation.
func (mg *NatGatewayPublicIpAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this NatGatewayPublicIpAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *NatGatewayPublicIpAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this NatGatewayPublicIpAssociation.
func (mg *NatGatewayPublicIpAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this NatGatewayPublicIpPrefixAssociation.
func (mg *NatGatewayPublicIpPrefixAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this NatGatewayPublicIpPrefixAssociation.
func (mg *NatGatewayPublicIpPrefixAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this NatGatewayPublicIpPrefixAssociation.
func (mg *NatGatewayPublicIpPrefixAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this NatGatewayPublicIpPrefixAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *NatGatewayPublicIpPrefixAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this NatGatewayPublicIpPrefixAssociation.
func (mg *NatGatewayPublicIpPrefixAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this NatGatewayPublicIpPrefixAssociation.
func (mg *NatGatewayPublicIpPrefixAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this NatGatewayPublicIpPrefixAssociation.
func (mg *NatGatewayPublicIpPrefixAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this NatGatewayPublicIpPrefixAssociation.
func (mg *NatGatewayPublicIpPrefixAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this NatGatewayPublicIpPrefixAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *NatGatewayPublicIpPrefixAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this NatGatewayPublicIpPrefixAssociation.
func (mg *NatGatewayPublicIpPrefixAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
