/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BackupObservation struct {
}

type BackupParameters struct {

	// +kubebuilder:validation:Optional
	IntervalInMinutes *int64 `json:"intervalInMinutes,omitempty" tf:"interval_in_minutes"`

	// +kubebuilder:validation:Optional
	RetentionInHours *int64 `json:"retentionInHours,omitempty" tf:"retention_in_hours"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type CapabilitiesObservation struct {
}

type CapabilitiesParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`
}

type ConsistencyPolicyObservation struct {
}

type ConsistencyPolicyParameters struct {

	// +kubebuilder:validation:Required
	ConsistencyLevel string `json:"consistencyLevel" tf:"consistency_level"`

	// +kubebuilder:validation:Optional
	MaxIntervalInSeconds *int64 `json:"maxIntervalInSeconds,omitempty" tf:"max_interval_in_seconds"`

	// +kubebuilder:validation:Optional
	MaxStalenessPrefix *int64 `json:"maxStalenessPrefix,omitempty" tf:"max_staleness_prefix"`
}

type CorsRuleObservation struct {
}

type CorsRuleParameters struct {

	// +kubebuilder:validation:Required
	AllowedHeaders []string `json:"allowedHeaders" tf:"allowed_headers"`

	// +kubebuilder:validation:Required
	AllowedMethods []string `json:"allowedMethods" tf:"allowed_methods"`

	// +kubebuilder:validation:Required
	AllowedOrigins []string `json:"allowedOrigins" tf:"allowed_origins"`

	// +kubebuilder:validation:Required
	ExposedHeaders []string `json:"exposedHeaders" tf:"exposed_headers"`

	// +kubebuilder:validation:Required
	MaxAgeInSeconds int64 `json:"maxAgeInSeconds" tf:"max_age_in_seconds"`
}

type CosmosdbAccountObservation struct {
	ConnectionStrings []string `json:"connectionStrings,omitempty" tf:"connection_strings"`

	Endpoint string `json:"endpoint,omitempty" tf:"endpoint"`

	PrimaryKey string `json:"primaryKey,omitempty" tf:"primary_key"`

	PrimaryMasterKey string `json:"primaryMasterKey,omitempty" tf:"primary_master_key"`

	PrimaryReadonlyKey string `json:"primaryReadonlyKey,omitempty" tf:"primary_readonly_key"`

	PrimaryReadonlyMasterKey string `json:"primaryReadonlyMasterKey,omitempty" tf:"primary_readonly_master_key"`

	ReadEndpoints []string `json:"readEndpoints,omitempty" tf:"read_endpoints"`

	SecondaryKey string `json:"secondaryKey,omitempty" tf:"secondary_key"`

	SecondaryMasterKey string `json:"secondaryMasterKey,omitempty" tf:"secondary_master_key"`

	SecondaryReadonlyKey string `json:"secondaryReadonlyKey,omitempty" tf:"secondary_readonly_key"`

	SecondaryReadonlyMasterKey string `json:"secondaryReadonlyMasterKey,omitempty" tf:"secondary_readonly_master_key"`

	WriteEndpoints []string `json:"writeEndpoints,omitempty" tf:"write_endpoints"`
}

type CosmosdbAccountParameters struct {

	// +kubebuilder:validation:Optional
	AccessKeyMetadataWritesEnabled *bool `json:"accessKeyMetadataWritesEnabled,omitempty" tf:"access_key_metadata_writes_enabled"`

	// +kubebuilder:validation:Optional
	AnalyticalStorageEnabled *bool `json:"analyticalStorageEnabled,omitempty" tf:"analytical_storage_enabled"`

	// +kubebuilder:validation:Optional
	Backup []BackupParameters `json:"backup,omitempty" tf:"backup"`

	// +kubebuilder:validation:Optional
	Capabilities []CapabilitiesParameters `json:"capabilities,omitempty" tf:"capabilities"`

	// +kubebuilder:validation:Required
	ConsistencyPolicy []ConsistencyPolicyParameters `json:"consistencyPolicy" tf:"consistency_policy"`

	// +kubebuilder:validation:Optional
	CorsRule []CorsRuleParameters `json:"corsRule,omitempty" tf:"cors_rule"`

	// +kubebuilder:validation:Optional
	EnableAutomaticFailover *bool `json:"enableAutomaticFailover,omitempty" tf:"enable_automatic_failover"`

	// +kubebuilder:validation:Optional
	EnableFreeTier *bool `json:"enableFreeTier,omitempty" tf:"enable_free_tier"`

	// +kubebuilder:validation:Optional
	EnableMultipleWriteLocations *bool `json:"enableMultipleWriteLocations,omitempty" tf:"enable_multiple_write_locations"`

	// +kubebuilder:validation:Required
	GeoLocation []GeoLocationParameters `json:"geoLocation" tf:"geo_location"`

	// +kubebuilder:validation:Optional
	IPRangeFilter *string `json:"ipRangeFilter,omitempty" tf:"ip_range_filter"`

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Optional
	IsVirtualNetworkFilterEnabled *bool `json:"isVirtualNetworkFilterEnabled,omitempty" tf:"is_virtual_network_filter_enabled"`

	// +kubebuilder:validation:Optional
	KeyVaultKeyID *string `json:"keyVaultKeyId,omitempty" tf:"key_vault_key_id"`

	// +kubebuilder:validation:Optional
	Kind *string `json:"kind,omitempty" tf:"kind"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	MongoServerVersion *string `json:"mongoServerVersion,omitempty" tf:"mongo_server_version"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	NetworkACLBypassForAzureServices *bool `json:"networkAclBypassForAzureServices,omitempty" tf:"network_acl_bypass_for_azure_services"`

	// +kubebuilder:validation:Optional
	NetworkACLBypassIds []string `json:"networkAclBypassIds,omitempty" tf:"network_acl_bypass_ids"`

	// +kubebuilder:validation:Required
	OfferType string `json:"offerType" tf:"offer_type"`

	// +kubebuilder:validation:Optional
	PublicNetworkAccessEnabled *bool `json:"publicNetworkAccessEnabled,omitempty" tf:"public_network_access_enabled"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	VirtualNetworkRule []VirtualNetworkRuleParameters `json:"virtualNetworkRule,omitempty" tf:"virtual_network_rule"`
}

type GeoLocationObservation struct {
	ID string `json:"id,omitempty" tf:"id"`
}

type GeoLocationParameters struct {

	// +kubebuilder:validation:Required
	FailoverPriority int64 `json:"failoverPriority" tf:"failover_priority"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix"`

	// +kubebuilder:validation:Optional
	ZoneRedundant *bool `json:"zoneRedundant,omitempty" tf:"zone_redundant"`
}

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type VirtualNetworkRuleObservation struct {
}

type VirtualNetworkRuleParameters struct {

	// +kubebuilder:validation:Required
	ID string `json:"id" tf:"id"`

	// +kubebuilder:validation:Optional
	IgnoreMissingVnetServiceEndpoint *bool `json:"ignoreMissingVnetServiceEndpoint,omitempty" tf:"ignore_missing_vnet_service_endpoint"`
}

// CosmosdbAccountSpec defines the desired state of CosmosdbAccount
type CosmosdbAccountSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CosmosdbAccountParameters `json:"forProvider"`
}

// CosmosdbAccountStatus defines the observed state of CosmosdbAccount.
type CosmosdbAccountStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CosmosdbAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CosmosdbAccount is the Schema for the CosmosdbAccounts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type CosmosdbAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CosmosdbAccountSpec   `json:"spec"`
	Status            CosmosdbAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CosmosdbAccountList contains a list of CosmosdbAccounts
type CosmosdbAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CosmosdbAccount `json:"items"`
}

// Repository type metadata.
var (
	CosmosdbAccountKind             = "CosmosdbAccount"
	CosmosdbAccountGroupKind        = schema.GroupKind{Group: Group, Kind: CosmosdbAccountKind}.String()
	CosmosdbAccountKindAPIVersion   = CosmosdbAccountKind + "." + GroupVersion.String()
	CosmosdbAccountGroupVersionKind = GroupVersion.WithKind(CosmosdbAccountKind)
)

func init() {
	SchemeBuilder.Register(&CosmosdbAccount{}, &CosmosdbAccountList{})
}
