/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CosmosdbSqlTriggerObservation struct {
}

type CosmosdbSqlTriggerParameters struct {

	// +kubebuilder:validation:Required
	Body string `json:"body" tf:"body"`

	// +kubebuilder:validation:Required
	ContainerID string `json:"containerId" tf:"container_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Operation string `json:"operation" tf:"operation"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

// CosmosdbSqlTriggerSpec defines the desired state of CosmosdbSqlTrigger
type CosmosdbSqlTriggerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CosmosdbSqlTriggerParameters `json:"forProvider"`
}

// CosmosdbSqlTriggerStatus defines the observed state of CosmosdbSqlTrigger.
type CosmosdbSqlTriggerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CosmosdbSqlTriggerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CosmosdbSqlTrigger is the Schema for the CosmosdbSqlTriggers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type CosmosdbSqlTrigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CosmosdbSqlTriggerSpec   `json:"spec"`
	Status            CosmosdbSqlTriggerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CosmosdbSqlTriggerList contains a list of CosmosdbSqlTriggers
type CosmosdbSqlTriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CosmosdbSqlTrigger `json:"items"`
}

// Repository type metadata.
var (
	CosmosdbSqlTriggerKind             = "CosmosdbSqlTrigger"
	CosmosdbSqlTriggerGroupKind        = schema.GroupKind{Group: Group, Kind: CosmosdbSqlTriggerKind}.String()
	CosmosdbSqlTriggerKindAPIVersion   = CosmosdbSqlTriggerKind + "." + GroupVersion.String()
	CosmosdbSqlTriggerGroupVersionKind = GroupVersion.WithKind(CosmosdbSqlTriggerKind)
)

func init() {
	SchemeBuilder.Register(&CosmosdbSqlTrigger{}, &CosmosdbSqlTriggerList{})
}
