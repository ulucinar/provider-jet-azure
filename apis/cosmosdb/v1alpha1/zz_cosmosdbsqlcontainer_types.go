/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CompositeIndexIndexObservation struct {
}

type CompositeIndexIndexParameters struct {

	// +kubebuilder:validation:Required
	Order string `json:"order" tf:"order"`

	// +kubebuilder:validation:Required
	Path string `json:"path" tf:"path"`
}

type CosmosdbSqlContainerAutoscaleSettingsObservation struct {
}

type CosmosdbSqlContainerAutoscaleSettingsParameters struct {

	// +kubebuilder:validation:Optional
	MaxThroughput *int64 `json:"maxThroughput,omitempty" tf:"max_throughput"`
}

type CosmosdbSqlContainerConflictResolutionPolicyObservation struct {
}

type CosmosdbSqlContainerConflictResolutionPolicyParameters struct {

	// +kubebuilder:validation:Optional
	ConflictResolutionPath *string `json:"conflictResolutionPath,omitempty" tf:"conflict_resolution_path"`

	// +kubebuilder:validation:Optional
	ConflictResolutionProcedure *string `json:"conflictResolutionProcedure,omitempty" tf:"conflict_resolution_procedure"`

	// +kubebuilder:validation:Required
	Mode string `json:"mode" tf:"mode"`
}

type CosmosdbSqlContainerObservation struct {
}

type CosmosdbSqlContainerParameters struct {

	// +kubebuilder:validation:Required
	AccountName string `json:"accountName" tf:"account_name"`

	// +kubebuilder:validation:Optional
	AnalyticalStorageTTL *int64 `json:"analyticalStorageTtl,omitempty" tf:"analytical_storage_ttl"`

	// +kubebuilder:validation:Optional
	AutoscaleSettings []CosmosdbSqlContainerAutoscaleSettingsParameters `json:"autoscaleSettings,omitempty" tf:"autoscale_settings"`

	// +kubebuilder:validation:Optional
	ConflictResolutionPolicy []CosmosdbSqlContainerConflictResolutionPolicyParameters `json:"conflictResolutionPolicy,omitempty" tf:"conflict_resolution_policy"`

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Optional
	DefaultTTL *int64 `json:"defaultTtl,omitempty" tf:"default_ttl"`

	// +kubebuilder:validation:Optional
	IndexingPolicy []IndexingPolicyParameters `json:"indexingPolicy,omitempty" tf:"indexing_policy"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	PartitionKeyPath string `json:"partitionKeyPath" tf:"partition_key_path"`

	// +kubebuilder:validation:Optional
	PartitionKeyVersion *int64 `json:"partitionKeyVersion,omitempty" tf:"partition_key_version"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Throughput *int64 `json:"throughput,omitempty" tf:"throughput"`

	// +kubebuilder:validation:Optional
	UniqueKey []CosmosdbSqlContainerUniqueKeyParameters `json:"uniqueKey,omitempty" tf:"unique_key"`
}

type CosmosdbSqlContainerUniqueKeyObservation struct {
}

type CosmosdbSqlContainerUniqueKeyParameters struct {

	// +kubebuilder:validation:Required
	Paths []string `json:"paths" tf:"paths"`
}

type ExcludedPathObservation struct {
}

type ExcludedPathParameters struct {

	// +kubebuilder:validation:Required
	Path string `json:"path" tf:"path"`
}

type IncludedPathObservation struct {
}

type IncludedPathParameters struct {

	// +kubebuilder:validation:Required
	Path string `json:"path" tf:"path"`
}

type IndexingPolicyCompositeIndexObservation struct {
}

type IndexingPolicyCompositeIndexParameters struct {

	// +kubebuilder:validation:Required
	Index []CompositeIndexIndexParameters `json:"index" tf:"index"`
}

type IndexingPolicyObservation struct {
}

type IndexingPolicyParameters struct {

	// +kubebuilder:validation:Optional
	CompositeIndex []IndexingPolicyCompositeIndexParameters `json:"compositeIndex,omitempty" tf:"composite_index"`

	// +kubebuilder:validation:Optional
	ExcludedPath []ExcludedPathParameters `json:"excludedPath,omitempty" tf:"excluded_path"`

	// +kubebuilder:validation:Optional
	IncludedPath []IncludedPathParameters `json:"includedPath,omitempty" tf:"included_path"`

	// +kubebuilder:validation:Optional
	IndexingMode *string `json:"indexingMode,omitempty" tf:"indexing_mode"`

	// +kubebuilder:validation:Optional
	SpatialIndex []IndexingPolicySpatialIndexParameters `json:"spatialIndex,omitempty" tf:"spatial_index"`
}

type IndexingPolicySpatialIndexObservation struct {
	Types []string `json:"types,omitempty" tf:"types"`
}

type IndexingPolicySpatialIndexParameters struct {

	// +kubebuilder:validation:Required
	Path string `json:"path" tf:"path"`
}

// CosmosdbSqlContainerSpec defines the desired state of CosmosdbSqlContainer
type CosmosdbSqlContainerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CosmosdbSqlContainerParameters `json:"forProvider"`
}

// CosmosdbSqlContainerStatus defines the observed state of CosmosdbSqlContainer.
type CosmosdbSqlContainerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CosmosdbSqlContainerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CosmosdbSqlContainer is the Schema for the CosmosdbSqlContainers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type CosmosdbSqlContainer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CosmosdbSqlContainerSpec   `json:"spec"`
	Status            CosmosdbSqlContainerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CosmosdbSqlContainerList contains a list of CosmosdbSqlContainers
type CosmosdbSqlContainerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CosmosdbSqlContainer `json:"items"`
}

// Repository type metadata.
var (
	CosmosdbSqlContainerKind             = "CosmosdbSqlContainer"
	CosmosdbSqlContainerGroupKind        = schema.GroupKind{Group: Group, Kind: CosmosdbSqlContainerKind}.String()
	CosmosdbSqlContainerKindAPIVersion   = CosmosdbSqlContainerKind + "." + GroupVersion.String()
	CosmosdbSqlContainerGroupVersionKind = GroupVersion.WithKind(CosmosdbSqlContainerKind)
)

func init() {
	SchemeBuilder.Register(&CosmosdbSqlContainer{}, &CosmosdbSqlContainerList{})
}
