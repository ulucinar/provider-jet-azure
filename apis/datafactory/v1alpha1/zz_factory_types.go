/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FactoryObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FactoryParameters struct {

	// +kubebuilder:validation:Optional
	CustomerManagedKeyID *string `json:"customerManagedKeyId,omitempty" tf:"customer_managed_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	GithubConfiguration []GithubConfigurationParameters `json:"githubConfiguration,omitempty" tf:"github_configuration,omitempty"`

	// +kubebuilder:validation:Optional
	GlobalParameter []GlobalParameterParameters `json:"globalParameter,omitempty" tf:"global_parameter,omitempty"`

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	ManagedVirtualNetworkEnabled *bool `json:"managedVirtualNetworkEnabled,omitempty" tf:"managed_virtual_network_enabled,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PublicNetworkEnabled *bool `json:"publicNetworkEnabled,omitempty" tf:"public_network_enabled,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	VstsConfiguration []VstsConfigurationParameters `json:"vstsConfiguration,omitempty" tf:"vsts_configuration,omitempty"`
}

type GithubConfigurationObservation struct {
}

type GithubConfigurationParameters struct {

	// +kubebuilder:validation:Required
	AccountName *string `json:"accountName" tf:"account_name,omitempty"`

	// +kubebuilder:validation:Required
	BranchName *string `json:"branchName" tf:"branch_name,omitempty"`

	// +kubebuilder:validation:Required
	GitURL *string `json:"gitUrl" tf:"git_url,omitempty"`

	// +kubebuilder:validation:Required
	RepositoryName *string `json:"repositoryName" tf:"repository_name,omitempty"`

	// +kubebuilder:validation:Required
	RootFolder *string `json:"rootFolder" tf:"root_folder,omitempty"`
}

type GlobalParameterObservation struct {
}

type GlobalParameterParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type IdentityObservation struct {
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Optional
	IdentityIds []*string `json:"identityIds,omitempty" tf:"identity_ids,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type VstsConfigurationObservation struct {
}

type VstsConfigurationParameters struct {

	// +kubebuilder:validation:Required
	AccountName *string `json:"accountName" tf:"account_name,omitempty"`

	// +kubebuilder:validation:Required
	BranchName *string `json:"branchName" tf:"branch_name,omitempty"`

	// +kubebuilder:validation:Required
	ProjectName *string `json:"projectName" tf:"project_name,omitempty"`

	// +kubebuilder:validation:Required
	RepositoryName *string `json:"repositoryName" tf:"repository_name,omitempty"`

	// +kubebuilder:validation:Required
	RootFolder *string `json:"rootFolder" tf:"root_folder,omitempty"`

	// +kubebuilder:validation:Required
	TenantID *string `json:"tenantId" tf:"tenant_id,omitempty"`
}

// FactorySpec defines the desired state of Factory
type FactorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FactoryParameters `json:"forProvider"`
}

// FactoryStatus defines the observed state of Factory.
type FactoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FactoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Factory is the Schema for the Factorys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type Factory struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FactorySpec   `json:"spec"`
	Status            FactoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FactoryList contains a list of Factorys
type FactoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Factory `json:"items"`
}

// Repository type metadata.
var (
	Factory_Kind             = "Factory"
	Factory_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Factory_Kind}.String()
	Factory_KindAPIVersion   = Factory_Kind + "." + CRDGroupVersion.String()
	Factory_GroupVersionKind = CRDGroupVersion.WithKind(Factory_Kind)
)

func init() {
	SchemeBuilder.Register(&Factory{}, &FactoryList{})
}
