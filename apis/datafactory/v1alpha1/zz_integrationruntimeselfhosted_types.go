/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IntegrationRuntimeSelfHostedObservation struct {
	AuthKey1 *string `json:"authKey1,omitempty" tf:"auth_key_1,omitempty"`

	AuthKey2 *string `json:"authKey2,omitempty" tf:"auth_key_2,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IntegrationRuntimeSelfHostedParameters struct {

	// +kubebuilder:validation:Required
	DataFactoryName *string `json:"dataFactoryName" tf:"data_factory_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	RbacAuthorization []RbacAuthorizationParameters `json:"rbacAuthorization,omitempty" tf:"rbac_authorization,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`
}

type RbacAuthorizationObservation struct {
}

type RbacAuthorizationParameters struct {

	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`
}

// IntegrationRuntimeSelfHostedSpec defines the desired state of IntegrationRuntimeSelfHosted
type IntegrationRuntimeSelfHostedSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IntegrationRuntimeSelfHostedParameters `json:"forProvider"`
}

// IntegrationRuntimeSelfHostedStatus defines the observed state of IntegrationRuntimeSelfHosted.
type IntegrationRuntimeSelfHostedStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IntegrationRuntimeSelfHostedObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IntegrationRuntimeSelfHosted is the Schema for the IntegrationRuntimeSelfHosteds API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type IntegrationRuntimeSelfHosted struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IntegrationRuntimeSelfHostedSpec   `json:"spec"`
	Status            IntegrationRuntimeSelfHostedStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IntegrationRuntimeSelfHostedList contains a list of IntegrationRuntimeSelfHosteds
type IntegrationRuntimeSelfHostedList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IntegrationRuntimeSelfHosted `json:"items"`
}

// Repository type metadata.
var (
	IntegrationRuntimeSelfHosted_Kind             = "IntegrationRuntimeSelfHosted"
	IntegrationRuntimeSelfHosted_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IntegrationRuntimeSelfHosted_Kind}.String()
	IntegrationRuntimeSelfHosted_KindAPIVersion   = IntegrationRuntimeSelfHosted_Kind + "." + CRDGroupVersion.String()
	IntegrationRuntimeSelfHosted_GroupVersionKind = CRDGroupVersion.WithKind(IntegrationRuntimeSelfHosted_Kind)
)

func init() {
	SchemeBuilder.Register(&IntegrationRuntimeSelfHosted{}, &IntegrationRuntimeSelfHostedList{})
}
