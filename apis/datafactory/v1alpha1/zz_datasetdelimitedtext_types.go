/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AzureBlobFsLocationObservation struct {
}

type AzureBlobFsLocationParameters struct {

	// +kubebuilder:validation:Required
	FileSystem *string `json:"fileSystem" tf:"file_system,omitempty"`

	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type DataSetDelimitedTextAzureBlobStorageLocationObservation struct {
}

type DataSetDelimitedTextAzureBlobStorageLocationParameters struct {

	// +kubebuilder:validation:Required
	Container *string `json:"container" tf:"container,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicFilenameEnabled *bool `json:"dynamicFilenameEnabled,omitempty" tf:"dynamic_filename_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicPathEnabled *bool `json:"dynamicPathEnabled,omitempty" tf:"dynamic_path_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type DataSetDelimitedTextHTTPServerLocationObservation struct {
}

type DataSetDelimitedTextHTTPServerLocationParameters struct {

	// +kubebuilder:validation:Optional
	DynamicFilenameEnabled *bool `json:"dynamicFilenameEnabled,omitempty" tf:"dynamic_filename_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicPathEnabled *bool `json:"dynamicPathEnabled,omitempty" tf:"dynamic_path_enabled,omitempty"`

	// +kubebuilder:validation:Required
	Filename *string `json:"filename" tf:"filename,omitempty"`

	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// +kubebuilder:validation:Required
	RelativeURL *string `json:"relativeUrl" tf:"relative_url,omitempty"`
}

type DataSetDelimitedTextObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DataSetDelimitedTextParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// +kubebuilder:validation:Optional
	Annotations []*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Optional
	AzureBlobFsLocation []AzureBlobFsLocationParameters `json:"azureBlobFsLocation,omitempty" tf:"azure_blob_fs_location,omitempty"`

	// +kubebuilder:validation:Optional
	AzureBlobStorageLocation []DataSetDelimitedTextAzureBlobStorageLocationParameters `json:"azureBlobStorageLocation,omitempty" tf:"azure_blob_storage_location,omitempty"`

	// +kubebuilder:validation:Optional
	ColumnDelimiter *string `json:"columnDelimiter,omitempty" tf:"column_delimiter,omitempty"`

	// +kubebuilder:validation:Optional
	CompressionCodec *string `json:"compressionCodec,omitempty" tf:"compression_codec,omitempty"`

	// +kubebuilder:validation:Optional
	CompressionLevel *string `json:"compressionLevel,omitempty" tf:"compression_level,omitempty"`

	// +kubebuilder:validation:Required
	DataFactoryName *string `json:"dataFactoryName" tf:"data_factory_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// +kubebuilder:validation:Optional
	EscapeCharacter *string `json:"escapeCharacter,omitempty" tf:"escape_character,omitempty"`

	// +kubebuilder:validation:Optional
	FirstRowAsHeader *bool `json:"firstRowAsHeader,omitempty" tf:"first_row_as_header,omitempty"`

	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPServerLocation []DataSetDelimitedTextHTTPServerLocationParameters `json:"httpServerLocation,omitempty" tf:"http_server_location,omitempty"`

	// +kubebuilder:validation:Required
	LinkedServiceName *string `json:"linkedServiceName" tf:"linked_service_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NullValue *string `json:"nullValue,omitempty" tf:"null_value,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	QuoteCharacter *string `json:"quoteCharacter,omitempty" tf:"quote_character,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RowDelimiter *string `json:"rowDelimiter,omitempty" tf:"row_delimiter,omitempty"`

	// +kubebuilder:validation:Optional
	SchemaColumn []DataSetDelimitedTextSchemaColumnParameters `json:"schemaColumn,omitempty" tf:"schema_column,omitempty"`
}

type DataSetDelimitedTextSchemaColumnObservation struct {
}

type DataSetDelimitedTextSchemaColumnParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// DataSetDelimitedTextSpec defines the desired state of DataSetDelimitedText
type DataSetDelimitedTextSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataSetDelimitedTextParameters `json:"forProvider"`
}

// DataSetDelimitedTextStatus defines the observed state of DataSetDelimitedText.
type DataSetDelimitedTextStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataSetDelimitedTextObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataSetDelimitedText is the Schema for the DataSetDelimitedTexts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DataSetDelimitedText struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataSetDelimitedTextSpec   `json:"spec"`
	Status            DataSetDelimitedTextStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataSetDelimitedTextList contains a list of DataSetDelimitedTexts
type DataSetDelimitedTextList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataSetDelimitedText `json:"items"`
}

// Repository type metadata.
var (
	DataSetDelimitedText_Kind             = "DataSetDelimitedText"
	DataSetDelimitedText_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataSetDelimitedText_Kind}.String()
	DataSetDelimitedText_KindAPIVersion   = DataSetDelimitedText_Kind + "." + CRDGroupVersion.String()
	DataSetDelimitedText_GroupVersionKind = CRDGroupVersion.WithKind(DataSetDelimitedText_Kind)
)

func init() {
	SchemeBuilder.Register(&DataSetDelimitedText{}, &DataSetDelimitedTextList{})
}
