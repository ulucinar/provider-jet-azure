/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type LbNatPoolObservation struct {
	FrontendIPConfigurationID string `json:"frontendIpConfigurationId,omitempty" tf:"frontend_ip_configuration_id"`
}

type LbNatPoolParameters struct {

	// +kubebuilder:validation:Required
	BackendPort int64 `json:"backendPort" tf:"backend_port"`

	// +kubebuilder:validation:Required
	FrontendIPConfigurationName string `json:"frontendIpConfigurationName" tf:"frontend_ip_configuration_name"`

	// +kubebuilder:validation:Required
	FrontendPortEnd int64 `json:"frontendPortEnd" tf:"frontend_port_end"`

	// +kubebuilder:validation:Required
	FrontendPortStart int64 `json:"frontendPortStart" tf:"frontend_port_start"`

	// +kubebuilder:validation:Required
	LoadbalancerID string `json:"loadbalancerId" tf:"loadbalancer_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Protocol string `json:"protocol" tf:"protocol"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

// LbNatPoolSpec defines the desired state of LbNatPool
type LbNatPoolSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LbNatPoolParameters `json:"forProvider"`
}

// LbNatPoolStatus defines the observed state of LbNatPool.
type LbNatPoolStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LbNatPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbNatPool is the Schema for the LbNatPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LbNatPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LbNatPoolSpec   `json:"spec"`
	Status            LbNatPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbNatPoolList contains a list of LbNatPools
type LbNatPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbNatPool `json:"items"`
}

// Repository type metadata.
var (
	LbNatPoolKind             = "LbNatPool"
	LbNatPoolGroupKind        = schema.GroupKind{Group: Group, Kind: LbNatPoolKind}.String()
	LbNatPoolKindAPIVersion   = LbNatPoolKind + "." + GroupVersion.String()
	LbNatPoolGroupVersionKind = GroupVersion.WithKind(LbNatPoolKind)
)

func init() {
	SchemeBuilder.Register(&LbNatPool{}, &LbNatPoolList{})
}
