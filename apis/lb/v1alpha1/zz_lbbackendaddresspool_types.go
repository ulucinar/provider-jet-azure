/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BackendAddressObservation struct {
}

type BackendAddressParameters struct {

	// +kubebuilder:validation:Required
	IPAddress string `json:"ipAddress" tf:"ip_address"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	VirtualNetworkID string `json:"virtualNetworkId" tf:"virtual_network_id"`
}

type LbBackendAddressPoolObservation struct {
	BackendIPConfigurations []string `json:"backendIpConfigurations,omitempty" tf:"backend_ip_configurations"`

	LoadBalancingRules []string `json:"loadBalancingRules,omitempty" tf:"load_balancing_rules"`

	OutboundRules []string `json:"outboundRules,omitempty" tf:"outbound_rules"`
}

type LbBackendAddressPoolParameters struct {

	// +kubebuilder:validation:Optional
	BackendAddress []BackendAddressParameters `json:"backendAddress,omitempty" tf:"backend_address"`

	// +kubebuilder:validation:Required
	LoadbalancerID string `json:"loadbalancerId" tf:"loadbalancer_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name"`
}

// LbBackendAddressPoolSpec defines the desired state of LbBackendAddressPool
type LbBackendAddressPoolSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LbBackendAddressPoolParameters `json:"forProvider"`
}

// LbBackendAddressPoolStatus defines the observed state of LbBackendAddressPool.
type LbBackendAddressPoolStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LbBackendAddressPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbBackendAddressPool is the Schema for the LbBackendAddressPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LbBackendAddressPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LbBackendAddressPoolSpec   `json:"spec"`
	Status            LbBackendAddressPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbBackendAddressPoolList contains a list of LbBackendAddressPools
type LbBackendAddressPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbBackendAddressPool `json:"items"`
}

// Repository type metadata.
var (
	LbBackendAddressPoolKind             = "LbBackendAddressPool"
	LbBackendAddressPoolGroupKind        = schema.GroupKind{Group: Group, Kind: LbBackendAddressPoolKind}.String()
	LbBackendAddressPoolKindAPIVersion   = LbBackendAddressPoolKind + "." + GroupVersion.String()
	LbBackendAddressPoolGroupVersionKind = GroupVersion.WithKind(LbBackendAddressPoolKind)
)

func init() {
	SchemeBuilder.Register(&LbBackendAddressPool{}, &LbBackendAddressPoolList{})
}
