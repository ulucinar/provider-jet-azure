/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type LbRuleObservation struct {
	FrontendIPConfigurationID string `json:"frontendIpConfigurationId,omitempty" tf:"frontend_ip_configuration_id"`
}

type LbRuleParameters struct {

	// +kubebuilder:validation:Optional
	BackendAddressPoolID *string `json:"backendAddressPoolId,omitempty" tf:"backend_address_pool_id"`

	// +kubebuilder:validation:Required
	BackendPort int64 `json:"backendPort" tf:"backend_port"`

	// +kubebuilder:validation:Optional
	DisableOutboundSnat *bool `json:"disableOutboundSnat,omitempty" tf:"disable_outbound_snat"`

	// +kubebuilder:validation:Optional
	EnableFloatingIP *bool `json:"enableFloatingIp,omitempty" tf:"enable_floating_ip"`

	// +kubebuilder:validation:Optional
	EnableTCPReset *bool `json:"enableTcpReset,omitempty" tf:"enable_tcp_reset"`

	// +kubebuilder:validation:Required
	FrontendIPConfigurationName string `json:"frontendIpConfigurationName" tf:"frontend_ip_configuration_name"`

	// +kubebuilder:validation:Required
	FrontendPort int64 `json:"frontendPort" tf:"frontend_port"`

	// +kubebuilder:validation:Optional
	IdleTimeoutInMinutes *int64 `json:"idleTimeoutInMinutes,omitempty" tf:"idle_timeout_in_minutes"`

	// +kubebuilder:validation:Optional
	LoadDistribution *string `json:"loadDistribution,omitempty" tf:"load_distribution"`

	// +kubebuilder:validation:Required
	LoadbalancerID string `json:"loadbalancerId" tf:"loadbalancer_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	ProbeID *string `json:"probeId,omitempty" tf:"probe_id"`

	// +kubebuilder:validation:Required
	Protocol string `json:"protocol" tf:"protocol"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

// LbRuleSpec defines the desired state of LbRule
type LbRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LbRuleParameters `json:"forProvider"`
}

// LbRuleStatus defines the observed state of LbRule.
type LbRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LbRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbRule is the Schema for the LbRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LbRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LbRuleSpec   `json:"spec"`
	Status            LbRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbRuleList contains a list of LbRules
type LbRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbRule `json:"items"`
}

// Repository type metadata.
var (
	LbRuleKind             = "LbRule"
	LbRuleGroupKind        = schema.GroupKind{Group: Group, Kind: LbRuleKind}.String()
	LbRuleKindAPIVersion   = LbRuleKind + "." + GroupVersion.String()
	LbRuleGroupVersionKind = GroupVersion.WithKind(LbRuleKind)
)

func init() {
	SchemeBuilder.Register(&LbRule{}, &LbRuleList{})
}
