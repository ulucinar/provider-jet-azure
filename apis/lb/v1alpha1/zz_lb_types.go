/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type FrontendIPConfigurationObservation struct {
	ID string `json:"id,omitempty" tf:"id"`

	InboundNatRules []string `json:"inboundNatRules,omitempty" tf:"inbound_nat_rules"`

	LoadBalancerRules []string `json:"loadBalancerRules,omitempty" tf:"load_balancer_rules"`

	OutboundRules []string `json:"outboundRules,omitempty" tf:"outbound_rules"`
}

type FrontendIPConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address"`

	// +kubebuilder:validation:Optional
	PrivateIPAddressAllocation *string `json:"privateIpAddressAllocation,omitempty" tf:"private_ip_address_allocation"`

	// +kubebuilder:validation:Optional
	PrivateIPAddressVersion *string `json:"privateIpAddressVersion,omitempty" tf:"private_ip_address_version"`

	// +kubebuilder:validation:Optional
	PublicIPAddressID *string `json:"publicIpAddressId,omitempty" tf:"public_ip_address_id"`

	// +kubebuilder:validation:Optional
	PublicIPPrefixID *string `json:"publicIpPrefixId,omitempty" tf:"public_ip_prefix_id"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Optional
	Zones []string `json:"zones,omitempty" tf:"zones"`
}

type LbObservation struct {
	PrivateIPAddress string `json:"privateIpAddress,omitempty" tf:"private_ip_address"`

	PrivateIPAddresses []string `json:"privateIpAddresses,omitempty" tf:"private_ip_addresses"`
}

type LbParameters struct {

	// +kubebuilder:validation:Optional
	FrontendIPConfiguration []FrontendIPConfigurationParameters `json:"frontendIpConfiguration,omitempty" tf:"frontend_ip_configuration"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Sku *string `json:"sku,omitempty" tf:"sku"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// LbSpec defines the desired state of Lb
type LbSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LbParameters `json:"forProvider"`
}

// LbStatus defines the observed state of Lb.
type LbStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LbObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Lb is the Schema for the Lbs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type Lb struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LbSpec   `json:"spec"`
	Status            LbStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbList contains a list of Lbs
type LbList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Lb `json:"items"`
}

// Repository type metadata.
var (
	LbKind             = "Lb"
	LbGroupKind        = schema.GroupKind{Group: Group, Kind: LbKind}.String()
	LbKindAPIVersion   = LbKind + "." + GroupVersion.String()
	LbGroupVersionKind = GroupVersion.WithKind(LbKind)
)

func init() {
	SchemeBuilder.Register(&Lb{}, &LbList{})
}
