/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type SiteRecoveryProtectionContainerObservation struct {
}

type SiteRecoveryProtectionContainerParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	RecoveryFabricName string `json:"recoveryFabricName" tf:"recovery_fabric_name"`

	// +kubebuilder:validation:Required
	RecoveryVaultName string `json:"recoveryVaultName" tf:"recovery_vault_name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

// SiteRecoveryProtectionContainerSpec defines the desired state of SiteRecoveryProtectionContainer
type SiteRecoveryProtectionContainerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SiteRecoveryProtectionContainerParameters `json:"forProvider"`
}

// SiteRecoveryProtectionContainerStatus defines the observed state of SiteRecoveryProtectionContainer.
type SiteRecoveryProtectionContainerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SiteRecoveryProtectionContainerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SiteRecoveryProtectionContainer is the Schema for the SiteRecoveryProtectionContainers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SiteRecoveryProtectionContainer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SiteRecoveryProtectionContainerSpec   `json:"spec"`
	Status            SiteRecoveryProtectionContainerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SiteRecoveryProtectionContainerList contains a list of SiteRecoveryProtectionContainers
type SiteRecoveryProtectionContainerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SiteRecoveryProtectionContainer `json:"items"`
}

// Repository type metadata.
var (
	SiteRecoveryProtectionContainerKind             = "SiteRecoveryProtectionContainer"
	SiteRecoveryProtectionContainerGroupKind        = schema.GroupKind{Group: Group, Kind: SiteRecoveryProtectionContainerKind}.String()
	SiteRecoveryProtectionContainerKindAPIVersion   = SiteRecoveryProtectionContainerKind + "." + GroupVersion.String()
	SiteRecoveryProtectionContainerGroupVersionKind = GroupVersion.WithKind(SiteRecoveryProtectionContainerKind)
)

func init() {
	SchemeBuilder.Register(&SiteRecoveryProtectionContainer{}, &SiteRecoveryProtectionContainerList{})
}
