/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MariadbFirewallRuleObservation struct {
}

type MariadbFirewallRuleParameters struct {

	// +kubebuilder:validation:Required
	EndIPAddress string `json:"endIpAddress" tf:"end_ip_address"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	ServerName string `json:"serverName" tf:"server_name"`

	// +kubebuilder:validation:Required
	StartIPAddress string `json:"startIpAddress" tf:"start_ip_address"`
}

// MariadbFirewallRuleSpec defines the desired state of MariadbFirewallRule
type MariadbFirewallRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MariadbFirewallRuleParameters `json:"forProvider"`
}

// MariadbFirewallRuleStatus defines the observed state of MariadbFirewallRule.
type MariadbFirewallRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MariadbFirewallRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MariadbFirewallRule is the Schema for the MariadbFirewallRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MariadbFirewallRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MariadbFirewallRuleSpec   `json:"spec"`
	Status            MariadbFirewallRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MariadbFirewallRuleList contains a list of MariadbFirewallRules
type MariadbFirewallRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MariadbFirewallRule `json:"items"`
}

// Repository type metadata.
var (
	MariadbFirewallRuleKind             = "MariadbFirewallRule"
	MariadbFirewallRuleGroupKind        = schema.GroupKind{Group: Group, Kind: MariadbFirewallRuleKind}.String()
	MariadbFirewallRuleKindAPIVersion   = MariadbFirewallRuleKind + "." + GroupVersion.String()
	MariadbFirewallRuleGroupVersionKind = GroupVersion.WithKind(MariadbFirewallRuleKind)
)

func init() {
	SchemeBuilder.Register(&MariadbFirewallRule{}, &MariadbFirewallRuleList{})
}
