/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MariadbServerObservation struct {
	Fqdn string `json:"fqdn,omitempty" tf:"fqdn"`
}

type MariadbServerParameters struct {

	// +kubebuilder:validation:Optional
	AdministratorLogin *string `json:"administratorLogin,omitempty" tf:"administrator_login"`

	// +kubebuilder:validation:Optional
	AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty" tf:"administrator_login_password"`

	// +kubebuilder:validation:Optional
	AutoGrowEnabled *bool `json:"autoGrowEnabled,omitempty" tf:"auto_grow_enabled"`

	// +kubebuilder:validation:Optional
	BackupRetentionDays *int64 `json:"backupRetentionDays,omitempty" tf:"backup_retention_days"`

	// +kubebuilder:validation:Optional
	CreateMode *string `json:"createMode,omitempty" tf:"create_mode"`

	// +kubebuilder:validation:Optional
	CreationSourceServerID *string `json:"creationSourceServerId,omitempty" tf:"creation_source_server_id"`

	// +kubebuilder:validation:Optional
	GeoRedundantBackupEnabled *bool `json:"geoRedundantBackupEnabled,omitempty" tf:"geo_redundant_backup_enabled"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PublicNetworkAccessEnabled *bool `json:"publicNetworkAccessEnabled,omitempty" tf:"public_network_access_enabled"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	RestorePointInTime *string `json:"restorePointInTime,omitempty" tf:"restore_point_in_time"`

	// +kubebuilder:validation:Required
	SkuName string `json:"skuName" tf:"sku_name"`

	// +kubebuilder:validation:Optional
	SslEnforcement *string `json:"sslEnforcement,omitempty" tf:"ssl_enforcement"`

	// +kubebuilder:validation:Optional
	SslEnforcementEnabled *bool `json:"sslEnforcementEnabled,omitempty" tf:"ssl_enforcement_enabled"`

	// +kubebuilder:validation:Optional
	StorageMb *int64 `json:"storageMb,omitempty" tf:"storage_mb"`

	// +kubebuilder:validation:Optional
	StorageProfile []StorageProfileParameters `json:"storageProfile,omitempty" tf:"storage_profile"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	Version string `json:"version" tf:"version"`
}

type StorageProfileObservation struct {
}

type StorageProfileParameters struct {

	// +kubebuilder:validation:Optional
	AutoGrow *string `json:"autoGrow,omitempty" tf:"auto_grow"`

	// +kubebuilder:validation:Optional
	BackupRetentionDays *int64 `json:"backupRetentionDays,omitempty" tf:"backup_retention_days"`

	// +kubebuilder:validation:Optional
	GeoRedundantBackup *string `json:"geoRedundantBackup,omitempty" tf:"geo_redundant_backup"`

	// +kubebuilder:validation:Optional
	StorageMb *int64 `json:"storageMb,omitempty" tf:"storage_mb"`
}

// MariadbServerSpec defines the desired state of MariadbServer
type MariadbServerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MariadbServerParameters `json:"forProvider"`
}

// MariadbServerStatus defines the observed state of MariadbServer.
type MariadbServerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MariadbServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MariadbServer is the Schema for the MariadbServers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MariadbServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MariadbServerSpec   `json:"spec"`
	Status            MariadbServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MariadbServerList contains a list of MariadbServers
type MariadbServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MariadbServer `json:"items"`
}

// Repository type metadata.
var (
	MariadbServerKind             = "MariadbServer"
	MariadbServerGroupKind        = schema.GroupKind{Group: Group, Kind: MariadbServerKind}.String()
	MariadbServerKindAPIVersion   = MariadbServerKind + "." + GroupVersion.String()
	MariadbServerGroupVersionKind = GroupVersion.WithKind(MariadbServerKind)
)

func init() {
	SchemeBuilder.Register(&MariadbServer{}, &MariadbServerList{})
}
