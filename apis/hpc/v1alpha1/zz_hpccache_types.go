/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AccessRuleObservation struct {
}

type AccessRuleParameters struct {

	// +kubebuilder:validation:Required
	Access string `json:"access" tf:"access"`

	// +kubebuilder:validation:Optional
	AnonymousGID *int64 `json:"anonymousGid,omitempty" tf:"anonymous_gid"`

	// +kubebuilder:validation:Optional
	AnonymousUID *int64 `json:"anonymousUid,omitempty" tf:"anonymous_uid"`

	// +kubebuilder:validation:Optional
	Filter *string `json:"filter,omitempty" tf:"filter"`

	// +kubebuilder:validation:Optional
	RootSquashEnabled *bool `json:"rootSquashEnabled,omitempty" tf:"root_squash_enabled"`

	// +kubebuilder:validation:Required
	Scope string `json:"scope" tf:"scope"`

	// +kubebuilder:validation:Optional
	SubmountAccessEnabled *bool `json:"submountAccessEnabled,omitempty" tf:"submount_access_enabled"`

	// +kubebuilder:validation:Optional
	SuidEnabled *bool `json:"suidEnabled,omitempty" tf:"suid_enabled"`
}

type BindObservation struct {
}

type BindParameters struct {

	// +kubebuilder:validation:Required
	Dn string `json:"dn" tf:"dn"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`
}

type DNSObservation struct {
}

type DNSParameters struct {

	// +kubebuilder:validation:Optional
	SearchDomain *string `json:"searchDomain,omitempty" tf:"search_domain"`

	// +kubebuilder:validation:Required
	Servers []string `json:"servers" tf:"servers"`
}

type DefaultAccessPolicyObservation struct {
}

type DefaultAccessPolicyParameters struct {

	// +kubebuilder:validation:Required
	AccessRule []AccessRuleParameters `json:"accessRule" tf:"access_rule"`
}

type DirectoryActiveDirectoryObservation struct {
}

type DirectoryActiveDirectoryParameters struct {

	// +kubebuilder:validation:Required
	CacheNetbiosName string `json:"cacheNetbiosName" tf:"cache_netbios_name"`

	// +kubebuilder:validation:Required
	DNSPrimaryIP string `json:"dnsPrimaryIp" tf:"dns_primary_ip"`

	// +kubebuilder:validation:Optional
	DNSSecondaryIP *string `json:"dnsSecondaryIp,omitempty" tf:"dns_secondary_ip"`

	// +kubebuilder:validation:Required
	DomainName string `json:"domainName" tf:"domain_name"`

	// +kubebuilder:validation:Required
	DomainNetbiosName string `json:"domainNetbiosName" tf:"domain_netbios_name"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type DirectoryFlatFileObservation struct {
}

type DirectoryFlatFileParameters struct {

	// +kubebuilder:validation:Required
	GroupFileURI string `json:"groupFileUri" tf:"group_file_uri"`

	// +kubebuilder:validation:Required
	PasswordFileURI string `json:"passwordFileUri" tf:"password_file_uri"`
}

type DirectoryLdapObservation struct {
}

type DirectoryLdapParameters struct {

	// +kubebuilder:validation:Required
	BaseDn string `json:"baseDn" tf:"base_dn"`

	// +kubebuilder:validation:Optional
	Bind []BindParameters `json:"bind,omitempty" tf:"bind"`

	// +kubebuilder:validation:Optional
	CertificateValidationURI *string `json:"certificateValidationUri,omitempty" tf:"certificate_validation_uri"`

	// +kubebuilder:validation:Optional
	DownloadCertificateAutomatically *bool `json:"downloadCertificateAutomatically,omitempty" tf:"download_certificate_automatically"`

	// +kubebuilder:validation:Optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted"`

	// +kubebuilder:validation:Required
	Server string `json:"server" tf:"server"`
}

type HpcCacheObservation struct {
	MountAddresses []string `json:"mountAddresses,omitempty" tf:"mount_addresses"`
}

type HpcCacheParameters struct {

	// +kubebuilder:validation:Required
	CacheSizeInGb int64 `json:"cacheSizeInGb" tf:"cache_size_in_gb"`

	// +kubebuilder:validation:Optional
	DNS []DNSParameters `json:"dns,omitempty" tf:"dns"`

	// +kubebuilder:validation:Optional
	DefaultAccessPolicy []DefaultAccessPolicyParameters `json:"defaultAccessPolicy,omitempty" tf:"default_access_policy"`

	// +kubebuilder:validation:Optional
	DirectoryActiveDirectory []DirectoryActiveDirectoryParameters `json:"directoryActiveDirectory,omitempty" tf:"directory_active_directory"`

	// +kubebuilder:validation:Optional
	DirectoryFlatFile []DirectoryFlatFileParameters `json:"directoryFlatFile,omitempty" tf:"directory_flat_file"`

	// +kubebuilder:validation:Optional
	DirectoryLdap []DirectoryLdapParameters `json:"directoryLdap,omitempty" tf:"directory_ldap"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	Mtu *int64 `json:"mtu,omitempty" tf:"mtu"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	NtpServer *string `json:"ntpServer,omitempty" tf:"ntp_server"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	RootSquashEnabled *bool `json:"rootSquashEnabled,omitempty" tf:"root_squash_enabled"`

	// +kubebuilder:validation:Required
	SkuName string `json:"skuName" tf:"sku_name"`

	// +kubebuilder:validation:Required
	SubnetID string `json:"subnetId" tf:"subnet_id"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// HpcCacheSpec defines the desired state of HpcCache
type HpcCacheSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       HpcCacheParameters `json:"forProvider"`
}

// HpcCacheStatus defines the observed state of HpcCache.
type HpcCacheStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          HpcCacheObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HpcCache is the Schema for the HpcCaches API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HpcCache struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HpcCacheSpec   `json:"spec"`
	Status            HpcCacheStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HpcCacheList contains a list of HpcCaches
type HpcCacheList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HpcCache `json:"items"`
}

// Repository type metadata.
var (
	HpcCacheKind             = "HpcCache"
	HpcCacheGroupKind        = schema.GroupKind{Group: Group, Kind: HpcCacheKind}.String()
	HpcCacheKindAPIVersion   = HpcCacheKind + "." + GroupVersion.String()
	HpcCacheGroupVersionKind = GroupVersion.WithKind(HpcCacheKind)
)

func init() {
	SchemeBuilder.Register(&HpcCache{}, &HpcCacheList{})
}
