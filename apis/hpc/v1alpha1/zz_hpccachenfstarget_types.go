/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type HpcCacheNfsTargetObservation struct {
}

type HpcCacheNfsTargetParameters struct {

	// +kubebuilder:validation:Required
	CacheName string `json:"cacheName" tf:"cache_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	NamespaceJunction []NamespaceJunctionParameters `json:"namespaceJunction" tf:"namespace_junction"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	TargetHostName string `json:"targetHostName" tf:"target_host_name"`

	// +kubebuilder:validation:Required
	UsageModel string `json:"usageModel" tf:"usage_model"`
}

type NamespaceJunctionObservation struct {
}

type NamespaceJunctionParameters struct {

	// +kubebuilder:validation:Optional
	AccessPolicyName *string `json:"accessPolicyName,omitempty" tf:"access_policy_name"`

	// +kubebuilder:validation:Required
	NamespacePath string `json:"namespacePath" tf:"namespace_path"`

	// +kubebuilder:validation:Required
	NfsExport string `json:"nfsExport" tf:"nfs_export"`

	// +kubebuilder:validation:Optional
	TargetPath *string `json:"targetPath,omitempty" tf:"target_path"`
}

// HpcCacheNfsTargetSpec defines the desired state of HpcCacheNfsTarget
type HpcCacheNfsTargetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       HpcCacheNfsTargetParameters `json:"forProvider"`
}

// HpcCacheNfsTargetStatus defines the observed state of HpcCacheNfsTarget.
type HpcCacheNfsTargetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          HpcCacheNfsTargetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HpcCacheNfsTarget is the Schema for the HpcCacheNfsTargets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HpcCacheNfsTarget struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HpcCacheNfsTargetSpec   `json:"spec"`
	Status            HpcCacheNfsTargetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HpcCacheNfsTargetList contains a list of HpcCacheNfsTargets
type HpcCacheNfsTargetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HpcCacheNfsTarget `json:"items"`
}

// Repository type metadata.
var (
	HpcCacheNfsTargetKind             = "HpcCacheNfsTarget"
	HpcCacheNfsTargetGroupKind        = schema.GroupKind{Group: Group, Kind: HpcCacheNfsTargetKind}.String()
	HpcCacheNfsTargetKindAPIVersion   = HpcCacheNfsTargetKind + "." + GroupVersion.String()
	HpcCacheNfsTargetGroupVersionKind = GroupVersion.WithKind(HpcCacheNfsTargetKind)
)

func init() {
	SchemeBuilder.Register(&HpcCacheNfsTarget{}, &HpcCacheNfsTargetList{})
}
