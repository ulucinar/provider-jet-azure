/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type HpcCacheBlobNfsTargetObservation struct {
}

type HpcCacheBlobNfsTargetParameters struct {

	// +kubebuilder:validation:Optional
	AccessPolicyName *string `json:"accessPolicyName,omitempty" tf:"access_policy_name"`

	// +kubebuilder:validation:Required
	CacheName string `json:"cacheName" tf:"cache_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	NamespacePath string `json:"namespacePath" tf:"namespace_path"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	StorageContainerID string `json:"storageContainerId" tf:"storage_container_id"`

	// +kubebuilder:validation:Required
	UsageModel string `json:"usageModel" tf:"usage_model"`
}

// HpcCacheBlobNfsTargetSpec defines the desired state of HpcCacheBlobNfsTarget
type HpcCacheBlobNfsTargetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       HpcCacheBlobNfsTargetParameters `json:"forProvider"`
}

// HpcCacheBlobNfsTargetStatus defines the observed state of HpcCacheBlobNfsTarget.
type HpcCacheBlobNfsTargetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          HpcCacheBlobNfsTargetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HpcCacheBlobNfsTarget is the Schema for the HpcCacheBlobNfsTargets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HpcCacheBlobNfsTarget struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HpcCacheBlobNfsTargetSpec   `json:"spec"`
	Status            HpcCacheBlobNfsTargetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HpcCacheBlobNfsTargetList contains a list of HpcCacheBlobNfsTargets
type HpcCacheBlobNfsTargetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HpcCacheBlobNfsTarget `json:"items"`
}

// Repository type metadata.
var (
	HpcCacheBlobNfsTargetKind             = "HpcCacheBlobNfsTarget"
	HpcCacheBlobNfsTargetGroupKind        = schema.GroupKind{Group: Group, Kind: HpcCacheBlobNfsTargetKind}.String()
	HpcCacheBlobNfsTargetKindAPIVersion   = HpcCacheBlobNfsTargetKind + "." + GroupVersion.String()
	HpcCacheBlobNfsTargetGroupVersionKind = GroupVersion.WithKind(HpcCacheBlobNfsTargetKind)
)

func init() {
	SchemeBuilder.Register(&HpcCacheBlobNfsTarget{}, &HpcCacheBlobNfsTargetList{})
}
