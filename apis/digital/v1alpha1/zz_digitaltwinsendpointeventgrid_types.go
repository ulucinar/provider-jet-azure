/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DigitalTwinsEndpointEventgridObservation struct {
}

type DigitalTwinsEndpointEventgridParameters struct {

	// +kubebuilder:validation:Optional
	DeadLetterStorageSecret *string `json:"deadLetterStorageSecret,omitempty" tf:"dead_letter_storage_secret"`

	// +kubebuilder:validation:Required
	DigitalTwinsID string `json:"digitalTwinsId" tf:"digital_twins_id"`

	// +kubebuilder:validation:Required
	EventgridTopicEndpoint string `json:"eventgridTopicEndpoint" tf:"eventgrid_topic_endpoint"`

	// +kubebuilder:validation:Required
	EventgridTopicPrimaryAccessKey string `json:"eventgridTopicPrimaryAccessKey" tf:"eventgrid_topic_primary_access_key"`

	// +kubebuilder:validation:Required
	EventgridTopicSecondaryAccessKey string `json:"eventgridTopicSecondaryAccessKey" tf:"eventgrid_topic_secondary_access_key"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`
}

// DigitalTwinsEndpointEventgridSpec defines the desired state of DigitalTwinsEndpointEventgrid
type DigitalTwinsEndpointEventgridSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DigitalTwinsEndpointEventgridParameters `json:"forProvider"`
}

// DigitalTwinsEndpointEventgridStatus defines the observed state of DigitalTwinsEndpointEventgrid.
type DigitalTwinsEndpointEventgridStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DigitalTwinsEndpointEventgridObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DigitalTwinsEndpointEventgrid is the Schema for the DigitalTwinsEndpointEventgrids API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DigitalTwinsEndpointEventgrid struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DigitalTwinsEndpointEventgridSpec   `json:"spec"`
	Status            DigitalTwinsEndpointEventgridStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DigitalTwinsEndpointEventgridList contains a list of DigitalTwinsEndpointEventgrids
type DigitalTwinsEndpointEventgridList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DigitalTwinsEndpointEventgrid `json:"items"`
}

// Repository type metadata.
var (
	DigitalTwinsEndpointEventgridKind             = "DigitalTwinsEndpointEventgrid"
	DigitalTwinsEndpointEventgridGroupKind        = schema.GroupKind{Group: Group, Kind: DigitalTwinsEndpointEventgridKind}.String()
	DigitalTwinsEndpointEventgridKindAPIVersion   = DigitalTwinsEndpointEventgridKind + "." + GroupVersion.String()
	DigitalTwinsEndpointEventgridGroupVersionKind = GroupVersion.WithKind(DigitalTwinsEndpointEventgridKind)
)

func init() {
	SchemeBuilder.Register(&DigitalTwinsEndpointEventgrid{}, &DigitalTwinsEndpointEventgridList{})
}
