/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataLakeStoreIdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type DataLakeStoreIdentityParameters struct {

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type DataLakeStoreObservation struct {
	Endpoint string `json:"endpoint,omitempty" tf:"endpoint"`
}

type DataLakeStoreParameters struct {

	// +kubebuilder:validation:Optional
	EncryptionState *string `json:"encryptionState,omitempty" tf:"encryption_state"`

	// +kubebuilder:validation:Optional
	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type"`

	// +kubebuilder:validation:Optional
	FirewallAllowAzureIps *string `json:"firewallAllowAzureIps,omitempty" tf:"firewall_allow_azure_ips"`

	// +kubebuilder:validation:Optional
	FirewallState *string `json:"firewallState,omitempty" tf:"firewall_state"`

	// +kubebuilder:validation:Optional
	Identity []DataLakeStoreIdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	Tier *string `json:"tier,omitempty" tf:"tier"`
}

// DataLakeStoreSpec defines the desired state of DataLakeStore
type DataLakeStoreSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataLakeStoreParameters `json:"forProvider"`
}

// DataLakeStoreStatus defines the observed state of DataLakeStore.
type DataLakeStoreStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataLakeStoreObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataLakeStore is the Schema for the DataLakeStores API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataLakeStore struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataLakeStoreSpec   `json:"spec"`
	Status            DataLakeStoreStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataLakeStoreList contains a list of DataLakeStores
type DataLakeStoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataLakeStore `json:"items"`
}

// Repository type metadata.
var (
	DataLakeStoreKind             = "DataLakeStore"
	DataLakeStoreGroupKind        = schema.GroupKind{Group: Group, Kind: DataLakeStoreKind}.String()
	DataLakeStoreKindAPIVersion   = DataLakeStoreKind + "." + GroupVersion.String()
	DataLakeStoreGroupVersionKind = GroupVersion.WithKind(DataLakeStoreKind)
)

func init() {
	SchemeBuilder.Register(&DataLakeStore{}, &DataLakeStoreList{})
}
