/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryDataFlowObservation struct {
}

type DataFactoryDataFlowParameters struct {

	// +kubebuilder:validation:Optional
	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	// +kubebuilder:validation:Required
	DataFactoryID string `json:"dataFactoryId" tf:"data_factory_id"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Script string `json:"script" tf:"script"`

	// +kubebuilder:validation:Required
	Sink []SinkParameters `json:"sink" tf:"sink"`

	// +kubebuilder:validation:Required
	Source []SourceParameters `json:"source" tf:"source"`

	// +kubebuilder:validation:Optional
	Transformation []TransformationParameters `json:"transformation,omitempty" tf:"transformation"`
}

type DatasetObservation struct {
}

type DatasetParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type SchemaLinkedServiceObservation struct {
}

type SchemaLinkedServiceParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type SinkLinkedServiceObservation struct {
}

type SinkLinkedServiceParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type SinkObservation struct {
}

type SinkParameters struct {

	// +kubebuilder:validation:Optional
	Dataset []DatasetParameters `json:"dataset,omitempty" tf:"dataset"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	LinkedService []SinkLinkedServiceParameters `json:"linkedService,omitempty" tf:"linked_service"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	SchemaLinkedService []SchemaLinkedServiceParameters `json:"schemaLinkedService,omitempty" tf:"schema_linked_service"`
}

type SourceDatasetObservation struct {
}

type SourceDatasetParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type SourceLinkedServiceObservation struct {
}

type SourceLinkedServiceParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type SourceObservation struct {
}

type SourceParameters struct {

	// +kubebuilder:validation:Optional
	Dataset []SourceDatasetParameters `json:"dataset,omitempty" tf:"dataset"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	LinkedService []SourceLinkedServiceParameters `json:"linkedService,omitempty" tf:"linked_service"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	SchemaLinkedService []SourceSchemaLinkedServiceParameters `json:"schemaLinkedService,omitempty" tf:"schema_linked_service"`
}

type SourceSchemaLinkedServiceObservation struct {
}

type SourceSchemaLinkedServiceParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type TransformationObservation struct {
}

type TransformationParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`
}

// DataFactoryDataFlowSpec defines the desired state of DataFactoryDataFlow
type DataFactoryDataFlowSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryDataFlowParameters `json:"forProvider"`
}

// DataFactoryDataFlowStatus defines the observed state of DataFactoryDataFlow.
type DataFactoryDataFlowStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryDataFlowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryDataFlow is the Schema for the DataFactoryDataFlows API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryDataFlow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryDataFlowSpec   `json:"spec"`
	Status            DataFactoryDataFlowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryDataFlowList contains a list of DataFactoryDataFlows
type DataFactoryDataFlowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryDataFlow `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryDataFlowKind             = "DataFactoryDataFlow"
	DataFactoryDataFlowGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryDataFlowKind}.String()
	DataFactoryDataFlowKindAPIVersion   = DataFactoryDataFlowKind + "." + GroupVersion.String()
	DataFactoryDataFlowGroupVersionKind = GroupVersion.WithKind(DataFactoryDataFlowKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryDataFlow{}, &DataFactoryDataFlowList{})
}
