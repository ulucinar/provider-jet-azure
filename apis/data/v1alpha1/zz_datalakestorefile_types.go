/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataLakeStoreFileObservation struct {
}

type DataLakeStoreFileParameters struct {

	// +kubebuilder:validation:Required
	AccountName string `json:"accountName" tf:"account_name"`

	// +kubebuilder:validation:Required
	LocalFilePath string `json:"localFilePath" tf:"local_file_path"`

	// +kubebuilder:validation:Required
	RemoteFilePath string `json:"remoteFilePath" tf:"remote_file_path"`
}

// DataLakeStoreFileSpec defines the desired state of DataLakeStoreFile
type DataLakeStoreFileSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataLakeStoreFileParameters `json:"forProvider"`
}

// DataLakeStoreFileStatus defines the observed state of DataLakeStoreFile.
type DataLakeStoreFileStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataLakeStoreFileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataLakeStoreFile is the Schema for the DataLakeStoreFiles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataLakeStoreFile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataLakeStoreFileSpec   `json:"spec"`
	Status            DataLakeStoreFileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataLakeStoreFileList contains a list of DataLakeStoreFiles
type DataLakeStoreFileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataLakeStoreFile `json:"items"`
}

// Repository type metadata.
var (
	DataLakeStoreFileKind             = "DataLakeStoreFile"
	DataLakeStoreFileGroupKind        = schema.GroupKind{Group: Group, Kind: DataLakeStoreFileKind}.String()
	DataLakeStoreFileKindAPIVersion   = DataLakeStoreFileKind + "." + GroupVersion.String()
	DataLakeStoreFileGroupVersionKind = GroupVersion.WithKind(DataLakeStoreFileKind)
)

func init() {
	SchemeBuilder.Register(&DataLakeStoreFile{}, &DataLakeStoreFileList{})
}
