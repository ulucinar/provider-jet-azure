/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataLakeAnalyticsFirewallRuleObservation struct {
}

type DataLakeAnalyticsFirewallRuleParameters struct {

	// +kubebuilder:validation:Required
	AccountName string `json:"accountName" tf:"account_name"`

	// +kubebuilder:validation:Required
	EndIPAddress string `json:"endIpAddress" tf:"end_ip_address"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	StartIPAddress string `json:"startIpAddress" tf:"start_ip_address"`
}

// DataLakeAnalyticsFirewallRuleSpec defines the desired state of DataLakeAnalyticsFirewallRule
type DataLakeAnalyticsFirewallRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataLakeAnalyticsFirewallRuleParameters `json:"forProvider"`
}

// DataLakeAnalyticsFirewallRuleStatus defines the observed state of DataLakeAnalyticsFirewallRule.
type DataLakeAnalyticsFirewallRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataLakeAnalyticsFirewallRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataLakeAnalyticsFirewallRule is the Schema for the DataLakeAnalyticsFirewallRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataLakeAnalyticsFirewallRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataLakeAnalyticsFirewallRuleSpec   `json:"spec"`
	Status            DataLakeAnalyticsFirewallRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataLakeAnalyticsFirewallRuleList contains a list of DataLakeAnalyticsFirewallRules
type DataLakeAnalyticsFirewallRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataLakeAnalyticsFirewallRule `json:"items"`
}

// Repository type metadata.
var (
	DataLakeAnalyticsFirewallRuleKind             = "DataLakeAnalyticsFirewallRule"
	DataLakeAnalyticsFirewallRuleGroupKind        = schema.GroupKind{Group: Group, Kind: DataLakeAnalyticsFirewallRuleKind}.String()
	DataLakeAnalyticsFirewallRuleKindAPIVersion   = DataLakeAnalyticsFirewallRuleKind + "." + GroupVersion.String()
	DataLakeAnalyticsFirewallRuleGroupVersionKind = GroupVersion.WithKind(DataLakeAnalyticsFirewallRuleKind)
)

func init() {
	SchemeBuilder.Register(&DataLakeAnalyticsFirewallRule{}, &DataLakeAnalyticsFirewallRuleList{})
}
