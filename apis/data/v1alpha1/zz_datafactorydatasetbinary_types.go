/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AzureBlobStorageLocationObservation struct {
}

type AzureBlobStorageLocationParameters struct {

	// +kubebuilder:validation:Required
	Container string `json:"container" tf:"container"`

	// +kubebuilder:validation:Optional
	DynamicFilenameEnabled *bool `json:"dynamicFilenameEnabled,omitempty" tf:"dynamic_filename_enabled"`

	// +kubebuilder:validation:Optional
	DynamicPathEnabled *bool `json:"dynamicPathEnabled,omitempty" tf:"dynamic_path_enabled"`

	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path"`
}

type CompressionObservation struct {
}

type CompressionParameters struct {

	// +kubebuilder:validation:Optional
	Level *string `json:"level,omitempty" tf:"level"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type DataFactoryDatasetBinaryObservation struct {
}

type DataFactoryDatasetBinaryParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty" tf:"additional_properties"`

	// +kubebuilder:validation:Optional
	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	// +kubebuilder:validation:Optional
	AzureBlobStorageLocation []AzureBlobStorageLocationParameters `json:"azureBlobStorageLocation,omitempty" tf:"azure_blob_storage_location"`

	// +kubebuilder:validation:Optional
	Compression []CompressionParameters `json:"compression,omitempty" tf:"compression"`

	// +kubebuilder:validation:Required
	DataFactoryName string `json:"dataFactoryName" tf:"data_factory_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder"`

	// +kubebuilder:validation:Optional
	HTTPServerLocation []HTTPServerLocationParameters `json:"httpServerLocation,omitempty" tf:"http_server_location"`

	// +kubebuilder:validation:Required
	LinkedServiceName string `json:"linkedServiceName" tf:"linked_service_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	SftpServerLocation []SftpServerLocationParameters `json:"sftpServerLocation,omitempty" tf:"sftp_server_location"`
}

type HTTPServerLocationObservation struct {
}

type HTTPServerLocationParameters struct {

	// +kubebuilder:validation:Optional
	DynamicFilenameEnabled *bool `json:"dynamicFilenameEnabled,omitempty" tf:"dynamic_filename_enabled"`

	// +kubebuilder:validation:Optional
	DynamicPathEnabled *bool `json:"dynamicPathEnabled,omitempty" tf:"dynamic_path_enabled"`

	// +kubebuilder:validation:Required
	Filename string `json:"filename" tf:"filename"`

	// +kubebuilder:validation:Required
	Path string `json:"path" tf:"path"`

	// +kubebuilder:validation:Required
	RelativeURL string `json:"relativeUrl" tf:"relative_url"`
}

type SftpServerLocationObservation struct {
}

type SftpServerLocationParameters struct {

	// +kubebuilder:validation:Optional
	DynamicFilenameEnabled *bool `json:"dynamicFilenameEnabled,omitempty" tf:"dynamic_filename_enabled"`

	// +kubebuilder:validation:Optional
	DynamicPathEnabled *bool `json:"dynamicPathEnabled,omitempty" tf:"dynamic_path_enabled"`

	// +kubebuilder:validation:Required
	Filename string `json:"filename" tf:"filename"`

	// +kubebuilder:validation:Required
	Path string `json:"path" tf:"path"`
}

// DataFactoryDatasetBinarySpec defines the desired state of DataFactoryDatasetBinary
type DataFactoryDatasetBinarySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryDatasetBinaryParameters `json:"forProvider"`
}

// DataFactoryDatasetBinaryStatus defines the observed state of DataFactoryDatasetBinary.
type DataFactoryDatasetBinaryStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryDatasetBinaryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryDatasetBinary is the Schema for the DataFactoryDatasetBinarys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryDatasetBinary struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryDatasetBinarySpec   `json:"spec"`
	Status            DataFactoryDatasetBinaryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryDatasetBinaryList contains a list of DataFactoryDatasetBinarys
type DataFactoryDatasetBinaryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryDatasetBinary `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryDatasetBinaryKind             = "DataFactoryDatasetBinary"
	DataFactoryDatasetBinaryGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryDatasetBinaryKind}.String()
	DataFactoryDatasetBinaryKindAPIVersion   = DataFactoryDatasetBinaryKind + "." + GroupVersion.String()
	DataFactoryDatasetBinaryGroupVersionKind = GroupVersion.WithKind(DataFactoryDatasetBinaryKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryDatasetBinary{}, &DataFactoryDatasetBinaryList{})
}
