/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataLakeAnalyticsAccountObservation struct {
}

type DataLakeAnalyticsAccountParameters struct {

	// +kubebuilder:validation:Required
	DefaultStoreAccountName string `json:"defaultStoreAccountName" tf:"default_store_account_name"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	Tier *string `json:"tier,omitempty" tf:"tier"`
}

// DataLakeAnalyticsAccountSpec defines the desired state of DataLakeAnalyticsAccount
type DataLakeAnalyticsAccountSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataLakeAnalyticsAccountParameters `json:"forProvider"`
}

// DataLakeAnalyticsAccountStatus defines the observed state of DataLakeAnalyticsAccount.
type DataLakeAnalyticsAccountStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataLakeAnalyticsAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataLakeAnalyticsAccount is the Schema for the DataLakeAnalyticsAccounts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataLakeAnalyticsAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataLakeAnalyticsAccountSpec   `json:"spec"`
	Status            DataLakeAnalyticsAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataLakeAnalyticsAccountList contains a list of DataLakeAnalyticsAccounts
type DataLakeAnalyticsAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataLakeAnalyticsAccount `json:"items"`
}

// Repository type metadata.
var (
	DataLakeAnalyticsAccountKind             = "DataLakeAnalyticsAccount"
	DataLakeAnalyticsAccountGroupKind        = schema.GroupKind{Group: Group, Kind: DataLakeAnalyticsAccountKind}.String()
	DataLakeAnalyticsAccountKindAPIVersion   = DataLakeAnalyticsAccountKind + "." + GroupVersion.String()
	DataLakeAnalyticsAccountGroupVersionKind = GroupVersion.WithKind(DataLakeAnalyticsAccountKind)
)

func init() {
	SchemeBuilder.Register(&DataLakeAnalyticsAccount{}, &DataLakeAnalyticsAccountList{})
}
