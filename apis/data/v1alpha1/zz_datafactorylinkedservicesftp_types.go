/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryLinkedServiceSftpObservation struct {
}

type DataFactoryLinkedServiceSftpParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty" tf:"additional_properties"`

	// +kubebuilder:validation:Optional
	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	// +kubebuilder:validation:Required
	AuthenticationType string `json:"authenticationType" tf:"authentication_type"`

	// +kubebuilder:validation:Required
	DataFactoryName string `json:"dataFactoryName" tf:"data_factory_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Host string `json:"host" tf:"host"`

	// +kubebuilder:validation:Optional
	HostKeyFingerprint *string `json:"hostKeyFingerprint,omitempty" tf:"host_key_fingerprint"`

	// +kubebuilder:validation:Optional
	IntegrationRuntimeName *string `json:"integrationRuntimeName,omitempty" tf:"integration_runtime_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Port int64 `json:"port" tf:"port"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	SkipHostKeyValidation *bool `json:"skipHostKeyValidation,omitempty" tf:"skip_host_key_validation"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

// DataFactoryLinkedServiceSftpSpec defines the desired state of DataFactoryLinkedServiceSftp
type DataFactoryLinkedServiceSftpSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryLinkedServiceSftpParameters `json:"forProvider"`
}

// DataFactoryLinkedServiceSftpStatus defines the observed state of DataFactoryLinkedServiceSftp.
type DataFactoryLinkedServiceSftpStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryLinkedServiceSftpObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceSftp is the Schema for the DataFactoryLinkedServiceSftps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryLinkedServiceSftp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryLinkedServiceSftpSpec   `json:"spec"`
	Status            DataFactoryLinkedServiceSftpStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceSftpList contains a list of DataFactoryLinkedServiceSftps
type DataFactoryLinkedServiceSftpList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryLinkedServiceSftp `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryLinkedServiceSftpKind             = "DataFactoryLinkedServiceSftp"
	DataFactoryLinkedServiceSftpGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryLinkedServiceSftpKind}.String()
	DataFactoryLinkedServiceSftpKindAPIVersion   = DataFactoryLinkedServiceSftpKind + "." + GroupVersion.String()
	DataFactoryLinkedServiceSftpGroupVersionKind = GroupVersion.WithKind(DataFactoryLinkedServiceSftpKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryLinkedServiceSftp{}, &DataFactoryLinkedServiceSftpList{})
}
