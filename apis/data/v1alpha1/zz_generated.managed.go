/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this DataFactory.
func (mg *DataFactory) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactory.
func (mg *DataFactory) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactory.
func (mg *DataFactory) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactory.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactory) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactory.
func (mg *DataFactory) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactory.
func (mg *DataFactory) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactory.
func (mg *DataFactory) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactory.
func (mg *DataFactory) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactory.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactory) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactory.
func (mg *DataFactory) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryCustomDataset.
func (mg *DataFactoryCustomDataset) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryCustomDataset.
func (mg *DataFactoryCustomDataset) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryCustomDataset.
func (mg *DataFactoryCustomDataset) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryCustomDataset.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryCustomDataset) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryCustomDataset.
func (mg *DataFactoryCustomDataset) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryCustomDataset.
func (mg *DataFactoryCustomDataset) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryCustomDataset.
func (mg *DataFactoryCustomDataset) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryCustomDataset.
func (mg *DataFactoryCustomDataset) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryCustomDataset.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryCustomDataset) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryCustomDataset.
func (mg *DataFactoryCustomDataset) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryDataFlow.
func (mg *DataFactoryDataFlow) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryDataFlow.
func (mg *DataFactoryDataFlow) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryDataFlow.
func (mg *DataFactoryDataFlow) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryDataFlow.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryDataFlow) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryDataFlow.
func (mg *DataFactoryDataFlow) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryDataFlow.
func (mg *DataFactoryDataFlow) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryDataFlow.
func (mg *DataFactoryDataFlow) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryDataFlow.
func (mg *DataFactoryDataFlow) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryDataFlow.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryDataFlow) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryDataFlow.
func (mg *DataFactoryDataFlow) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryDatasetAzureBlob.
func (mg *DataFactoryDatasetAzureBlob) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryDatasetAzureBlob.
func (mg *DataFactoryDatasetAzureBlob) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryDatasetAzureBlob.
func (mg *DataFactoryDatasetAzureBlob) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryDatasetAzureBlob.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryDatasetAzureBlob) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryDatasetAzureBlob.
func (mg *DataFactoryDatasetAzureBlob) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryDatasetAzureBlob.
func (mg *DataFactoryDatasetAzureBlob) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryDatasetAzureBlob.
func (mg *DataFactoryDatasetAzureBlob) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryDatasetAzureBlob.
func (mg *DataFactoryDatasetAzureBlob) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryDatasetAzureBlob.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryDatasetAzureBlob) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryDatasetAzureBlob.
func (mg *DataFactoryDatasetAzureBlob) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryDatasetBinary.
func (mg *DataFactoryDatasetBinary) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryDatasetBinary.
func (mg *DataFactoryDatasetBinary) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryDatasetBinary.
func (mg *DataFactoryDatasetBinary) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryDatasetBinary.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryDatasetBinary) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryDatasetBinary.
func (mg *DataFactoryDatasetBinary) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryDatasetBinary.
func (mg *DataFactoryDatasetBinary) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryDatasetBinary.
func (mg *DataFactoryDatasetBinary) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryDatasetBinary.
func (mg *DataFactoryDatasetBinary) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryDatasetBinary.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryDatasetBinary) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryDatasetBinary.
func (mg *DataFactoryDatasetBinary) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryDatasetCosmosdbSqlapi.
func (mg *DataFactoryDatasetCosmosdbSqlapi) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryDatasetCosmosdbSqlapi.
func (mg *DataFactoryDatasetCosmosdbSqlapi) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryDatasetCosmosdbSqlapi.
func (mg *DataFactoryDatasetCosmosdbSqlapi) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryDatasetCosmosdbSqlapi.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryDatasetCosmosdbSqlapi) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryDatasetCosmosdbSqlapi.
func (mg *DataFactoryDatasetCosmosdbSqlapi) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryDatasetCosmosdbSqlapi.
func (mg *DataFactoryDatasetCosmosdbSqlapi) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryDatasetCosmosdbSqlapi.
func (mg *DataFactoryDatasetCosmosdbSqlapi) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryDatasetCosmosdbSqlapi.
func (mg *DataFactoryDatasetCosmosdbSqlapi) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryDatasetCosmosdbSqlapi.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryDatasetCosmosdbSqlapi) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryDatasetCosmosdbSqlapi.
func (mg *DataFactoryDatasetCosmosdbSqlapi) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryDatasetDelimitedText.
func (mg *DataFactoryDatasetDelimitedText) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryDatasetDelimitedText.
func (mg *DataFactoryDatasetDelimitedText) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryDatasetDelimitedText.
func (mg *DataFactoryDatasetDelimitedText) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryDatasetDelimitedText.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryDatasetDelimitedText) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryDatasetDelimitedText.
func (mg *DataFactoryDatasetDelimitedText) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryDatasetDelimitedText.
func (mg *DataFactoryDatasetDelimitedText) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryDatasetDelimitedText.
func (mg *DataFactoryDatasetDelimitedText) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryDatasetDelimitedText.
func (mg *DataFactoryDatasetDelimitedText) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryDatasetDelimitedText.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryDatasetDelimitedText) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryDatasetDelimitedText.
func (mg *DataFactoryDatasetDelimitedText) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryDatasetHttp.
func (mg *DataFactoryDatasetHttp) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryDatasetHttp.
func (mg *DataFactoryDatasetHttp) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryDatasetHttp.
func (mg *DataFactoryDatasetHttp) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryDatasetHttp.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryDatasetHttp) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryDatasetHttp.
func (mg *DataFactoryDatasetHttp) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryDatasetHttp.
func (mg *DataFactoryDatasetHttp) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryDatasetHttp.
func (mg *DataFactoryDatasetHttp) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryDatasetHttp.
func (mg *DataFactoryDatasetHttp) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryDatasetHttp.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryDatasetHttp) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryDatasetHttp.
func (mg *DataFactoryDatasetHttp) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryDatasetJson.
func (mg *DataFactoryDatasetJson) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryDatasetJson.
func (mg *DataFactoryDatasetJson) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryDatasetJson.
func (mg *DataFactoryDatasetJson) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryDatasetJson.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryDatasetJson) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryDatasetJson.
func (mg *DataFactoryDatasetJson) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryDatasetJson.
func (mg *DataFactoryDatasetJson) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryDatasetJson.
func (mg *DataFactoryDatasetJson) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryDatasetJson.
func (mg *DataFactoryDatasetJson) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryDatasetJson.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryDatasetJson) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryDatasetJson.
func (mg *DataFactoryDatasetJson) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryDatasetMysql.
func (mg *DataFactoryDatasetMysql) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryDatasetMysql.
func (mg *DataFactoryDatasetMysql) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryDatasetMysql.
func (mg *DataFactoryDatasetMysql) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryDatasetMysql.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryDatasetMysql) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryDatasetMysql.
func (mg *DataFactoryDatasetMysql) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryDatasetMysql.
func (mg *DataFactoryDatasetMysql) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryDatasetMysql.
func (mg *DataFactoryDatasetMysql) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryDatasetMysql.
func (mg *DataFactoryDatasetMysql) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryDatasetMysql.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryDatasetMysql) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryDatasetMysql.
func (mg *DataFactoryDatasetMysql) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryDatasetParquet.
func (mg *DataFactoryDatasetParquet) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryDatasetParquet.
func (mg *DataFactoryDatasetParquet) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryDatasetParquet.
func (mg *DataFactoryDatasetParquet) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryDatasetParquet.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryDatasetParquet) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryDatasetParquet.
func (mg *DataFactoryDatasetParquet) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryDatasetParquet.
func (mg *DataFactoryDatasetParquet) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryDatasetParquet.
func (mg *DataFactoryDatasetParquet) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryDatasetParquet.
func (mg *DataFactoryDatasetParquet) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryDatasetParquet.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryDatasetParquet) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryDatasetParquet.
func (mg *DataFactoryDatasetParquet) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryDatasetPostgresql.
func (mg *DataFactoryDatasetPostgresql) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryDatasetPostgresql.
func (mg *DataFactoryDatasetPostgresql) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryDatasetPostgresql.
func (mg *DataFactoryDatasetPostgresql) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryDatasetPostgresql.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryDatasetPostgresql) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryDatasetPostgresql.
func (mg *DataFactoryDatasetPostgresql) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryDatasetPostgresql.
func (mg *DataFactoryDatasetPostgresql) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryDatasetPostgresql.
func (mg *DataFactoryDatasetPostgresql) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryDatasetPostgresql.
func (mg *DataFactoryDatasetPostgresql) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryDatasetPostgresql.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryDatasetPostgresql) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryDatasetPostgresql.
func (mg *DataFactoryDatasetPostgresql) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryDatasetSnowflake.
func (mg *DataFactoryDatasetSnowflake) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryDatasetSnowflake.
func (mg *DataFactoryDatasetSnowflake) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryDatasetSnowflake.
func (mg *DataFactoryDatasetSnowflake) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryDatasetSnowflake.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryDatasetSnowflake) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryDatasetSnowflake.
func (mg *DataFactoryDatasetSnowflake) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryDatasetSnowflake.
func (mg *DataFactoryDatasetSnowflake) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryDatasetSnowflake.
func (mg *DataFactoryDatasetSnowflake) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryDatasetSnowflake.
func (mg *DataFactoryDatasetSnowflake) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryDatasetSnowflake.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryDatasetSnowflake) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryDatasetSnowflake.
func (mg *DataFactoryDatasetSnowflake) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryDatasetSqlServerTable.
func (mg *DataFactoryDatasetSqlServerTable) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryDatasetSqlServerTable.
func (mg *DataFactoryDatasetSqlServerTable) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryDatasetSqlServerTable.
func (mg *DataFactoryDatasetSqlServerTable) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryDatasetSqlServerTable.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryDatasetSqlServerTable) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryDatasetSqlServerTable.
func (mg *DataFactoryDatasetSqlServerTable) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryDatasetSqlServerTable.
func (mg *DataFactoryDatasetSqlServerTable) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryDatasetSqlServerTable.
func (mg *DataFactoryDatasetSqlServerTable) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryDatasetSqlServerTable.
func (mg *DataFactoryDatasetSqlServerTable) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryDatasetSqlServerTable.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryDatasetSqlServerTable) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryDatasetSqlServerTable.
func (mg *DataFactoryDatasetSqlServerTable) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryIntegrationRuntimeAzure.
func (mg *DataFactoryIntegrationRuntimeAzure) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryIntegrationRuntimeAzure.
func (mg *DataFactoryIntegrationRuntimeAzure) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryIntegrationRuntimeAzure.
func (mg *DataFactoryIntegrationRuntimeAzure) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryIntegrationRuntimeAzure.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryIntegrationRuntimeAzure) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryIntegrationRuntimeAzure.
func (mg *DataFactoryIntegrationRuntimeAzure) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryIntegrationRuntimeAzure.
func (mg *DataFactoryIntegrationRuntimeAzure) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryIntegrationRuntimeAzure.
func (mg *DataFactoryIntegrationRuntimeAzure) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryIntegrationRuntimeAzure.
func (mg *DataFactoryIntegrationRuntimeAzure) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryIntegrationRuntimeAzure.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryIntegrationRuntimeAzure) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryIntegrationRuntimeAzure.
func (mg *DataFactoryIntegrationRuntimeAzure) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryIntegrationRuntimeAzureSsis.
func (mg *DataFactoryIntegrationRuntimeAzureSsis) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryIntegrationRuntimeAzureSsis.
func (mg *DataFactoryIntegrationRuntimeAzureSsis) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryIntegrationRuntimeAzureSsis.
func (mg *DataFactoryIntegrationRuntimeAzureSsis) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryIntegrationRuntimeAzureSsis.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryIntegrationRuntimeAzureSsis) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryIntegrationRuntimeAzureSsis.
func (mg *DataFactoryIntegrationRuntimeAzureSsis) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryIntegrationRuntimeAzureSsis.
func (mg *DataFactoryIntegrationRuntimeAzureSsis) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryIntegrationRuntimeAzureSsis.
func (mg *DataFactoryIntegrationRuntimeAzureSsis) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryIntegrationRuntimeAzureSsis.
func (mg *DataFactoryIntegrationRuntimeAzureSsis) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryIntegrationRuntimeAzureSsis.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryIntegrationRuntimeAzureSsis) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryIntegrationRuntimeAzureSsis.
func (mg *DataFactoryIntegrationRuntimeAzureSsis) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryIntegrationRuntimeManaged.
func (mg *DataFactoryIntegrationRuntimeManaged) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryIntegrationRuntimeManaged.
func (mg *DataFactoryIntegrationRuntimeManaged) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryIntegrationRuntimeManaged.
func (mg *DataFactoryIntegrationRuntimeManaged) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryIntegrationRuntimeManaged.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryIntegrationRuntimeManaged) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryIntegrationRuntimeManaged.
func (mg *DataFactoryIntegrationRuntimeManaged) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryIntegrationRuntimeManaged.
func (mg *DataFactoryIntegrationRuntimeManaged) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryIntegrationRuntimeManaged.
func (mg *DataFactoryIntegrationRuntimeManaged) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryIntegrationRuntimeManaged.
func (mg *DataFactoryIntegrationRuntimeManaged) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryIntegrationRuntimeManaged.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryIntegrationRuntimeManaged) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryIntegrationRuntimeManaged.
func (mg *DataFactoryIntegrationRuntimeManaged) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryIntegrationRuntimeSelfHosted.
func (mg *DataFactoryIntegrationRuntimeSelfHosted) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryIntegrationRuntimeSelfHosted.
func (mg *DataFactoryIntegrationRuntimeSelfHosted) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryIntegrationRuntimeSelfHosted.
func (mg *DataFactoryIntegrationRuntimeSelfHosted) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryIntegrationRuntimeSelfHosted.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryIntegrationRuntimeSelfHosted) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryIntegrationRuntimeSelfHosted.
func (mg *DataFactoryIntegrationRuntimeSelfHosted) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryIntegrationRuntimeSelfHosted.
func (mg *DataFactoryIntegrationRuntimeSelfHosted) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryIntegrationRuntimeSelfHosted.
func (mg *DataFactoryIntegrationRuntimeSelfHosted) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryIntegrationRuntimeSelfHosted.
func (mg *DataFactoryIntegrationRuntimeSelfHosted) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryIntegrationRuntimeSelfHosted.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryIntegrationRuntimeSelfHosted) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryIntegrationRuntimeSelfHosted.
func (mg *DataFactoryIntegrationRuntimeSelfHosted) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedCustomService.
func (mg *DataFactoryLinkedCustomService) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedCustomService.
func (mg *DataFactoryLinkedCustomService) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedCustomService.
func (mg *DataFactoryLinkedCustomService) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedCustomService.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedCustomService) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedCustomService.
func (mg *DataFactoryLinkedCustomService) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedCustomService.
func (mg *DataFactoryLinkedCustomService) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedCustomService.
func (mg *DataFactoryLinkedCustomService) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedCustomService.
func (mg *DataFactoryLinkedCustomService) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedCustomService.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedCustomService) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedCustomService.
func (mg *DataFactoryLinkedCustomService) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceAzureBlobStorage.
func (mg *DataFactoryLinkedServiceAzureBlobStorage) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceAzureBlobStorage.
func (mg *DataFactoryLinkedServiceAzureBlobStorage) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceAzureBlobStorage.
func (mg *DataFactoryLinkedServiceAzureBlobStorage) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceAzureBlobStorage.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceAzureBlobStorage) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceAzureBlobStorage.
func (mg *DataFactoryLinkedServiceAzureBlobStorage) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceAzureBlobStorage.
func (mg *DataFactoryLinkedServiceAzureBlobStorage) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceAzureBlobStorage.
func (mg *DataFactoryLinkedServiceAzureBlobStorage) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceAzureBlobStorage.
func (mg *DataFactoryLinkedServiceAzureBlobStorage) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceAzureBlobStorage.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceAzureBlobStorage) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceAzureBlobStorage.
func (mg *DataFactoryLinkedServiceAzureBlobStorage) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceAzureDatabricks.
func (mg *DataFactoryLinkedServiceAzureDatabricks) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceAzureDatabricks.
func (mg *DataFactoryLinkedServiceAzureDatabricks) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceAzureDatabricks.
func (mg *DataFactoryLinkedServiceAzureDatabricks) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceAzureDatabricks.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceAzureDatabricks) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceAzureDatabricks.
func (mg *DataFactoryLinkedServiceAzureDatabricks) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceAzureDatabricks.
func (mg *DataFactoryLinkedServiceAzureDatabricks) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceAzureDatabricks.
func (mg *DataFactoryLinkedServiceAzureDatabricks) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceAzureDatabricks.
func (mg *DataFactoryLinkedServiceAzureDatabricks) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceAzureDatabricks.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceAzureDatabricks) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceAzureDatabricks.
func (mg *DataFactoryLinkedServiceAzureDatabricks) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceAzureFileStorage.
func (mg *DataFactoryLinkedServiceAzureFileStorage) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceAzureFileStorage.
func (mg *DataFactoryLinkedServiceAzureFileStorage) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceAzureFileStorage.
func (mg *DataFactoryLinkedServiceAzureFileStorage) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceAzureFileStorage.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceAzureFileStorage) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceAzureFileStorage.
func (mg *DataFactoryLinkedServiceAzureFileStorage) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceAzureFileStorage.
func (mg *DataFactoryLinkedServiceAzureFileStorage) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceAzureFileStorage.
func (mg *DataFactoryLinkedServiceAzureFileStorage) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceAzureFileStorage.
func (mg *DataFactoryLinkedServiceAzureFileStorage) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceAzureFileStorage.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceAzureFileStorage) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceAzureFileStorage.
func (mg *DataFactoryLinkedServiceAzureFileStorage) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceAzureFunction.
func (mg *DataFactoryLinkedServiceAzureFunction) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceAzureFunction.
func (mg *DataFactoryLinkedServiceAzureFunction) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceAzureFunction.
func (mg *DataFactoryLinkedServiceAzureFunction) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceAzureFunction.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceAzureFunction) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceAzureFunction.
func (mg *DataFactoryLinkedServiceAzureFunction) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceAzureFunction.
func (mg *DataFactoryLinkedServiceAzureFunction) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceAzureFunction.
func (mg *DataFactoryLinkedServiceAzureFunction) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceAzureFunction.
func (mg *DataFactoryLinkedServiceAzureFunction) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceAzureFunction.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceAzureFunction) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceAzureFunction.
func (mg *DataFactoryLinkedServiceAzureFunction) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceAzureSearch.
func (mg *DataFactoryLinkedServiceAzureSearch) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceAzureSearch.
func (mg *DataFactoryLinkedServiceAzureSearch) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceAzureSearch.
func (mg *DataFactoryLinkedServiceAzureSearch) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceAzureSearch.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceAzureSearch) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceAzureSearch.
func (mg *DataFactoryLinkedServiceAzureSearch) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceAzureSearch.
func (mg *DataFactoryLinkedServiceAzureSearch) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceAzureSearch.
func (mg *DataFactoryLinkedServiceAzureSearch) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceAzureSearch.
func (mg *DataFactoryLinkedServiceAzureSearch) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceAzureSearch.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceAzureSearch) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceAzureSearch.
func (mg *DataFactoryLinkedServiceAzureSearch) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceAzureSqlDatabase.
func (mg *DataFactoryLinkedServiceAzureSqlDatabase) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceAzureSqlDatabase.
func (mg *DataFactoryLinkedServiceAzureSqlDatabase) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceAzureSqlDatabase.
func (mg *DataFactoryLinkedServiceAzureSqlDatabase) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceAzureSqlDatabase.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceAzureSqlDatabase) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceAzureSqlDatabase.
func (mg *DataFactoryLinkedServiceAzureSqlDatabase) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceAzureSqlDatabase.
func (mg *DataFactoryLinkedServiceAzureSqlDatabase) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceAzureSqlDatabase.
func (mg *DataFactoryLinkedServiceAzureSqlDatabase) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceAzureSqlDatabase.
func (mg *DataFactoryLinkedServiceAzureSqlDatabase) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceAzureSqlDatabase.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceAzureSqlDatabase) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceAzureSqlDatabase.
func (mg *DataFactoryLinkedServiceAzureSqlDatabase) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceAzureTableStorage.
func (mg *DataFactoryLinkedServiceAzureTableStorage) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceAzureTableStorage.
func (mg *DataFactoryLinkedServiceAzureTableStorage) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceAzureTableStorage.
func (mg *DataFactoryLinkedServiceAzureTableStorage) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceAzureTableStorage.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceAzureTableStorage) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceAzureTableStorage.
func (mg *DataFactoryLinkedServiceAzureTableStorage) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceAzureTableStorage.
func (mg *DataFactoryLinkedServiceAzureTableStorage) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceAzureTableStorage.
func (mg *DataFactoryLinkedServiceAzureTableStorage) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceAzureTableStorage.
func (mg *DataFactoryLinkedServiceAzureTableStorage) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceAzureTableStorage.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceAzureTableStorage) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceAzureTableStorage.
func (mg *DataFactoryLinkedServiceAzureTableStorage) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceCosmosdb.
func (mg *DataFactoryLinkedServiceCosmosdb) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceCosmosdb.
func (mg *DataFactoryLinkedServiceCosmosdb) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceCosmosdb.
func (mg *DataFactoryLinkedServiceCosmosdb) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceCosmosdb.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceCosmosdb) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceCosmosdb.
func (mg *DataFactoryLinkedServiceCosmosdb) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceCosmosdb.
func (mg *DataFactoryLinkedServiceCosmosdb) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceCosmosdb.
func (mg *DataFactoryLinkedServiceCosmosdb) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceCosmosdb.
func (mg *DataFactoryLinkedServiceCosmosdb) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceCosmosdb.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceCosmosdb) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceCosmosdb.
func (mg *DataFactoryLinkedServiceCosmosdb) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceDataLakeStorageGen2.
func (mg *DataFactoryLinkedServiceDataLakeStorageGen2) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceDataLakeStorageGen2.
func (mg *DataFactoryLinkedServiceDataLakeStorageGen2) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceDataLakeStorageGen2.
func (mg *DataFactoryLinkedServiceDataLakeStorageGen2) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceDataLakeStorageGen2.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceDataLakeStorageGen2) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceDataLakeStorageGen2.
func (mg *DataFactoryLinkedServiceDataLakeStorageGen2) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceDataLakeStorageGen2.
func (mg *DataFactoryLinkedServiceDataLakeStorageGen2) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceDataLakeStorageGen2.
func (mg *DataFactoryLinkedServiceDataLakeStorageGen2) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceDataLakeStorageGen2.
func (mg *DataFactoryLinkedServiceDataLakeStorageGen2) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceDataLakeStorageGen2.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceDataLakeStorageGen2) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceDataLakeStorageGen2.
func (mg *DataFactoryLinkedServiceDataLakeStorageGen2) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceKeyVault.
func (mg *DataFactoryLinkedServiceKeyVault) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceKeyVault.
func (mg *DataFactoryLinkedServiceKeyVault) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceKeyVault.
func (mg *DataFactoryLinkedServiceKeyVault) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceKeyVault.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceKeyVault) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceKeyVault.
func (mg *DataFactoryLinkedServiceKeyVault) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceKeyVault.
func (mg *DataFactoryLinkedServiceKeyVault) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceKeyVault.
func (mg *DataFactoryLinkedServiceKeyVault) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceKeyVault.
func (mg *DataFactoryLinkedServiceKeyVault) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceKeyVault.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceKeyVault) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceKeyVault.
func (mg *DataFactoryLinkedServiceKeyVault) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceKusto.
func (mg *DataFactoryLinkedServiceKusto) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceKusto.
func (mg *DataFactoryLinkedServiceKusto) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceKusto.
func (mg *DataFactoryLinkedServiceKusto) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceKusto.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceKusto) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceKusto.
func (mg *DataFactoryLinkedServiceKusto) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceKusto.
func (mg *DataFactoryLinkedServiceKusto) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceKusto.
func (mg *DataFactoryLinkedServiceKusto) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceKusto.
func (mg *DataFactoryLinkedServiceKusto) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceKusto.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceKusto) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceKusto.
func (mg *DataFactoryLinkedServiceKusto) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceMysql.
func (mg *DataFactoryLinkedServiceMysql) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceMysql.
func (mg *DataFactoryLinkedServiceMysql) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceMysql.
func (mg *DataFactoryLinkedServiceMysql) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceMysql.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceMysql) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceMysql.
func (mg *DataFactoryLinkedServiceMysql) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceMysql.
func (mg *DataFactoryLinkedServiceMysql) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceMysql.
func (mg *DataFactoryLinkedServiceMysql) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceMysql.
func (mg *DataFactoryLinkedServiceMysql) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceMysql.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceMysql) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceMysql.
func (mg *DataFactoryLinkedServiceMysql) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceOdata.
func (mg *DataFactoryLinkedServiceOdata) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceOdata.
func (mg *DataFactoryLinkedServiceOdata) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceOdata.
func (mg *DataFactoryLinkedServiceOdata) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceOdata.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceOdata) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceOdata.
func (mg *DataFactoryLinkedServiceOdata) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceOdata.
func (mg *DataFactoryLinkedServiceOdata) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceOdata.
func (mg *DataFactoryLinkedServiceOdata) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceOdata.
func (mg *DataFactoryLinkedServiceOdata) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceOdata.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceOdata) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceOdata.
func (mg *DataFactoryLinkedServiceOdata) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServicePostgresql.
func (mg *DataFactoryLinkedServicePostgresql) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServicePostgresql.
func (mg *DataFactoryLinkedServicePostgresql) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServicePostgresql.
func (mg *DataFactoryLinkedServicePostgresql) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServicePostgresql.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServicePostgresql) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServicePostgresql.
func (mg *DataFactoryLinkedServicePostgresql) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServicePostgresql.
func (mg *DataFactoryLinkedServicePostgresql) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServicePostgresql.
func (mg *DataFactoryLinkedServicePostgresql) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServicePostgresql.
func (mg *DataFactoryLinkedServicePostgresql) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServicePostgresql.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServicePostgresql) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServicePostgresql.
func (mg *DataFactoryLinkedServicePostgresql) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceSftp.
func (mg *DataFactoryLinkedServiceSftp) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceSftp.
func (mg *DataFactoryLinkedServiceSftp) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceSftp.
func (mg *DataFactoryLinkedServiceSftp) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceSftp.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceSftp) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceSftp.
func (mg *DataFactoryLinkedServiceSftp) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceSftp.
func (mg *DataFactoryLinkedServiceSftp) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceSftp.
func (mg *DataFactoryLinkedServiceSftp) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceSftp.
func (mg *DataFactoryLinkedServiceSftp) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceSftp.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceSftp) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceSftp.
func (mg *DataFactoryLinkedServiceSftp) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceSnowflake.
func (mg *DataFactoryLinkedServiceSnowflake) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceSnowflake.
func (mg *DataFactoryLinkedServiceSnowflake) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceSnowflake.
func (mg *DataFactoryLinkedServiceSnowflake) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceSnowflake.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceSnowflake) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceSnowflake.
func (mg *DataFactoryLinkedServiceSnowflake) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceSnowflake.
func (mg *DataFactoryLinkedServiceSnowflake) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceSnowflake.
func (mg *DataFactoryLinkedServiceSnowflake) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceSnowflake.
func (mg *DataFactoryLinkedServiceSnowflake) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceSnowflake.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceSnowflake) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceSnowflake.
func (mg *DataFactoryLinkedServiceSnowflake) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceSqlServer.
func (mg *DataFactoryLinkedServiceSqlServer) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceSqlServer.
func (mg *DataFactoryLinkedServiceSqlServer) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceSqlServer.
func (mg *DataFactoryLinkedServiceSqlServer) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceSqlServer.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceSqlServer) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceSqlServer.
func (mg *DataFactoryLinkedServiceSqlServer) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceSqlServer.
func (mg *DataFactoryLinkedServiceSqlServer) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceSqlServer.
func (mg *DataFactoryLinkedServiceSqlServer) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceSqlServer.
func (mg *DataFactoryLinkedServiceSqlServer) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceSqlServer.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceSqlServer) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceSqlServer.
func (mg *DataFactoryLinkedServiceSqlServer) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceSynapse.
func (mg *DataFactoryLinkedServiceSynapse) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceSynapse.
func (mg *DataFactoryLinkedServiceSynapse) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceSynapse.
func (mg *DataFactoryLinkedServiceSynapse) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceSynapse.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceSynapse) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceSynapse.
func (mg *DataFactoryLinkedServiceSynapse) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceSynapse.
func (mg *DataFactoryLinkedServiceSynapse) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceSynapse.
func (mg *DataFactoryLinkedServiceSynapse) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceSynapse.
func (mg *DataFactoryLinkedServiceSynapse) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceSynapse.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceSynapse) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceSynapse.
func (mg *DataFactoryLinkedServiceSynapse) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryLinkedServiceWeb.
func (mg *DataFactoryLinkedServiceWeb) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryLinkedServiceWeb.
func (mg *DataFactoryLinkedServiceWeb) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryLinkedServiceWeb.
func (mg *DataFactoryLinkedServiceWeb) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryLinkedServiceWeb.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceWeb) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryLinkedServiceWeb.
func (mg *DataFactoryLinkedServiceWeb) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryLinkedServiceWeb.
func (mg *DataFactoryLinkedServiceWeb) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryLinkedServiceWeb.
func (mg *DataFactoryLinkedServiceWeb) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryLinkedServiceWeb.
func (mg *DataFactoryLinkedServiceWeb) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryLinkedServiceWeb.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryLinkedServiceWeb) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryLinkedServiceWeb.
func (mg *DataFactoryLinkedServiceWeb) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryManagedPrivateEndpoint.
func (mg *DataFactoryManagedPrivateEndpoint) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryManagedPrivateEndpoint.
func (mg *DataFactoryManagedPrivateEndpoint) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryManagedPrivateEndpoint.
func (mg *DataFactoryManagedPrivateEndpoint) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryManagedPrivateEndpoint.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryManagedPrivateEndpoint) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryManagedPrivateEndpoint.
func (mg *DataFactoryManagedPrivateEndpoint) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryManagedPrivateEndpoint.
func (mg *DataFactoryManagedPrivateEndpoint) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryManagedPrivateEndpoint.
func (mg *DataFactoryManagedPrivateEndpoint) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryManagedPrivateEndpoint.
func (mg *DataFactoryManagedPrivateEndpoint) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryManagedPrivateEndpoint.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryManagedPrivateEndpoint) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryManagedPrivateEndpoint.
func (mg *DataFactoryManagedPrivateEndpoint) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryPipeline.
func (mg *DataFactoryPipeline) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryPipeline.
func (mg *DataFactoryPipeline) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryPipeline.
func (mg *DataFactoryPipeline) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryPipeline.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryPipeline) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryPipeline.
func (mg *DataFactoryPipeline) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryPipeline.
func (mg *DataFactoryPipeline) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryPipeline.
func (mg *DataFactoryPipeline) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryPipeline.
func (mg *DataFactoryPipeline) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryPipeline.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryPipeline) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryPipeline.
func (mg *DataFactoryPipeline) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryTriggerBlobEvent.
func (mg *DataFactoryTriggerBlobEvent) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryTriggerBlobEvent.
func (mg *DataFactoryTriggerBlobEvent) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryTriggerBlobEvent.
func (mg *DataFactoryTriggerBlobEvent) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryTriggerBlobEvent.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryTriggerBlobEvent) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryTriggerBlobEvent.
func (mg *DataFactoryTriggerBlobEvent) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryTriggerBlobEvent.
func (mg *DataFactoryTriggerBlobEvent) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryTriggerBlobEvent.
func (mg *DataFactoryTriggerBlobEvent) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryTriggerBlobEvent.
func (mg *DataFactoryTriggerBlobEvent) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryTriggerBlobEvent.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryTriggerBlobEvent) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryTriggerBlobEvent.
func (mg *DataFactoryTriggerBlobEvent) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryTriggerCustomEvent.
func (mg *DataFactoryTriggerCustomEvent) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryTriggerCustomEvent.
func (mg *DataFactoryTriggerCustomEvent) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryTriggerCustomEvent.
func (mg *DataFactoryTriggerCustomEvent) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryTriggerCustomEvent.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryTriggerCustomEvent) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryTriggerCustomEvent.
func (mg *DataFactoryTriggerCustomEvent) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryTriggerCustomEvent.
func (mg *DataFactoryTriggerCustomEvent) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryTriggerCustomEvent.
func (mg *DataFactoryTriggerCustomEvent) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryTriggerCustomEvent.
func (mg *DataFactoryTriggerCustomEvent) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryTriggerCustomEvent.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryTriggerCustomEvent) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryTriggerCustomEvent.
func (mg *DataFactoryTriggerCustomEvent) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryTriggerSchedule.
func (mg *DataFactoryTriggerSchedule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryTriggerSchedule.
func (mg *DataFactoryTriggerSchedule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryTriggerSchedule.
func (mg *DataFactoryTriggerSchedule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryTriggerSchedule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryTriggerSchedule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryTriggerSchedule.
func (mg *DataFactoryTriggerSchedule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryTriggerSchedule.
func (mg *DataFactoryTriggerSchedule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryTriggerSchedule.
func (mg *DataFactoryTriggerSchedule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryTriggerSchedule.
func (mg *DataFactoryTriggerSchedule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryTriggerSchedule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryTriggerSchedule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryTriggerSchedule.
func (mg *DataFactoryTriggerSchedule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataFactoryTriggerTumblingWindow.
func (mg *DataFactoryTriggerTumblingWindow) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataFactoryTriggerTumblingWindow.
func (mg *DataFactoryTriggerTumblingWindow) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataFactoryTriggerTumblingWindow.
func (mg *DataFactoryTriggerTumblingWindow) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataFactoryTriggerTumblingWindow.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataFactoryTriggerTumblingWindow) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataFactoryTriggerTumblingWindow.
func (mg *DataFactoryTriggerTumblingWindow) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataFactoryTriggerTumblingWindow.
func (mg *DataFactoryTriggerTumblingWindow) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataFactoryTriggerTumblingWindow.
func (mg *DataFactoryTriggerTumblingWindow) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataFactoryTriggerTumblingWindow.
func (mg *DataFactoryTriggerTumblingWindow) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataFactoryTriggerTumblingWindow.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataFactoryTriggerTumblingWindow) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataFactoryTriggerTumblingWindow.
func (mg *DataFactoryTriggerTumblingWindow) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataLakeAnalyticsAccount.
func (mg *DataLakeAnalyticsAccount) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataLakeAnalyticsAccount.
func (mg *DataLakeAnalyticsAccount) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataLakeAnalyticsAccount.
func (mg *DataLakeAnalyticsAccount) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataLakeAnalyticsAccount.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataLakeAnalyticsAccount) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataLakeAnalyticsAccount.
func (mg *DataLakeAnalyticsAccount) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataLakeAnalyticsAccount.
func (mg *DataLakeAnalyticsAccount) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataLakeAnalyticsAccount.
func (mg *DataLakeAnalyticsAccount) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataLakeAnalyticsAccount.
func (mg *DataLakeAnalyticsAccount) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataLakeAnalyticsAccount.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataLakeAnalyticsAccount) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataLakeAnalyticsAccount.
func (mg *DataLakeAnalyticsAccount) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataLakeAnalyticsFirewallRule.
func (mg *DataLakeAnalyticsFirewallRule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataLakeAnalyticsFirewallRule.
func (mg *DataLakeAnalyticsFirewallRule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataLakeAnalyticsFirewallRule.
func (mg *DataLakeAnalyticsFirewallRule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataLakeAnalyticsFirewallRule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataLakeAnalyticsFirewallRule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataLakeAnalyticsFirewallRule.
func (mg *DataLakeAnalyticsFirewallRule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataLakeAnalyticsFirewallRule.
func (mg *DataLakeAnalyticsFirewallRule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataLakeAnalyticsFirewallRule.
func (mg *DataLakeAnalyticsFirewallRule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataLakeAnalyticsFirewallRule.
func (mg *DataLakeAnalyticsFirewallRule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataLakeAnalyticsFirewallRule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataLakeAnalyticsFirewallRule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataLakeAnalyticsFirewallRule.
func (mg *DataLakeAnalyticsFirewallRule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataLakeStore.
func (mg *DataLakeStore) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataLakeStore.
func (mg *DataLakeStore) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataLakeStore.
func (mg *DataLakeStore) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataLakeStore.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataLakeStore) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataLakeStore.
func (mg *DataLakeStore) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataLakeStore.
func (mg *DataLakeStore) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataLakeStore.
func (mg *DataLakeStore) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataLakeStore.
func (mg *DataLakeStore) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataLakeStore.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataLakeStore) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataLakeStore.
func (mg *DataLakeStore) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataLakeStoreFile.
func (mg *DataLakeStoreFile) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataLakeStoreFile.
func (mg *DataLakeStoreFile) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataLakeStoreFile.
func (mg *DataLakeStoreFile) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataLakeStoreFile.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataLakeStoreFile) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataLakeStoreFile.
func (mg *DataLakeStoreFile) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataLakeStoreFile.
func (mg *DataLakeStoreFile) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataLakeStoreFile.
func (mg *DataLakeStoreFile) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataLakeStoreFile.
func (mg *DataLakeStoreFile) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataLakeStoreFile.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataLakeStoreFile) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataLakeStoreFile.
func (mg *DataLakeStoreFile) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataLakeStoreFirewallRule.
func (mg *DataLakeStoreFirewallRule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataLakeStoreFirewallRule.
func (mg *DataLakeStoreFirewallRule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataLakeStoreFirewallRule.
func (mg *DataLakeStoreFirewallRule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataLakeStoreFirewallRule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataLakeStoreFirewallRule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataLakeStoreFirewallRule.
func (mg *DataLakeStoreFirewallRule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataLakeStoreFirewallRule.
func (mg *DataLakeStoreFirewallRule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataLakeStoreFirewallRule.
func (mg *DataLakeStoreFirewallRule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataLakeStoreFirewallRule.
func (mg *DataLakeStoreFirewallRule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataLakeStoreFirewallRule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataLakeStoreFirewallRule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataLakeStoreFirewallRule.
func (mg *DataLakeStoreFirewallRule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataLakeStoreVirtualNetworkRule.
func (mg *DataLakeStoreVirtualNetworkRule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataLakeStoreVirtualNetworkRule.
func (mg *DataLakeStoreVirtualNetworkRule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataLakeStoreVirtualNetworkRule.
func (mg *DataLakeStoreVirtualNetworkRule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataLakeStoreVirtualNetworkRule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataLakeStoreVirtualNetworkRule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataLakeStoreVirtualNetworkRule.
func (mg *DataLakeStoreVirtualNetworkRule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataLakeStoreVirtualNetworkRule.
func (mg *DataLakeStoreVirtualNetworkRule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataLakeStoreVirtualNetworkRule.
func (mg *DataLakeStoreVirtualNetworkRule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataLakeStoreVirtualNetworkRule.
func (mg *DataLakeStoreVirtualNetworkRule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataLakeStoreVirtualNetworkRule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataLakeStoreVirtualNetworkRule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataLakeStoreVirtualNetworkRule.
func (mg *DataLakeStoreVirtualNetworkRule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataProtectionBackupInstanceDisk.
func (mg *DataProtectionBackupInstanceDisk) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataProtectionBackupInstanceDisk.
func (mg *DataProtectionBackupInstanceDisk) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataProtectionBackupInstanceDisk.
func (mg *DataProtectionBackupInstanceDisk) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataProtectionBackupInstanceDisk.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataProtectionBackupInstanceDisk) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataProtectionBackupInstanceDisk.
func (mg *DataProtectionBackupInstanceDisk) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataProtectionBackupInstanceDisk.
func (mg *DataProtectionBackupInstanceDisk) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataProtectionBackupInstanceDisk.
func (mg *DataProtectionBackupInstanceDisk) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataProtectionBackupInstanceDisk.
func (mg *DataProtectionBackupInstanceDisk) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataProtectionBackupInstanceDisk.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataProtectionBackupInstanceDisk) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataProtectionBackupInstanceDisk.
func (mg *DataProtectionBackupInstanceDisk) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataProtectionBackupInstancePostgresql.
func (mg *DataProtectionBackupInstancePostgresql) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataProtectionBackupInstancePostgresql.
func (mg *DataProtectionBackupInstancePostgresql) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataProtectionBackupInstancePostgresql.
func (mg *DataProtectionBackupInstancePostgresql) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataProtectionBackupInstancePostgresql.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataProtectionBackupInstancePostgresql) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataProtectionBackupInstancePostgresql.
func (mg *DataProtectionBackupInstancePostgresql) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataProtectionBackupInstancePostgresql.
func (mg *DataProtectionBackupInstancePostgresql) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataProtectionBackupInstancePostgresql.
func (mg *DataProtectionBackupInstancePostgresql) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataProtectionBackupInstancePostgresql.
func (mg *DataProtectionBackupInstancePostgresql) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataProtectionBackupInstancePostgresql.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataProtectionBackupInstancePostgresql) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataProtectionBackupInstancePostgresql.
func (mg *DataProtectionBackupInstancePostgresql) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataProtectionBackupPolicyBlobStorage.
func (mg *DataProtectionBackupPolicyBlobStorage) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataProtectionBackupPolicyBlobStorage.
func (mg *DataProtectionBackupPolicyBlobStorage) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataProtectionBackupPolicyBlobStorage.
func (mg *DataProtectionBackupPolicyBlobStorage) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataProtectionBackupPolicyBlobStorage.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataProtectionBackupPolicyBlobStorage) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataProtectionBackupPolicyBlobStorage.
func (mg *DataProtectionBackupPolicyBlobStorage) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataProtectionBackupPolicyBlobStorage.
func (mg *DataProtectionBackupPolicyBlobStorage) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataProtectionBackupPolicyBlobStorage.
func (mg *DataProtectionBackupPolicyBlobStorage) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataProtectionBackupPolicyBlobStorage.
func (mg *DataProtectionBackupPolicyBlobStorage) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataProtectionBackupPolicyBlobStorage.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataProtectionBackupPolicyBlobStorage) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataProtectionBackupPolicyBlobStorage.
func (mg *DataProtectionBackupPolicyBlobStorage) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataProtectionBackupPolicyDisk.
func (mg *DataProtectionBackupPolicyDisk) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataProtectionBackupPolicyDisk.
func (mg *DataProtectionBackupPolicyDisk) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataProtectionBackupPolicyDisk.
func (mg *DataProtectionBackupPolicyDisk) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataProtectionBackupPolicyDisk.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataProtectionBackupPolicyDisk) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataProtectionBackupPolicyDisk.
func (mg *DataProtectionBackupPolicyDisk) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataProtectionBackupPolicyDisk.
func (mg *DataProtectionBackupPolicyDisk) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataProtectionBackupPolicyDisk.
func (mg *DataProtectionBackupPolicyDisk) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataProtectionBackupPolicyDisk.
func (mg *DataProtectionBackupPolicyDisk) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataProtectionBackupPolicyDisk.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataProtectionBackupPolicyDisk) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataProtectionBackupPolicyDisk.
func (mg *DataProtectionBackupPolicyDisk) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataProtectionBackupPolicyPostgresql.
func (mg *DataProtectionBackupPolicyPostgresql) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataProtectionBackupPolicyPostgresql.
func (mg *DataProtectionBackupPolicyPostgresql) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataProtectionBackupPolicyPostgresql.
func (mg *DataProtectionBackupPolicyPostgresql) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataProtectionBackupPolicyPostgresql.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataProtectionBackupPolicyPostgresql) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataProtectionBackupPolicyPostgresql.
func (mg *DataProtectionBackupPolicyPostgresql) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataProtectionBackupPolicyPostgresql.
func (mg *DataProtectionBackupPolicyPostgresql) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataProtectionBackupPolicyPostgresql.
func (mg *DataProtectionBackupPolicyPostgresql) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataProtectionBackupPolicyPostgresql.
func (mg *DataProtectionBackupPolicyPostgresql) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataProtectionBackupPolicyPostgresql.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataProtectionBackupPolicyPostgresql) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataProtectionBackupPolicyPostgresql.
func (mg *DataProtectionBackupPolicyPostgresql) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataProtectionBackupVault.
func (mg *DataProtectionBackupVault) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataProtectionBackupVault.
func (mg *DataProtectionBackupVault) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataProtectionBackupVault.
func (mg *DataProtectionBackupVault) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataProtectionBackupVault.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataProtectionBackupVault) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataProtectionBackupVault.
func (mg *DataProtectionBackupVault) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataProtectionBackupVault.
func (mg *DataProtectionBackupVault) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataProtectionBackupVault.
func (mg *DataProtectionBackupVault) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataProtectionBackupVault.
func (mg *DataProtectionBackupVault) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataProtectionBackupVault.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataProtectionBackupVault) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataProtectionBackupVault.
func (mg *DataProtectionBackupVault) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataShare.
func (mg *DataShare) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataShare.
func (mg *DataShare) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataShare.
func (mg *DataShare) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataShare.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataShare) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataShare.
func (mg *DataShare) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataShare.
func (mg *DataShare) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataShare.
func (mg *DataShare) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataShare.
func (mg *DataShare) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataShare.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataShare) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataShare.
func (mg *DataShare) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataShareAccount.
func (mg *DataShareAccount) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataShareAccount.
func (mg *DataShareAccount) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataShareAccount.
func (mg *DataShareAccount) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataShareAccount.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataShareAccount) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataShareAccount.
func (mg *DataShareAccount) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataShareAccount.
func (mg *DataShareAccount) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataShareAccount.
func (mg *DataShareAccount) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataShareAccount.
func (mg *DataShareAccount) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataShareAccount.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataShareAccount) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataShareAccount.
func (mg *DataShareAccount) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataShareDatasetBlobStorage.
func (mg *DataShareDatasetBlobStorage) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataShareDatasetBlobStorage.
func (mg *DataShareDatasetBlobStorage) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataShareDatasetBlobStorage.
func (mg *DataShareDatasetBlobStorage) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataShareDatasetBlobStorage.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataShareDatasetBlobStorage) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataShareDatasetBlobStorage.
func (mg *DataShareDatasetBlobStorage) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataShareDatasetBlobStorage.
func (mg *DataShareDatasetBlobStorage) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataShareDatasetBlobStorage.
func (mg *DataShareDatasetBlobStorage) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataShareDatasetBlobStorage.
func (mg *DataShareDatasetBlobStorage) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataShareDatasetBlobStorage.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataShareDatasetBlobStorage) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataShareDatasetBlobStorage.
func (mg *DataShareDatasetBlobStorage) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataShareDatasetDataLakeGen1.
func (mg *DataShareDatasetDataLakeGen1) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataShareDatasetDataLakeGen1.
func (mg *DataShareDatasetDataLakeGen1) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataShareDatasetDataLakeGen1.
func (mg *DataShareDatasetDataLakeGen1) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataShareDatasetDataLakeGen1.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataShareDatasetDataLakeGen1) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataShareDatasetDataLakeGen1.
func (mg *DataShareDatasetDataLakeGen1) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataShareDatasetDataLakeGen1.
func (mg *DataShareDatasetDataLakeGen1) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataShareDatasetDataLakeGen1.
func (mg *DataShareDatasetDataLakeGen1) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataShareDatasetDataLakeGen1.
func (mg *DataShareDatasetDataLakeGen1) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataShareDatasetDataLakeGen1.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataShareDatasetDataLakeGen1) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataShareDatasetDataLakeGen1.
func (mg *DataShareDatasetDataLakeGen1) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataShareDatasetDataLakeGen2.
func (mg *DataShareDatasetDataLakeGen2) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataShareDatasetDataLakeGen2.
func (mg *DataShareDatasetDataLakeGen2) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataShareDatasetDataLakeGen2.
func (mg *DataShareDatasetDataLakeGen2) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataShareDatasetDataLakeGen2.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataShareDatasetDataLakeGen2) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataShareDatasetDataLakeGen2.
func (mg *DataShareDatasetDataLakeGen2) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataShareDatasetDataLakeGen2.
func (mg *DataShareDatasetDataLakeGen2) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataShareDatasetDataLakeGen2.
func (mg *DataShareDatasetDataLakeGen2) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataShareDatasetDataLakeGen2.
func (mg *DataShareDatasetDataLakeGen2) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataShareDatasetDataLakeGen2.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataShareDatasetDataLakeGen2) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataShareDatasetDataLakeGen2.
func (mg *DataShareDatasetDataLakeGen2) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataShareDatasetKustoCluster.
func (mg *DataShareDatasetKustoCluster) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataShareDatasetKustoCluster.
func (mg *DataShareDatasetKustoCluster) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataShareDatasetKustoCluster.
func (mg *DataShareDatasetKustoCluster) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataShareDatasetKustoCluster.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataShareDatasetKustoCluster) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataShareDatasetKustoCluster.
func (mg *DataShareDatasetKustoCluster) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataShareDatasetKustoCluster.
func (mg *DataShareDatasetKustoCluster) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataShareDatasetKustoCluster.
func (mg *DataShareDatasetKustoCluster) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataShareDatasetKustoCluster.
func (mg *DataShareDatasetKustoCluster) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataShareDatasetKustoCluster.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataShareDatasetKustoCluster) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataShareDatasetKustoCluster.
func (mg *DataShareDatasetKustoCluster) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DataShareDatasetKustoDatabase.
func (mg *DataShareDatasetKustoDatabase) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DataShareDatasetKustoDatabase.
func (mg *DataShareDatasetKustoDatabase) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DataShareDatasetKustoDatabase.
func (mg *DataShareDatasetKustoDatabase) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DataShareDatasetKustoDatabase.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DataShareDatasetKustoDatabase) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DataShareDatasetKustoDatabase.
func (mg *DataShareDatasetKustoDatabase) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DataShareDatasetKustoDatabase.
func (mg *DataShareDatasetKustoDatabase) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DataShareDatasetKustoDatabase.
func (mg *DataShareDatasetKustoDatabase) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DataShareDatasetKustoDatabase.
func (mg *DataShareDatasetKustoDatabase) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DataShareDatasetKustoDatabase.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DataShareDatasetKustoDatabase) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DataShareDatasetKustoDatabase.
func (mg *DataShareDatasetKustoDatabase) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
