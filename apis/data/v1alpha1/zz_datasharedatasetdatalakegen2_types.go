/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataShareDatasetDataLakeGen2Observation struct {
	DisplayName string `json:"displayName,omitempty" tf:"display_name"`
}

type DataShareDatasetDataLakeGen2Parameters struct {

	// +kubebuilder:validation:Optional
	FilePath *string `json:"filePath,omitempty" tf:"file_path"`

	// +kubebuilder:validation:Required
	FileSystemName string `json:"fileSystemName" tf:"file_system_name"`

	// +kubebuilder:validation:Optional
	FolderPath *string `json:"folderPath,omitempty" tf:"folder_path"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ShareID string `json:"shareId" tf:"share_id"`

	// +kubebuilder:validation:Required
	StorageAccountID string `json:"storageAccountId" tf:"storage_account_id"`
}

// DataShareDatasetDataLakeGen2Spec defines the desired state of DataShareDatasetDataLakeGen2
type DataShareDatasetDataLakeGen2Spec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataShareDatasetDataLakeGen2Parameters `json:"forProvider"`
}

// DataShareDatasetDataLakeGen2Status defines the observed state of DataShareDatasetDataLakeGen2.
type DataShareDatasetDataLakeGen2Status struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataShareDatasetDataLakeGen2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataShareDatasetDataLakeGen2 is the Schema for the DataShareDatasetDataLakeGen2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataShareDatasetDataLakeGen2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataShareDatasetDataLakeGen2Spec   `json:"spec"`
	Status            DataShareDatasetDataLakeGen2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataShareDatasetDataLakeGen2List contains a list of DataShareDatasetDataLakeGen2s
type DataShareDatasetDataLakeGen2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataShareDatasetDataLakeGen2 `json:"items"`
}

// Repository type metadata.
var (
	DataShareDatasetDataLakeGen2Kind             = "DataShareDatasetDataLakeGen2"
	DataShareDatasetDataLakeGen2GroupKind        = schema.GroupKind{Group: Group, Kind: DataShareDatasetDataLakeGen2Kind}.String()
	DataShareDatasetDataLakeGen2KindAPIVersion   = DataShareDatasetDataLakeGen2Kind + "." + GroupVersion.String()
	DataShareDatasetDataLakeGen2GroupVersionKind = GroupVersion.WithKind(DataShareDatasetDataLakeGen2Kind)
)

func init() {
	SchemeBuilder.Register(&DataShareDatasetDataLakeGen2{}, &DataShareDatasetDataLakeGen2List{})
}
