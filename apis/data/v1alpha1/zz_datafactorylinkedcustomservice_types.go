/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryLinkedCustomServiceObservation struct {
}

type DataFactoryLinkedCustomServiceParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty" tf:"additional_properties"`

	// +kubebuilder:validation:Optional
	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	// +kubebuilder:validation:Required
	DataFactoryID string `json:"dataFactoryId" tf:"data_factory_id"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	IntegrationRuntime []IntegrationRuntimeParameters `json:"integrationRuntime,omitempty" tf:"integration_runtime"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`

	// +kubebuilder:validation:Required
	TypePropertiesJSON string `json:"typePropertiesJson" tf:"type_properties_json"`
}

type IntegrationRuntimeObservation struct {
}

type IntegrationRuntimeParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

// DataFactoryLinkedCustomServiceSpec defines the desired state of DataFactoryLinkedCustomService
type DataFactoryLinkedCustomServiceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryLinkedCustomServiceParameters `json:"forProvider"`
}

// DataFactoryLinkedCustomServiceStatus defines the observed state of DataFactoryLinkedCustomService.
type DataFactoryLinkedCustomServiceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryLinkedCustomServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedCustomService is the Schema for the DataFactoryLinkedCustomServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryLinkedCustomService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryLinkedCustomServiceSpec   `json:"spec"`
	Status            DataFactoryLinkedCustomServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedCustomServiceList contains a list of DataFactoryLinkedCustomServices
type DataFactoryLinkedCustomServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryLinkedCustomService `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryLinkedCustomServiceKind             = "DataFactoryLinkedCustomService"
	DataFactoryLinkedCustomServiceGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryLinkedCustomServiceKind}.String()
	DataFactoryLinkedCustomServiceKindAPIVersion   = DataFactoryLinkedCustomServiceKind + "." + GroupVersion.String()
	DataFactoryLinkedCustomServiceGroupVersionKind = GroupVersion.WithKind(DataFactoryLinkedCustomServiceKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryLinkedCustomService{}, &DataFactoryLinkedCustomServiceList{})
}
