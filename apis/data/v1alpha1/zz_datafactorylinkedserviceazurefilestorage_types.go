/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryLinkedServiceAzureFileStorageKeyVaultPasswordObservation struct {
}

type DataFactoryLinkedServiceAzureFileStorageKeyVaultPasswordParameters struct {

	// +kubebuilder:validation:Required
	LinkedServiceName string `json:"linkedServiceName" tf:"linked_service_name"`

	// +kubebuilder:validation:Required
	SecretName string `json:"secretName" tf:"secret_name"`
}

type DataFactoryLinkedServiceAzureFileStorageObservation struct {
}

type DataFactoryLinkedServiceAzureFileStorageParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty" tf:"additional_properties"`

	// +kubebuilder:validation:Optional
	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	// +kubebuilder:validation:Required
	ConnectionString string `json:"connectionString" tf:"connection_string"`

	// +kubebuilder:validation:Required
	DataFactoryName string `json:"dataFactoryName" tf:"data_factory_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	FileShare *string `json:"fileShare,omitempty" tf:"file_share"`

	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host"`

	// +kubebuilder:validation:Optional
	IntegrationRuntimeName *string `json:"integrationRuntimeName,omitempty" tf:"integration_runtime_name"`

	// +kubebuilder:validation:Optional
	KeyVaultPassword []DataFactoryLinkedServiceAzureFileStorageKeyVaultPasswordParameters `json:"keyVaultPassword,omitempty" tf:"key_vault_password"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id"`
}

// DataFactoryLinkedServiceAzureFileStorageSpec defines the desired state of DataFactoryLinkedServiceAzureFileStorage
type DataFactoryLinkedServiceAzureFileStorageSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryLinkedServiceAzureFileStorageParameters `json:"forProvider"`
}

// DataFactoryLinkedServiceAzureFileStorageStatus defines the observed state of DataFactoryLinkedServiceAzureFileStorage.
type DataFactoryLinkedServiceAzureFileStorageStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryLinkedServiceAzureFileStorageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceAzureFileStorage is the Schema for the DataFactoryLinkedServiceAzureFileStorages API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryLinkedServiceAzureFileStorage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryLinkedServiceAzureFileStorageSpec   `json:"spec"`
	Status            DataFactoryLinkedServiceAzureFileStorageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceAzureFileStorageList contains a list of DataFactoryLinkedServiceAzureFileStorages
type DataFactoryLinkedServiceAzureFileStorageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryLinkedServiceAzureFileStorage `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryLinkedServiceAzureFileStorageKind             = "DataFactoryLinkedServiceAzureFileStorage"
	DataFactoryLinkedServiceAzureFileStorageGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryLinkedServiceAzureFileStorageKind}.String()
	DataFactoryLinkedServiceAzureFileStorageKindAPIVersion   = DataFactoryLinkedServiceAzureFileStorageKind + "." + GroupVersion.String()
	DataFactoryLinkedServiceAzureFileStorageGroupVersionKind = GroupVersion.WithKind(DataFactoryLinkedServiceAzureFileStorageKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryLinkedServiceAzureFileStorage{}, &DataFactoryLinkedServiceAzureFileStorageList{})
}
