/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BasicAuthenticationObservation struct {
}

type BasicAuthenticationParameters struct {

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type DataFactoryLinkedServiceOdataObservation struct {
}

type DataFactoryLinkedServiceOdataParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty" tf:"additional_properties"`

	// +kubebuilder:validation:Optional
	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	// +kubebuilder:validation:Optional
	BasicAuthentication []BasicAuthenticationParameters `json:"basicAuthentication,omitempty" tf:"basic_authentication"`

	// +kubebuilder:validation:Required
	DataFactoryName string `json:"dataFactoryName" tf:"data_factory_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	IntegrationRuntimeName *string `json:"integrationRuntimeName,omitempty" tf:"integration_runtime_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	URL string `json:"url" tf:"url"`
}

// DataFactoryLinkedServiceOdataSpec defines the desired state of DataFactoryLinkedServiceOdata
type DataFactoryLinkedServiceOdataSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryLinkedServiceOdataParameters `json:"forProvider"`
}

// DataFactoryLinkedServiceOdataStatus defines the observed state of DataFactoryLinkedServiceOdata.
type DataFactoryLinkedServiceOdataStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryLinkedServiceOdataObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceOdata is the Schema for the DataFactoryLinkedServiceOdatas API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryLinkedServiceOdata struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryLinkedServiceOdataSpec   `json:"spec"`
	Status            DataFactoryLinkedServiceOdataStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceOdataList contains a list of DataFactoryLinkedServiceOdatas
type DataFactoryLinkedServiceOdataList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryLinkedServiceOdata `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryLinkedServiceOdataKind             = "DataFactoryLinkedServiceOdata"
	DataFactoryLinkedServiceOdataGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryLinkedServiceOdataKind}.String()
	DataFactoryLinkedServiceOdataKindAPIVersion   = DataFactoryLinkedServiceOdataKind + "." + GroupVersion.String()
	DataFactoryLinkedServiceOdataGroupVersionKind = GroupVersion.WithKind(DataFactoryLinkedServiceOdataKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryLinkedServiceOdata{}, &DataFactoryLinkedServiceOdataList{})
}
