/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryIntegrationRuntimeAzureObservation struct {
}

type DataFactoryIntegrationRuntimeAzureParameters struct {

	// +kubebuilder:validation:Optional
	ComputeType *string `json:"computeType,omitempty" tf:"compute_type"`

	// +kubebuilder:validation:Optional
	CoreCount *int64 `json:"coreCount,omitempty" tf:"core_count"`

	// +kubebuilder:validation:Required
	DataFactoryName string `json:"dataFactoryName" tf:"data_factory_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	TimeToLiveMin *int64 `json:"timeToLiveMin,omitempty" tf:"time_to_live_min"`

	// +kubebuilder:validation:Optional
	VirtualNetworkEnabled *bool `json:"virtualNetworkEnabled,omitempty" tf:"virtual_network_enabled"`
}

// DataFactoryIntegrationRuntimeAzureSpec defines the desired state of DataFactoryIntegrationRuntimeAzure
type DataFactoryIntegrationRuntimeAzureSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryIntegrationRuntimeAzureParameters `json:"forProvider"`
}

// DataFactoryIntegrationRuntimeAzureStatus defines the observed state of DataFactoryIntegrationRuntimeAzure.
type DataFactoryIntegrationRuntimeAzureStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryIntegrationRuntimeAzureObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryIntegrationRuntimeAzure is the Schema for the DataFactoryIntegrationRuntimeAzures API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryIntegrationRuntimeAzure struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryIntegrationRuntimeAzureSpec   `json:"spec"`
	Status            DataFactoryIntegrationRuntimeAzureStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryIntegrationRuntimeAzureList contains a list of DataFactoryIntegrationRuntimeAzures
type DataFactoryIntegrationRuntimeAzureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryIntegrationRuntimeAzure `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryIntegrationRuntimeAzureKind             = "DataFactoryIntegrationRuntimeAzure"
	DataFactoryIntegrationRuntimeAzureGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryIntegrationRuntimeAzureKind}.String()
	DataFactoryIntegrationRuntimeAzureKindAPIVersion   = DataFactoryIntegrationRuntimeAzureKind + "." + GroupVersion.String()
	DataFactoryIntegrationRuntimeAzureGroupVersionKind = GroupVersion.WithKind(DataFactoryIntegrationRuntimeAzureKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryIntegrationRuntimeAzure{}, &DataFactoryIntegrationRuntimeAzureList{})
}
