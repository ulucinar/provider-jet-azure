/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataShareDatasetBlobStorageObservation struct {
	DisplayName string `json:"displayName,omitempty" tf:"display_name"`
}

type DataShareDatasetBlobStorageParameters struct {

	// +kubebuilder:validation:Required
	ContainerName string `json:"containerName" tf:"container_name"`

	// +kubebuilder:validation:Required
	DataShareID string `json:"dataShareId" tf:"data_share_id"`

	// +kubebuilder:validation:Optional
	FilePath *string `json:"filePath,omitempty" tf:"file_path"`

	// +kubebuilder:validation:Optional
	FolderPath *string `json:"folderPath,omitempty" tf:"folder_path"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	StorageAccount []StorageAccountParameters `json:"storageAccount" tf:"storage_account"`
}

type StorageAccountObservation struct {
}

type StorageAccountParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	SubscriptionID string `json:"subscriptionId" tf:"subscription_id"`
}

// DataShareDatasetBlobStorageSpec defines the desired state of DataShareDatasetBlobStorage
type DataShareDatasetBlobStorageSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataShareDatasetBlobStorageParameters `json:"forProvider"`
}

// DataShareDatasetBlobStorageStatus defines the observed state of DataShareDatasetBlobStorage.
type DataShareDatasetBlobStorageStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataShareDatasetBlobStorageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataShareDatasetBlobStorage is the Schema for the DataShareDatasetBlobStorages API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataShareDatasetBlobStorage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataShareDatasetBlobStorageSpec   `json:"spec"`
	Status            DataShareDatasetBlobStorageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataShareDatasetBlobStorageList contains a list of DataShareDatasetBlobStorages
type DataShareDatasetBlobStorageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataShareDatasetBlobStorage `json:"items"`
}

// Repository type metadata.
var (
	DataShareDatasetBlobStorageKind             = "DataShareDatasetBlobStorage"
	DataShareDatasetBlobStorageGroupKind        = schema.GroupKind{Group: Group, Kind: DataShareDatasetBlobStorageKind}.String()
	DataShareDatasetBlobStorageKindAPIVersion   = DataShareDatasetBlobStorageKind + "." + GroupVersion.String()
	DataShareDatasetBlobStorageGroupVersionKind = GroupVersion.WithKind(DataShareDatasetBlobStorageKind)
)

func init() {
	SchemeBuilder.Register(&DataShareDatasetBlobStorage{}, &DataShareDatasetBlobStorageList{})
}
