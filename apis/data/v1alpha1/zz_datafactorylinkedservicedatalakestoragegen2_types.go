/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryLinkedServiceDataLakeStorageGen2Observation struct {
}

type DataFactoryLinkedServiceDataLakeStorageGen2Parameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty" tf:"additional_properties"`

	// +kubebuilder:validation:Optional
	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	// +kubebuilder:validation:Required
	DataFactoryName string `json:"dataFactoryName" tf:"data_factory_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	IntegrationRuntimeName *string `json:"integrationRuntimeName,omitempty" tf:"integration_runtime_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	ServicePrincipalID *string `json:"servicePrincipalId,omitempty" tf:"service_principal_id"`

	// +kubebuilder:validation:Optional
	ServicePrincipalKey *string `json:"servicePrincipalKey,omitempty" tf:"service_principal_key"`

	// +kubebuilder:validation:Optional
	StorageAccountKey *string `json:"storageAccountKey,omitempty" tf:"storage_account_key"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant"`

	// +kubebuilder:validation:Required
	URL string `json:"url" tf:"url"`

	// +kubebuilder:validation:Optional
	UseManagedIdentity *bool `json:"useManagedIdentity,omitempty" tf:"use_managed_identity"`
}

// DataFactoryLinkedServiceDataLakeStorageGen2Spec defines the desired state of DataFactoryLinkedServiceDataLakeStorageGen2
type DataFactoryLinkedServiceDataLakeStorageGen2Spec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryLinkedServiceDataLakeStorageGen2Parameters `json:"forProvider"`
}

// DataFactoryLinkedServiceDataLakeStorageGen2Status defines the observed state of DataFactoryLinkedServiceDataLakeStorageGen2.
type DataFactoryLinkedServiceDataLakeStorageGen2Status struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryLinkedServiceDataLakeStorageGen2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceDataLakeStorageGen2 is the Schema for the DataFactoryLinkedServiceDataLakeStorageGen2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryLinkedServiceDataLakeStorageGen2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryLinkedServiceDataLakeStorageGen2Spec   `json:"spec"`
	Status            DataFactoryLinkedServiceDataLakeStorageGen2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceDataLakeStorageGen2List contains a list of DataFactoryLinkedServiceDataLakeStorageGen2s
type DataFactoryLinkedServiceDataLakeStorageGen2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryLinkedServiceDataLakeStorageGen2 `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryLinkedServiceDataLakeStorageGen2Kind             = "DataFactoryLinkedServiceDataLakeStorageGen2"
	DataFactoryLinkedServiceDataLakeStorageGen2GroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryLinkedServiceDataLakeStorageGen2Kind}.String()
	DataFactoryLinkedServiceDataLakeStorageGen2KindAPIVersion   = DataFactoryLinkedServiceDataLakeStorageGen2Kind + "." + GroupVersion.String()
	DataFactoryLinkedServiceDataLakeStorageGen2GroupVersionKind = GroupVersion.WithKind(DataFactoryLinkedServiceDataLakeStorageGen2Kind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryLinkedServiceDataLakeStorageGen2{}, &DataFactoryLinkedServiceDataLakeStorageGen2List{})
}
