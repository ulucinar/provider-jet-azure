/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataShareDatasetKustoDatabaseObservation struct {
	DisplayName string `json:"displayName,omitempty" tf:"display_name"`

	KustoClusterLocation string `json:"kustoClusterLocation,omitempty" tf:"kusto_cluster_location"`
}

type DataShareDatasetKustoDatabaseParameters struct {

	// +kubebuilder:validation:Required
	KustoDatabaseID string `json:"kustoDatabaseId" tf:"kusto_database_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ShareID string `json:"shareId" tf:"share_id"`
}

// DataShareDatasetKustoDatabaseSpec defines the desired state of DataShareDatasetKustoDatabase
type DataShareDatasetKustoDatabaseSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataShareDatasetKustoDatabaseParameters `json:"forProvider"`
}

// DataShareDatasetKustoDatabaseStatus defines the observed state of DataShareDatasetKustoDatabase.
type DataShareDatasetKustoDatabaseStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataShareDatasetKustoDatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataShareDatasetKustoDatabase is the Schema for the DataShareDatasetKustoDatabases API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataShareDatasetKustoDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataShareDatasetKustoDatabaseSpec   `json:"spec"`
	Status            DataShareDatasetKustoDatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataShareDatasetKustoDatabaseList contains a list of DataShareDatasetKustoDatabases
type DataShareDatasetKustoDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataShareDatasetKustoDatabase `json:"items"`
}

// Repository type metadata.
var (
	DataShareDatasetKustoDatabaseKind             = "DataShareDatasetKustoDatabase"
	DataShareDatasetKustoDatabaseGroupKind        = schema.GroupKind{Group: Group, Kind: DataShareDatasetKustoDatabaseKind}.String()
	DataShareDatasetKustoDatabaseKindAPIVersion   = DataShareDatasetKustoDatabaseKind + "." + GroupVersion.String()
	DataShareDatasetKustoDatabaseGroupVersionKind = GroupVersion.WithKind(DataShareDatasetKustoDatabaseKind)
)

func init() {
	SchemeBuilder.Register(&DataShareDatasetKustoDatabase{}, &DataShareDatasetKustoDatabaseList{})
}
