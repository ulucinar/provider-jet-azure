/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryTriggerScheduleObservation struct {
}

type DataFactoryTriggerScheduleParameters struct {

	// +kubebuilder:validation:Optional
	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	// +kubebuilder:validation:Required
	DataFactoryName string `json:"dataFactoryName" tf:"data_factory_name"`

	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time"`

	// +kubebuilder:validation:Optional
	Frequency *string `json:"frequency,omitempty" tf:"frequency"`

	// +kubebuilder:validation:Optional
	Interval *int64 `json:"interval,omitempty" tf:"interval"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	PipelineName string `json:"pipelineName" tf:"pipeline_name"`

	// +kubebuilder:validation:Optional
	PipelineParameters map[string]string `json:"pipelineParameters,omitempty" tf:"pipeline_parameters"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time"`
}

// DataFactoryTriggerScheduleSpec defines the desired state of DataFactoryTriggerSchedule
type DataFactoryTriggerScheduleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryTriggerScheduleParameters `json:"forProvider"`
}

// DataFactoryTriggerScheduleStatus defines the observed state of DataFactoryTriggerSchedule.
type DataFactoryTriggerScheduleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryTriggerScheduleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryTriggerSchedule is the Schema for the DataFactoryTriggerSchedules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryTriggerSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryTriggerScheduleSpec   `json:"spec"`
	Status            DataFactoryTriggerScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryTriggerScheduleList contains a list of DataFactoryTriggerSchedules
type DataFactoryTriggerScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryTriggerSchedule `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryTriggerScheduleKind             = "DataFactoryTriggerSchedule"
	DataFactoryTriggerScheduleGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryTriggerScheduleKind}.String()
	DataFactoryTriggerScheduleKindAPIVersion   = DataFactoryTriggerScheduleKind + "." + GroupVersion.String()
	DataFactoryTriggerScheduleGroupVersionKind = GroupVersion.WithKind(DataFactoryTriggerScheduleKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryTriggerSchedule{}, &DataFactoryTriggerScheduleList{})
}
