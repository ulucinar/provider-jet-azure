/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryLinkedServicePostgresqlObservation struct {
}

type DataFactoryLinkedServicePostgresqlParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty" tf:"additional_properties"`

	// +kubebuilder:validation:Optional
	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	// +kubebuilder:validation:Required
	ConnectionString string `json:"connectionString" tf:"connection_string"`

	// +kubebuilder:validation:Required
	DataFactoryName string `json:"dataFactoryName" tf:"data_factory_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	IntegrationRuntimeName *string `json:"integrationRuntimeName,omitempty" tf:"integration_runtime_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

// DataFactoryLinkedServicePostgresqlSpec defines the desired state of DataFactoryLinkedServicePostgresql
type DataFactoryLinkedServicePostgresqlSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryLinkedServicePostgresqlParameters `json:"forProvider"`
}

// DataFactoryLinkedServicePostgresqlStatus defines the observed state of DataFactoryLinkedServicePostgresql.
type DataFactoryLinkedServicePostgresqlStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryLinkedServicePostgresqlObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServicePostgresql is the Schema for the DataFactoryLinkedServicePostgresqls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryLinkedServicePostgresql struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryLinkedServicePostgresqlSpec   `json:"spec"`
	Status            DataFactoryLinkedServicePostgresqlStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServicePostgresqlList contains a list of DataFactoryLinkedServicePostgresqls
type DataFactoryLinkedServicePostgresqlList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryLinkedServicePostgresql `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryLinkedServicePostgresqlKind             = "DataFactoryLinkedServicePostgresql"
	DataFactoryLinkedServicePostgresqlGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryLinkedServicePostgresqlKind}.String()
	DataFactoryLinkedServicePostgresqlKindAPIVersion   = DataFactoryLinkedServicePostgresqlKind + "." + GroupVersion.String()
	DataFactoryLinkedServicePostgresqlGroupVersionKind = GroupVersion.WithKind(DataFactoryLinkedServicePostgresqlKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryLinkedServicePostgresql{}, &DataFactoryLinkedServicePostgresqlList{})
}
