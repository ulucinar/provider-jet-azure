/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryLinkedServiceAzureSearchObservation struct {
	EncryptedCredential string `json:"encryptedCredential,omitempty" tf:"encrypted_credential"`
}

type DataFactoryLinkedServiceAzureSearchParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty" tf:"additional_properties"`

	// +kubebuilder:validation:Optional
	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	// +kubebuilder:validation:Required
	DataFactoryID string `json:"dataFactoryId" tf:"data_factory_id"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	IntegrationRuntimeName *string `json:"integrationRuntimeName,omitempty" tf:"integration_runtime_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	SearchServiceKey string `json:"searchServiceKey" tf:"search_service_key"`

	// +kubebuilder:validation:Required
	URL string `json:"url" tf:"url"`
}

// DataFactoryLinkedServiceAzureSearchSpec defines the desired state of DataFactoryLinkedServiceAzureSearch
type DataFactoryLinkedServiceAzureSearchSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryLinkedServiceAzureSearchParameters `json:"forProvider"`
}

// DataFactoryLinkedServiceAzureSearchStatus defines the observed state of DataFactoryLinkedServiceAzureSearch.
type DataFactoryLinkedServiceAzureSearchStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryLinkedServiceAzureSearchObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceAzureSearch is the Schema for the DataFactoryLinkedServiceAzureSearchs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryLinkedServiceAzureSearch struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryLinkedServiceAzureSearchSpec   `json:"spec"`
	Status            DataFactoryLinkedServiceAzureSearchStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceAzureSearchList contains a list of DataFactoryLinkedServiceAzureSearchs
type DataFactoryLinkedServiceAzureSearchList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryLinkedServiceAzureSearch `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryLinkedServiceAzureSearchKind             = "DataFactoryLinkedServiceAzureSearch"
	DataFactoryLinkedServiceAzureSearchGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryLinkedServiceAzureSearchKind}.String()
	DataFactoryLinkedServiceAzureSearchKindAPIVersion   = DataFactoryLinkedServiceAzureSearchKind + "." + GroupVersion.String()
	DataFactoryLinkedServiceAzureSearchGroupVersionKind = GroupVersion.WithKind(DataFactoryLinkedServiceAzureSearchKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryLinkedServiceAzureSearch{}, &DataFactoryLinkedServiceAzureSearchList{})
}
