/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryObservation struct {
}

type DataFactoryParameters struct {

	// +kubebuilder:validation:Optional
	CustomerManagedKeyID *string `json:"customerManagedKeyId,omitempty" tf:"customer_managed_key_id"`

	// +kubebuilder:validation:Optional
	GithubConfiguration []GithubConfigurationParameters `json:"githubConfiguration,omitempty" tf:"github_configuration"`

	// +kubebuilder:validation:Optional
	GlobalParameter []GlobalParameterParameters `json:"globalParameter,omitempty" tf:"global_parameter"`

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	ManagedVirtualNetworkEnabled *bool `json:"managedVirtualNetworkEnabled,omitempty" tf:"managed_virtual_network_enabled"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PublicNetworkEnabled *bool `json:"publicNetworkEnabled,omitempty" tf:"public_network_enabled"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	VstsConfiguration []VstsConfigurationParameters `json:"vstsConfiguration,omitempty" tf:"vsts_configuration"`
}

type GithubConfigurationObservation struct {
}

type GithubConfigurationParameters struct {

	// +kubebuilder:validation:Required
	AccountName string `json:"accountName" tf:"account_name"`

	// +kubebuilder:validation:Required
	BranchName string `json:"branchName" tf:"branch_name"`

	// +kubebuilder:validation:Required
	GitURL string `json:"gitUrl" tf:"git_url"`

	// +kubebuilder:validation:Required
	RepositoryName string `json:"repositoryName" tf:"repository_name"`

	// +kubebuilder:validation:Required
	RootFolder string `json:"rootFolder" tf:"root_folder"`
}

type GlobalParameterObservation struct {
}

type GlobalParameterParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`

	// +kubebuilder:validation:Required
	Value string `json:"value" tf:"value"`
}

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Optional
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type VstsConfigurationObservation struct {
}

type VstsConfigurationParameters struct {

	// +kubebuilder:validation:Required
	AccountName string `json:"accountName" tf:"account_name"`

	// +kubebuilder:validation:Required
	BranchName string `json:"branchName" tf:"branch_name"`

	// +kubebuilder:validation:Required
	ProjectName string `json:"projectName" tf:"project_name"`

	// +kubebuilder:validation:Required
	RepositoryName string `json:"repositoryName" tf:"repository_name"`

	// +kubebuilder:validation:Required
	RootFolder string `json:"rootFolder" tf:"root_folder"`

	// +kubebuilder:validation:Required
	TenantID string `json:"tenantId" tf:"tenant_id"`
}

// DataFactorySpec defines the desired state of DataFactory
type DataFactorySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryParameters `json:"forProvider"`
}

// DataFactoryStatus defines the observed state of DataFactory.
type DataFactoryStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactory is the Schema for the DataFactorys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactory struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactorySpec   `json:"spec"`
	Status            DataFactoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryList contains a list of DataFactorys
type DataFactoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactory `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryKind             = "DataFactory"
	DataFactoryGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryKind}.String()
	DataFactoryKindAPIVersion   = DataFactoryKind + "." + GroupVersion.String()
	DataFactoryGroupVersionKind = GroupVersion.WithKind(DataFactoryKind)
)

func init() {
	SchemeBuilder.Register(&DataFactory{}, &DataFactoryList{})
}
