/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryLinkedServiceAzureBlobStorageObservation struct {
}

type DataFactoryLinkedServiceAzureBlobStorageParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty" tf:"additional_properties"`

	// +kubebuilder:validation:Optional
	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	// +kubebuilder:validation:Optional
	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string"`

	// +kubebuilder:validation:Required
	DataFactoryName string `json:"dataFactoryName" tf:"data_factory_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	IntegrationRuntimeName *string `json:"integrationRuntimeName,omitempty" tf:"integration_runtime_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	SasURI *string `json:"sasUri,omitempty" tf:"sas_uri"`

	// +kubebuilder:validation:Optional
	ServiceEndpoint *string `json:"serviceEndpoint,omitempty" tf:"service_endpoint"`

	// +kubebuilder:validation:Optional
	ServicePrincipalID *string `json:"servicePrincipalId,omitempty" tf:"service_principal_id"`

	// +kubebuilder:validation:Optional
	ServicePrincipalKey *string `json:"servicePrincipalKey,omitempty" tf:"service_principal_key"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id"`

	// +kubebuilder:validation:Optional
	UseManagedIdentity *bool `json:"useManagedIdentity,omitempty" tf:"use_managed_identity"`
}

// DataFactoryLinkedServiceAzureBlobStorageSpec defines the desired state of DataFactoryLinkedServiceAzureBlobStorage
type DataFactoryLinkedServiceAzureBlobStorageSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryLinkedServiceAzureBlobStorageParameters `json:"forProvider"`
}

// DataFactoryLinkedServiceAzureBlobStorageStatus defines the observed state of DataFactoryLinkedServiceAzureBlobStorage.
type DataFactoryLinkedServiceAzureBlobStorageStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryLinkedServiceAzureBlobStorageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceAzureBlobStorage is the Schema for the DataFactoryLinkedServiceAzureBlobStorages API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryLinkedServiceAzureBlobStorage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryLinkedServiceAzureBlobStorageSpec   `json:"spec"`
	Status            DataFactoryLinkedServiceAzureBlobStorageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceAzureBlobStorageList contains a list of DataFactoryLinkedServiceAzureBlobStorages
type DataFactoryLinkedServiceAzureBlobStorageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryLinkedServiceAzureBlobStorage `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryLinkedServiceAzureBlobStorageKind             = "DataFactoryLinkedServiceAzureBlobStorage"
	DataFactoryLinkedServiceAzureBlobStorageGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryLinkedServiceAzureBlobStorageKind}.String()
	DataFactoryLinkedServiceAzureBlobStorageKindAPIVersion   = DataFactoryLinkedServiceAzureBlobStorageKind + "." + GroupVersion.String()
	DataFactoryLinkedServiceAzureBlobStorageGroupVersionKind = GroupVersion.WithKind(DataFactoryLinkedServiceAzureBlobStorageKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryLinkedServiceAzureBlobStorage{}, &DataFactoryLinkedServiceAzureBlobStorageList{})
}
