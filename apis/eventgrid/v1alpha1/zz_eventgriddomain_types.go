/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type EventgridDomainObservation struct {
	Endpoint string `json:"endpoint,omitempty" tf:"endpoint"`

	PrimaryAccessKey string `json:"primaryAccessKey,omitempty" tf:"primary_access_key"`

	SecondaryAccessKey string `json:"secondaryAccessKey,omitempty" tf:"secondary_access_key"`
}

type EventgridDomainParameters struct {

	// +kubebuilder:validation:Optional
	InboundIPRule []InboundIPRuleParameters `json:"inboundIpRule,omitempty" tf:"inbound_ip_rule"`

	// +kubebuilder:validation:Optional
	InputMappingDefaultValues []InputMappingDefaultValuesParameters `json:"inputMappingDefaultValues,omitempty" tf:"input_mapping_default_values"`

	// +kubebuilder:validation:Optional
	InputMappingFields []InputMappingFieldsParameters `json:"inputMappingFields,omitempty" tf:"input_mapping_fields"`

	// +kubebuilder:validation:Optional
	InputSchema *string `json:"inputSchema,omitempty" tf:"input_schema"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PublicNetworkAccessEnabled *bool `json:"publicNetworkAccessEnabled,omitempty" tf:"public_network_access_enabled"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type InboundIPRuleObservation struct {
}

type InboundIPRuleParameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action"`

	// +kubebuilder:validation:Required
	IPMask string `json:"ipMask" tf:"ip_mask"`
}

type InputMappingDefaultValuesObservation struct {
}

type InputMappingDefaultValuesParameters struct {

	// +kubebuilder:validation:Optional
	DataVersion *string `json:"dataVersion,omitempty" tf:"data_version"`

	// +kubebuilder:validation:Optional
	EventType *string `json:"eventType,omitempty" tf:"event_type"`

	// +kubebuilder:validation:Optional
	Subject *string `json:"subject,omitempty" tf:"subject"`
}

type InputMappingFieldsObservation struct {
}

type InputMappingFieldsParameters struct {

	// +kubebuilder:validation:Optional
	DataVersion *string `json:"dataVersion,omitempty" tf:"data_version"`

	// +kubebuilder:validation:Optional
	EventTime *string `json:"eventTime,omitempty" tf:"event_time"`

	// +kubebuilder:validation:Optional
	EventType *string `json:"eventType,omitempty" tf:"event_type"`

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id"`

	// +kubebuilder:validation:Optional
	Subject *string `json:"subject,omitempty" tf:"subject"`

	// +kubebuilder:validation:Optional
	Topic *string `json:"topic,omitempty" tf:"topic"`
}

// EventgridDomainSpec defines the desired state of EventgridDomain
type EventgridDomainSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EventgridDomainParameters `json:"forProvider"`
}

// EventgridDomainStatus defines the observed state of EventgridDomain.
type EventgridDomainStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EventgridDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EventgridDomain is the Schema for the EventgridDomains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type EventgridDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventgridDomainSpec   `json:"spec"`
	Status            EventgridDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventgridDomainList contains a list of EventgridDomains
type EventgridDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventgridDomain `json:"items"`
}

// Repository type metadata.
var (
	EventgridDomainKind             = "EventgridDomain"
	EventgridDomainGroupKind        = schema.GroupKind{Group: Group, Kind: EventgridDomainKind}.String()
	EventgridDomainKindAPIVersion   = EventgridDomainKind + "." + GroupVersion.String()
	EventgridDomainGroupVersionKind = GroupVersion.WithKind(EventgridDomainKind)
)

func init() {
	SchemeBuilder.Register(&EventgridDomain{}, &EventgridDomainList{})
}
