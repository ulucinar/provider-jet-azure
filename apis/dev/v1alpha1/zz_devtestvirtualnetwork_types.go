/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DevTestVirtualNetworkObservation struct {
	UniqueIdentifier string `json:"uniqueIdentifier,omitempty" tf:"unique_identifier"`
}

type DevTestVirtualNetworkParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	LabName string `json:"labName" tf:"lab_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Subnet []SubnetParameters `json:"subnet,omitempty" tf:"subnet"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type SubnetObservation struct {
	Name string `json:"name,omitempty" tf:"name"`
}

type SubnetParameters struct {

	// +kubebuilder:validation:Optional
	UseInVirtualMachineCreation *string `json:"useInVirtualMachineCreation,omitempty" tf:"use_in_virtual_machine_creation"`

	// +kubebuilder:validation:Optional
	UsePublicIPAddress *string `json:"usePublicIpAddress,omitempty" tf:"use_public_ip_address"`
}

// DevTestVirtualNetworkSpec defines the desired state of DevTestVirtualNetwork
type DevTestVirtualNetworkSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DevTestVirtualNetworkParameters `json:"forProvider"`
}

// DevTestVirtualNetworkStatus defines the observed state of DevTestVirtualNetwork.
type DevTestVirtualNetworkStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DevTestVirtualNetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DevTestVirtualNetwork is the Schema for the DevTestVirtualNetworks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DevTestVirtualNetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DevTestVirtualNetworkSpec   `json:"spec"`
	Status            DevTestVirtualNetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DevTestVirtualNetworkList contains a list of DevTestVirtualNetworks
type DevTestVirtualNetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DevTestVirtualNetwork `json:"items"`
}

// Repository type metadata.
var (
	DevTestVirtualNetworkKind             = "DevTestVirtualNetwork"
	DevTestVirtualNetworkGroupKind        = schema.GroupKind{Group: Group, Kind: DevTestVirtualNetworkKind}.String()
	DevTestVirtualNetworkKindAPIVersion   = DevTestVirtualNetworkKind + "." + GroupVersion.String()
	DevTestVirtualNetworkGroupVersionKind = GroupVersion.WithKind(DevTestVirtualNetworkKind)
)

func init() {
	SchemeBuilder.Register(&DevTestVirtualNetwork{}, &DevTestVirtualNetworkList{})
}
