/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DevTestLabObservation struct {
	ArtifactsStorageAccountID string `json:"artifactsStorageAccountId,omitempty" tf:"artifacts_storage_account_id"`

	DefaultPremiumStorageAccountID string `json:"defaultPremiumStorageAccountId,omitempty" tf:"default_premium_storage_account_id"`

	DefaultStorageAccountID string `json:"defaultStorageAccountId,omitempty" tf:"default_storage_account_id"`

	KeyVaultID string `json:"keyVaultId,omitempty" tf:"key_vault_id"`

	PremiumDataDiskStorageAccountID string `json:"premiumDataDiskStorageAccountId,omitempty" tf:"premium_data_disk_storage_account_id"`

	UniqueIdentifier string `json:"uniqueIdentifier,omitempty" tf:"unique_identifier"`
}

type DevTestLabParameters struct {

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	StorageType *string `json:"storageType,omitempty" tf:"storage_type"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// DevTestLabSpec defines the desired state of DevTestLab
type DevTestLabSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DevTestLabParameters `json:"forProvider"`
}

// DevTestLabStatus defines the observed state of DevTestLab.
type DevTestLabStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DevTestLabObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DevTestLab is the Schema for the DevTestLabs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DevTestLab struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DevTestLabSpec   `json:"spec"`
	Status            DevTestLabStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DevTestLabList contains a list of DevTestLabs
type DevTestLabList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DevTestLab `json:"items"`
}

// Repository type metadata.
var (
	DevTestLabKind             = "DevTestLab"
	DevTestLabGroupKind        = schema.GroupKind{Group: Group, Kind: DevTestLabKind}.String()
	DevTestLabKindAPIVersion   = DevTestLabKind + "." + GroupVersion.String()
	DevTestLabGroupVersionKind = GroupVersion.WithKind(DevTestLabKind)
)

func init() {
	SchemeBuilder.Register(&DevTestLab{}, &DevTestLabList{})
}
