/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DevTestPolicyObservation struct {
}

type DevTestPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	EvaluatorType string `json:"evaluatorType" tf:"evaluator_type"`

	// +kubebuilder:validation:Optional
	FactData *string `json:"factData,omitempty" tf:"fact_data"`

	// +kubebuilder:validation:Required
	LabName string `json:"labName" tf:"lab_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	PolicySetName string `json:"policySetName" tf:"policy_set_name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	Threshold string `json:"threshold" tf:"threshold"`
}

// DevTestPolicySpec defines the desired state of DevTestPolicy
type DevTestPolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DevTestPolicyParameters `json:"forProvider"`
}

// DevTestPolicyStatus defines the observed state of DevTestPolicy.
type DevTestPolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DevTestPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DevTestPolicy is the Schema for the DevTestPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DevTestPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DevTestPolicySpec   `json:"spec"`
	Status            DevTestPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DevTestPolicyList contains a list of DevTestPolicys
type DevTestPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DevTestPolicy `json:"items"`
}

// Repository type metadata.
var (
	DevTestPolicyKind             = "DevTestPolicy"
	DevTestPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: DevTestPolicyKind}.String()
	DevTestPolicyKindAPIVersion   = DevTestPolicyKind + "." + GroupVersion.String()
	DevTestPolicyGroupVersionKind = GroupVersion.WithKind(DevTestPolicyKind)
)

func init() {
	SchemeBuilder.Register(&DevTestPolicy{}, &DevTestPolicyList{})
}
