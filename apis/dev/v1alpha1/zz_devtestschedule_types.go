/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DailyRecurrenceObservation struct {
}

type DailyRecurrenceParameters struct {

	// +kubebuilder:validation:Required
	Time string `json:"time" tf:"time"`
}

type DevTestScheduleNotificationSettingsObservation struct {
}

type DevTestScheduleNotificationSettingsParameters struct {

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status"`

	// +kubebuilder:validation:Optional
	TimeInMinutes *int64 `json:"timeInMinutes,omitempty" tf:"time_in_minutes"`

	// +kubebuilder:validation:Optional
	WebhookURL *string `json:"webhookUrl,omitempty" tf:"webhook_url"`
}

type DevTestScheduleObservation struct {
}

type DevTestScheduleParameters struct {

	// +kubebuilder:validation:Optional
	DailyRecurrence []DailyRecurrenceParameters `json:"dailyRecurrence,omitempty" tf:"daily_recurrence"`

	// +kubebuilder:validation:Optional
	HourlyRecurrence []HourlyRecurrenceParameters `json:"hourlyRecurrence,omitempty" tf:"hourly_recurrence"`

	// +kubebuilder:validation:Required
	LabName string `json:"labName" tf:"lab_name"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	NotificationSettings []DevTestScheduleNotificationSettingsParameters `json:"notificationSettings" tf:"notification_settings"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	TaskType string `json:"taskType" tf:"task_type"`

	// +kubebuilder:validation:Required
	TimeZoneID string `json:"timeZoneId" tf:"time_zone_id"`

	// +kubebuilder:validation:Optional
	WeeklyRecurrence []WeeklyRecurrenceParameters `json:"weeklyRecurrence,omitempty" tf:"weekly_recurrence"`
}

type HourlyRecurrenceObservation struct {
}

type HourlyRecurrenceParameters struct {

	// +kubebuilder:validation:Required
	Minute int64 `json:"minute" tf:"minute"`
}

type WeeklyRecurrenceObservation struct {
}

type WeeklyRecurrenceParameters struct {

	// +kubebuilder:validation:Required
	Time string `json:"time" tf:"time"`

	// +kubebuilder:validation:Optional
	WeekDays []string `json:"weekDays,omitempty" tf:"week_days"`
}

// DevTestScheduleSpec defines the desired state of DevTestSchedule
type DevTestScheduleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DevTestScheduleParameters `json:"forProvider"`
}

// DevTestScheduleStatus defines the observed state of DevTestSchedule.
type DevTestScheduleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DevTestScheduleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DevTestSchedule is the Schema for the DevTestSchedules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DevTestSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DevTestScheduleSpec   `json:"spec"`
	Status            DevTestScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DevTestScheduleList contains a list of DevTestSchedules
type DevTestScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DevTestSchedule `json:"items"`
}

// Repository type metadata.
var (
	DevTestScheduleKind             = "DevTestSchedule"
	DevTestScheduleGroupKind        = schema.GroupKind{Group: Group, Kind: DevTestScheduleKind}.String()
	DevTestScheduleKindAPIVersion   = DevTestScheduleKind + "." + GroupVersion.String()
	DevTestScheduleGroupVersionKind = GroupVersion.WithKind(DevTestScheduleKind)
)

func init() {
	SchemeBuilder.Register(&DevTestSchedule{}, &DevTestScheduleList{})
}
