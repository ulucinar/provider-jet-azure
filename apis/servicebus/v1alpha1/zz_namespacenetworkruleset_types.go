/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NamespaceNetworkRuleSetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NamespaceNetworkRuleSetParameters struct {

	// +kubebuilder:validation:Optional
	DefaultAction *string `json:"defaultAction,omitempty" tf:"default_action,omitempty"`

	// +kubebuilder:validation:Optional
	IPRules []*string `json:"ipRules,omitempty" tf:"ip_rules,omitempty"`

	// +kubebuilder:validation:Required
	NamespaceName *string `json:"namespaceName" tf:"namespace_name,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkRules []NetworkRulesParameters `json:"networkRules,omitempty" tf:"network_rules,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`
}

type NetworkRulesObservation struct {
}

type NetworkRulesParameters struct {

	// +kubebuilder:validation:Optional
	IgnoreMissingVnetServiceEndpoint *bool `json:"ignoreMissingVnetServiceEndpoint,omitempty" tf:"ignore_missing_vnet_service_endpoint,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/network/v1alpha2.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-jet-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

// NamespaceNetworkRuleSetSpec defines the desired state of NamespaceNetworkRuleSet
type NamespaceNetworkRuleSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NamespaceNetworkRuleSetParameters `json:"forProvider"`
}

// NamespaceNetworkRuleSetStatus defines the observed state of NamespaceNetworkRuleSet.
type NamespaceNetworkRuleSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NamespaceNetworkRuleSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NamespaceNetworkRuleSet is the Schema for the NamespaceNetworkRuleSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type NamespaceNetworkRuleSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NamespaceNetworkRuleSetSpec   `json:"spec"`
	Status            NamespaceNetworkRuleSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NamespaceNetworkRuleSetList contains a list of NamespaceNetworkRuleSets
type NamespaceNetworkRuleSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NamespaceNetworkRuleSet `json:"items"`
}

// Repository type metadata.
var (
	NamespaceNetworkRuleSet_Kind             = "NamespaceNetworkRuleSet"
	NamespaceNetworkRuleSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NamespaceNetworkRuleSet_Kind}.String()
	NamespaceNetworkRuleSet_KindAPIVersion   = NamespaceNetworkRuleSet_Kind + "." + CRDGroupVersion.String()
	NamespaceNetworkRuleSet_GroupVersionKind = CRDGroupVersion.WithKind(NamespaceNetworkRuleSet_Kind)
)

func init() {
	SchemeBuilder.Register(&NamespaceNetworkRuleSet{}, &NamespaceNetworkRuleSetList{})
}
