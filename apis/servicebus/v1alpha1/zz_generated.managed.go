/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this ServicebusNamespace.
func (mg *ServicebusNamespace) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServicebusNamespace.
func (mg *ServicebusNamespace) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServicebusNamespace.
func (mg *ServicebusNamespace) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServicebusNamespace.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServicebusNamespace) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServicebusNamespace.
func (mg *ServicebusNamespace) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServicebusNamespace.
func (mg *ServicebusNamespace) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServicebusNamespace.
func (mg *ServicebusNamespace) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServicebusNamespace.
func (mg *ServicebusNamespace) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServicebusNamespace.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServicebusNamespace) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServicebusNamespace.
func (mg *ServicebusNamespace) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ServicebusNamespaceAuthorizationRule.
func (mg *ServicebusNamespaceAuthorizationRule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServicebusNamespaceAuthorizationRule.
func (mg *ServicebusNamespaceAuthorizationRule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServicebusNamespaceAuthorizationRule.
func (mg *ServicebusNamespaceAuthorizationRule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServicebusNamespaceAuthorizationRule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServicebusNamespaceAuthorizationRule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServicebusNamespaceAuthorizationRule.
func (mg *ServicebusNamespaceAuthorizationRule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServicebusNamespaceAuthorizationRule.
func (mg *ServicebusNamespaceAuthorizationRule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServicebusNamespaceAuthorizationRule.
func (mg *ServicebusNamespaceAuthorizationRule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServicebusNamespaceAuthorizationRule.
func (mg *ServicebusNamespaceAuthorizationRule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServicebusNamespaceAuthorizationRule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServicebusNamespaceAuthorizationRule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServicebusNamespaceAuthorizationRule.
func (mg *ServicebusNamespaceAuthorizationRule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ServicebusNamespaceDisasterRecoveryConfig.
func (mg *ServicebusNamespaceDisasterRecoveryConfig) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServicebusNamespaceDisasterRecoveryConfig.
func (mg *ServicebusNamespaceDisasterRecoveryConfig) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServicebusNamespaceDisasterRecoveryConfig.
func (mg *ServicebusNamespaceDisasterRecoveryConfig) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServicebusNamespaceDisasterRecoveryConfig.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServicebusNamespaceDisasterRecoveryConfig) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServicebusNamespaceDisasterRecoveryConfig.
func (mg *ServicebusNamespaceDisasterRecoveryConfig) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServicebusNamespaceDisasterRecoveryConfig.
func (mg *ServicebusNamespaceDisasterRecoveryConfig) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServicebusNamespaceDisasterRecoveryConfig.
func (mg *ServicebusNamespaceDisasterRecoveryConfig) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServicebusNamespaceDisasterRecoveryConfig.
func (mg *ServicebusNamespaceDisasterRecoveryConfig) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServicebusNamespaceDisasterRecoveryConfig.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServicebusNamespaceDisasterRecoveryConfig) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServicebusNamespaceDisasterRecoveryConfig.
func (mg *ServicebusNamespaceDisasterRecoveryConfig) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ServicebusNamespaceNetworkRuleSet.
func (mg *ServicebusNamespaceNetworkRuleSet) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServicebusNamespaceNetworkRuleSet.
func (mg *ServicebusNamespaceNetworkRuleSet) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServicebusNamespaceNetworkRuleSet.
func (mg *ServicebusNamespaceNetworkRuleSet) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServicebusNamespaceNetworkRuleSet.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServicebusNamespaceNetworkRuleSet) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServicebusNamespaceNetworkRuleSet.
func (mg *ServicebusNamespaceNetworkRuleSet) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServicebusNamespaceNetworkRuleSet.
func (mg *ServicebusNamespaceNetworkRuleSet) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServicebusNamespaceNetworkRuleSet.
func (mg *ServicebusNamespaceNetworkRuleSet) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServicebusNamespaceNetworkRuleSet.
func (mg *ServicebusNamespaceNetworkRuleSet) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServicebusNamespaceNetworkRuleSet.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServicebusNamespaceNetworkRuleSet) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServicebusNamespaceNetworkRuleSet.
func (mg *ServicebusNamespaceNetworkRuleSet) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ServicebusQueue.
func (mg *ServicebusQueue) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServicebusQueue.
func (mg *ServicebusQueue) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServicebusQueue.
func (mg *ServicebusQueue) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServicebusQueue.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServicebusQueue) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServicebusQueue.
func (mg *ServicebusQueue) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServicebusQueue.
func (mg *ServicebusQueue) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServicebusQueue.
func (mg *ServicebusQueue) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServicebusQueue.
func (mg *ServicebusQueue) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServicebusQueue.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServicebusQueue) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServicebusQueue.
func (mg *ServicebusQueue) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ServicebusQueueAuthorizationRule.
func (mg *ServicebusQueueAuthorizationRule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServicebusQueueAuthorizationRule.
func (mg *ServicebusQueueAuthorizationRule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServicebusQueueAuthorizationRule.
func (mg *ServicebusQueueAuthorizationRule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServicebusQueueAuthorizationRule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServicebusQueueAuthorizationRule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServicebusQueueAuthorizationRule.
func (mg *ServicebusQueueAuthorizationRule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServicebusQueueAuthorizationRule.
func (mg *ServicebusQueueAuthorizationRule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServicebusQueueAuthorizationRule.
func (mg *ServicebusQueueAuthorizationRule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServicebusQueueAuthorizationRule.
func (mg *ServicebusQueueAuthorizationRule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServicebusQueueAuthorizationRule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServicebusQueueAuthorizationRule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServicebusQueueAuthorizationRule.
func (mg *ServicebusQueueAuthorizationRule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ServicebusSubscription.
func (mg *ServicebusSubscription) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServicebusSubscription.
func (mg *ServicebusSubscription) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServicebusSubscription.
func (mg *ServicebusSubscription) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServicebusSubscription.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServicebusSubscription) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServicebusSubscription.
func (mg *ServicebusSubscription) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServicebusSubscription.
func (mg *ServicebusSubscription) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServicebusSubscription.
func (mg *ServicebusSubscription) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServicebusSubscription.
func (mg *ServicebusSubscription) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServicebusSubscription.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServicebusSubscription) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServicebusSubscription.
func (mg *ServicebusSubscription) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ServicebusSubscriptionRule.
func (mg *ServicebusSubscriptionRule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServicebusSubscriptionRule.
func (mg *ServicebusSubscriptionRule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServicebusSubscriptionRule.
func (mg *ServicebusSubscriptionRule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServicebusSubscriptionRule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServicebusSubscriptionRule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServicebusSubscriptionRule.
func (mg *ServicebusSubscriptionRule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServicebusSubscriptionRule.
func (mg *ServicebusSubscriptionRule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServicebusSubscriptionRule.
func (mg *ServicebusSubscriptionRule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServicebusSubscriptionRule.
func (mg *ServicebusSubscriptionRule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServicebusSubscriptionRule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServicebusSubscriptionRule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServicebusSubscriptionRule.
func (mg *ServicebusSubscriptionRule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ServicebusTopic.
func (mg *ServicebusTopic) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServicebusTopic.
func (mg *ServicebusTopic) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServicebusTopic.
func (mg *ServicebusTopic) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServicebusTopic.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServicebusTopic) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServicebusTopic.
func (mg *ServicebusTopic) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServicebusTopic.
func (mg *ServicebusTopic) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServicebusTopic.
func (mg *ServicebusTopic) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServicebusTopic.
func (mg *ServicebusTopic) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServicebusTopic.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServicebusTopic) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServicebusTopic.
func (mg *ServicebusTopic) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ServicebusTopicAuthorizationRule.
func (mg *ServicebusTopicAuthorizationRule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ServicebusTopicAuthorizationRule.
func (mg *ServicebusTopicAuthorizationRule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ServicebusTopicAuthorizationRule.
func (mg *ServicebusTopicAuthorizationRule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ServicebusTopicAuthorizationRule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ServicebusTopicAuthorizationRule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ServicebusTopicAuthorizationRule.
func (mg *ServicebusTopicAuthorizationRule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ServicebusTopicAuthorizationRule.
func (mg *ServicebusTopicAuthorizationRule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ServicebusTopicAuthorizationRule.
func (mg *ServicebusTopicAuthorizationRule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ServicebusTopicAuthorizationRule.
func (mg *ServicebusTopicAuthorizationRule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ServicebusTopicAuthorizationRule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ServicebusTopicAuthorizationRule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ServicebusTopicAuthorizationRule.
func (mg *ServicebusTopicAuthorizationRule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
