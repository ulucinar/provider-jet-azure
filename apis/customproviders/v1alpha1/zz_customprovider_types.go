/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionObservation struct {
}

type ActionParameters struct {

	// +kubebuilder:validation:Required
	Endpoint *string `json:"endpoint" tf:"endpoint,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type CustomProviderObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CustomProviderParameters struct {

	// +kubebuilder:validation:Optional
	Action []ActionParameters `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceType []ResourceTypeParameters `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Validation []ValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type ResourceTypeObservation struct {
}

type ResourceTypeParameters struct {

	// +kubebuilder:validation:Required
	Endpoint *string `json:"endpoint" tf:"endpoint,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	RoutingType *string `json:"routingType,omitempty" tf:"routing_type,omitempty"`
}

type ValidationObservation struct {
}

type ValidationParameters struct {

	// +kubebuilder:validation:Required
	Specification *string `json:"specification" tf:"specification,omitempty"`
}

// CustomProviderSpec defines the desired state of CustomProvider
type CustomProviderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomProviderParameters `json:"forProvider"`
}

// CustomProviderStatus defines the observed state of CustomProvider.
type CustomProviderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CustomProvider is the Schema for the CustomProviders API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type CustomProvider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CustomProviderSpec   `json:"spec"`
	Status            CustomProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomProviderList contains a list of CustomProviders
type CustomProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomProvider `json:"items"`
}

// Repository type metadata.
var (
	CustomProvider_Kind             = "CustomProvider"
	CustomProvider_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomProvider_Kind}.String()
	CustomProvider_KindAPIVersion   = CustomProvider_Kind + "." + CRDGroupVersion.String()
	CustomProvider_GroupVersionKind = CRDGroupVersion.WithKind(CustomProvider_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomProvider{}, &CustomProviderList{})
}
