/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CostManagementExportResourceGroupObservation struct {
}

type CostManagementExportResourceGroupParameters struct {

	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active"`

	// +kubebuilder:validation:Required
	DeliveryInfo []DeliveryInfoParameters `json:"deliveryInfo" tf:"delivery_info"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Query []QueryParameters `json:"query" tf:"query"`

	// +kubebuilder:validation:Required
	RecurrencePeriodEnd string `json:"recurrencePeriodEnd" tf:"recurrence_period_end"`

	// +kubebuilder:validation:Required
	RecurrencePeriodStart string `json:"recurrencePeriodStart" tf:"recurrence_period_start"`

	// +kubebuilder:validation:Required
	RecurrenceType string `json:"recurrenceType" tf:"recurrence_type"`

	// +kubebuilder:validation:Required
	ResourceGroupID string `json:"resourceGroupId" tf:"resource_group_id"`
}

type DeliveryInfoObservation struct {
}

type DeliveryInfoParameters struct {

	// +kubebuilder:validation:Required
	ContainerName string `json:"containerName" tf:"container_name"`

	// +kubebuilder:validation:Required
	RootFolderPath string `json:"rootFolderPath" tf:"root_folder_path"`

	// +kubebuilder:validation:Required
	StorageAccountID string `json:"storageAccountId" tf:"storage_account_id"`
}

type QueryObservation struct {
}

type QueryParameters struct {

	// +kubebuilder:validation:Required
	TimeFrame string `json:"timeFrame" tf:"time_frame"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

// CostManagementExportResourceGroupSpec defines the desired state of CostManagementExportResourceGroup
type CostManagementExportResourceGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CostManagementExportResourceGroupParameters `json:"forProvider"`
}

// CostManagementExportResourceGroupStatus defines the observed state of CostManagementExportResourceGroup.
type CostManagementExportResourceGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CostManagementExportResourceGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CostManagementExportResourceGroup is the Schema for the CostManagementExportResourceGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type CostManagementExportResourceGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CostManagementExportResourceGroupSpec   `json:"spec"`
	Status            CostManagementExportResourceGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CostManagementExportResourceGroupList contains a list of CostManagementExportResourceGroups
type CostManagementExportResourceGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CostManagementExportResourceGroup `json:"items"`
}

// Repository type metadata.
var (
	CostManagementExportResourceGroupKind             = "CostManagementExportResourceGroup"
	CostManagementExportResourceGroupGroupKind        = schema.GroupKind{Group: Group, Kind: CostManagementExportResourceGroupKind}.String()
	CostManagementExportResourceGroupKindAPIVersion   = CostManagementExportResourceGroupKind + "." + GroupVersion.String()
	CostManagementExportResourceGroupGroupVersionKind = GroupVersion.WithKind(CostManagementExportResourceGroupKind)
)

func init() {
	SchemeBuilder.Register(&CostManagementExportResourceGroup{}, &CostManagementExportResourceGroupList{})
}
