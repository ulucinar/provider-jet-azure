/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ConsumptionBudgetResourceGroupObservation struct {
}

type ConsumptionBudgetResourceGroupParameters struct {

	// +kubebuilder:validation:Required
	Amount float64 `json:"amount" tf:"amount"`

	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Notification []NotificationParameters `json:"notification" tf:"notification"`

	// +kubebuilder:validation:Required
	ResourceGroupID string `json:"resourceGroupId" tf:"resource_group_id"`

	// +kubebuilder:validation:Optional
	TimeGrain *string `json:"timeGrain,omitempty" tf:"time_grain"`

	// +kubebuilder:validation:Required
	TimePeriod []TimePeriodParameters `json:"timePeriod" tf:"time_period"`
}

type DimensionObservation struct {
}

type DimensionParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator"`

	// +kubebuilder:validation:Required
	Values []string `json:"values" tf:"values"`
}

type FilterObservation struct {
}

type FilterParameters struct {

	// +kubebuilder:validation:Optional
	Dimension []DimensionParameters `json:"dimension,omitempty" tf:"dimension"`

	// +kubebuilder:validation:Optional
	Not []NotParameters `json:"not,omitempty" tf:"not"`

	// +kubebuilder:validation:Optional
	Tag []FilterTagParameters `json:"tag,omitempty" tf:"tag"`
}

type FilterTagObservation struct {
}

type FilterTagParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator"`

	// +kubebuilder:validation:Required
	Values []string `json:"values" tf:"values"`
}

type NotDimensionObservation struct {
}

type NotDimensionParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator"`

	// +kubebuilder:validation:Required
	Values []string `json:"values" tf:"values"`
}

type NotObservation struct {
}

type NotParameters struct {

	// +kubebuilder:validation:Optional
	Dimension []NotDimensionParameters `json:"dimension,omitempty" tf:"dimension"`

	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag"`
}

type NotificationObservation struct {
}

type NotificationParameters struct {

	// +kubebuilder:validation:Optional
	ContactEmails []string `json:"contactEmails,omitempty" tf:"contact_emails"`

	// +kubebuilder:validation:Optional
	ContactGroups []string `json:"contactGroups,omitempty" tf:"contact_groups"`

	// +kubebuilder:validation:Optional
	ContactRoles []string `json:"contactRoles,omitempty" tf:"contact_roles"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Required
	Operator string `json:"operator" tf:"operator"`

	// +kubebuilder:validation:Required
	Threshold int64 `json:"threshold" tf:"threshold"`
}

type TagObservation struct {
}

type TagParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator"`

	// +kubebuilder:validation:Required
	Values []string `json:"values" tf:"values"`
}

type TimePeriodObservation struct {
}

type TimePeriodParameters struct {

	// +kubebuilder:validation:Optional
	EndDate *string `json:"endDate,omitempty" tf:"end_date"`

	// +kubebuilder:validation:Required
	StartDate string `json:"startDate" tf:"start_date"`
}

// ConsumptionBudgetResourceGroupSpec defines the desired state of ConsumptionBudgetResourceGroup
type ConsumptionBudgetResourceGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ConsumptionBudgetResourceGroupParameters `json:"forProvider"`
}

// ConsumptionBudgetResourceGroupStatus defines the observed state of ConsumptionBudgetResourceGroup.
type ConsumptionBudgetResourceGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ConsumptionBudgetResourceGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConsumptionBudgetResourceGroup is the Schema for the ConsumptionBudgetResourceGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ConsumptionBudgetResourceGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConsumptionBudgetResourceGroupSpec   `json:"spec"`
	Status            ConsumptionBudgetResourceGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConsumptionBudgetResourceGroupList contains a list of ConsumptionBudgetResourceGroups
type ConsumptionBudgetResourceGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConsumptionBudgetResourceGroup `json:"items"`
}

// Repository type metadata.
var (
	ConsumptionBudgetResourceGroupKind             = "ConsumptionBudgetResourceGroup"
	ConsumptionBudgetResourceGroupGroupKind        = schema.GroupKind{Group: Group, Kind: ConsumptionBudgetResourceGroupKind}.String()
	ConsumptionBudgetResourceGroupKindAPIVersion   = ConsumptionBudgetResourceGroupKind + "." + GroupVersion.String()
	ConsumptionBudgetResourceGroupGroupVersionKind = GroupVersion.WithKind(ConsumptionBudgetResourceGroupKind)
)

func init() {
	SchemeBuilder.Register(&ConsumptionBudgetResourceGroup{}, &ConsumptionBudgetResourceGroupList{})
}
