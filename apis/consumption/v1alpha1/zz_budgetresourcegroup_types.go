/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BudgetResourceGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BudgetResourceGroupParameters struct {

	// +kubebuilder:validation:Required
	Amount *float64 `json:"amount" tf:"amount,omitempty"`

	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Notification []NotificationParameters `json:"notification" tf:"notification,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure2/v1alpha2.ResourceGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-jet-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupIDRef *v1.Reference `json:"resourceGroupIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupIDSelector *v1.Selector `json:"resourceGroupIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TimeGrain *string `json:"timeGrain,omitempty" tf:"time_grain,omitempty"`

	// +kubebuilder:validation:Required
	TimePeriod []TimePeriodParameters `json:"timePeriod" tf:"time_period,omitempty"`
}

type DimensionObservation struct {
}

type DimensionParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type FilterObservation struct {
}

type FilterParameters struct {

	// +kubebuilder:validation:Optional
	Dimension []DimensionParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// +kubebuilder:validation:Optional
	Not []NotParameters `json:"not,omitempty" tf:"not,omitempty"`

	// +kubebuilder:validation:Optional
	Tag []FilterTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type FilterTagObservation struct {
}

type FilterTagParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type NotDimensionObservation struct {
}

type NotDimensionParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type NotObservation struct {
}

type NotParameters struct {

	// +kubebuilder:validation:Optional
	Dimension []NotDimensionParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type NotificationObservation struct {
}

type NotificationParameters struct {

	// +kubebuilder:validation:Optional
	ContactEmails []*string `json:"contactEmails,omitempty" tf:"contact_emails,omitempty"`

	// +kubebuilder:validation:Optional
	ContactGroups []*string `json:"contactGroups,omitempty" tf:"contact_groups,omitempty"`

	// +kubebuilder:validation:Optional
	ContactRoles []*string `json:"contactRoles,omitempty" tf:"contact_roles,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// +kubebuilder:validation:Required
	Threshold *int64 `json:"threshold" tf:"threshold,omitempty"`
}

type TagObservation struct {
}

type TagParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type TimePeriodObservation struct {
}

type TimePeriodParameters struct {

	// +kubebuilder:validation:Optional
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// +kubebuilder:validation:Required
	StartDate *string `json:"startDate" tf:"start_date,omitempty"`
}

// BudgetResourceGroupSpec defines the desired state of BudgetResourceGroup
type BudgetResourceGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BudgetResourceGroupParameters `json:"forProvider"`
}

// BudgetResourceGroupStatus defines the observed state of BudgetResourceGroup.
type BudgetResourceGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BudgetResourceGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BudgetResourceGroup is the Schema for the BudgetResourceGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type BudgetResourceGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BudgetResourceGroupSpec   `json:"spec"`
	Status            BudgetResourceGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BudgetResourceGroupList contains a list of BudgetResourceGroups
type BudgetResourceGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BudgetResourceGroup `json:"items"`
}

// Repository type metadata.
var (
	BudgetResourceGroup_Kind             = "BudgetResourceGroup"
	BudgetResourceGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BudgetResourceGroup_Kind}.String()
	BudgetResourceGroup_KindAPIVersion   = BudgetResourceGroup_Kind + "." + CRDGroupVersion.String()
	BudgetResourceGroup_GroupVersionKind = CRDGroupVersion.WithKind(BudgetResourceGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&BudgetResourceGroup{}, &BudgetResourceGroupList{})
}
