/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type PermissionsObservation struct {
}

type PermissionsParameters struct {

	// +kubebuilder:validation:Optional
	Actions []string `json:"actions,omitempty" tf:"actions"`

	// +kubebuilder:validation:Optional
	DataActions []string `json:"dataActions,omitempty" tf:"data_actions"`

	// +kubebuilder:validation:Optional
	NotActions []string `json:"notActions,omitempty" tf:"not_actions"`

	// +kubebuilder:validation:Optional
	NotDataActions []string `json:"notDataActions,omitempty" tf:"not_data_actions"`
}

type RoleDefinitionObservation struct {
	RoleDefinitionResourceID string `json:"roleDefinitionResourceId,omitempty" tf:"role_definition_resource_id"`
}

type RoleDefinitionParameters struct {

	// +kubebuilder:validation:Optional
	AssignableScopes []string `json:"assignableScopes,omitempty" tf:"assignable_scopes"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Permissions []PermissionsParameters `json:"permissions,omitempty" tf:"permissions"`

	// +kubebuilder:validation:Optional
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty" tf:"role_definition_id"`

	// +kubebuilder:validation:Required
	Scope string `json:"scope" tf:"scope"`
}

// RoleDefinitionSpec defines the desired state of RoleDefinition
type RoleDefinitionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RoleDefinitionParameters `json:"forProvider"`
}

// RoleDefinitionStatus defines the observed state of RoleDefinition.
type RoleDefinitionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RoleDefinitionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RoleDefinition is the Schema for the RoleDefinitions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type RoleDefinition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoleDefinitionSpec   `json:"spec"`
	Status            RoleDefinitionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleDefinitionList contains a list of RoleDefinitions
type RoleDefinitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoleDefinition `json:"items"`
}

// Repository type metadata.
var (
	RoleDefinitionKind             = "RoleDefinition"
	RoleDefinitionGroupKind        = schema.GroupKind{Group: Group, Kind: RoleDefinitionKind}.String()
	RoleDefinitionKindAPIVersion   = RoleDefinitionKind + "." + GroupVersion.String()
	RoleDefinitionGroupVersionKind = GroupVersion.WithKind(RoleDefinitionKind)
)

func init() {
	SchemeBuilder.Register(&RoleDefinition{}, &RoleDefinitionList{})
}
