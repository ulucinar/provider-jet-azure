/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AnalysisServicesServerObservation struct {
	ServerFullName string `json:"serverFullName,omitempty" tf:"server_full_name"`
}

type AnalysisServicesServerParameters struct {

	// +kubebuilder:validation:Optional
	AdminUsers []string `json:"adminUsers,omitempty" tf:"admin_users"`

	// +kubebuilder:validation:Optional
	BackupBlobContainerURI *string `json:"backupBlobContainerUri,omitempty" tf:"backup_blob_container_uri"`

	// +kubebuilder:validation:Optional
	EnablePowerBiService *bool `json:"enablePowerBiService,omitempty" tf:"enable_power_bi_service"`

	// +kubebuilder:validation:Optional
	IPv4FirewallRule []IPv4FirewallRuleParameters `json:"ipv4FirewallRule,omitempty" tf:"ipv4_firewall_rule"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	QuerypoolConnectionMode *string `json:"querypoolConnectionMode,omitempty" tf:"querypool_connection_mode"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Sku string `json:"sku" tf:"sku"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type IPv4FirewallRuleObservation struct {
}

type IPv4FirewallRuleParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	RangeEnd string `json:"rangeEnd" tf:"range_end"`

	// +kubebuilder:validation:Required
	RangeStart string `json:"rangeStart" tf:"range_start"`
}

// AnalysisServicesServerSpec defines the desired state of AnalysisServicesServer
type AnalysisServicesServerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AnalysisServicesServerParameters `json:"forProvider"`
}

// AnalysisServicesServerStatus defines the observed state of AnalysisServicesServer.
type AnalysisServicesServerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AnalysisServicesServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AnalysisServicesServer is the Schema for the AnalysisServicesServers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AnalysisServicesServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AnalysisServicesServerSpec   `json:"spec"`
	Status            AnalysisServicesServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AnalysisServicesServerList contains a list of AnalysisServicesServers
type AnalysisServicesServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AnalysisServicesServer `json:"items"`
}

// Repository type metadata.
var (
	AnalysisServicesServerKind             = "AnalysisServicesServer"
	AnalysisServicesServerGroupKind        = schema.GroupKind{Group: Group, Kind: AnalysisServicesServerKind}.String()
	AnalysisServicesServerKindAPIVersion   = AnalysisServicesServerKind + "." + GroupVersion.String()
	AnalysisServicesServerGroupVersionKind = GroupVersion.WithKind(AnalysisServicesServerKind)
)

func init() {
	SchemeBuilder.Register(&AnalysisServicesServer{}, &AnalysisServicesServerList{})
}
