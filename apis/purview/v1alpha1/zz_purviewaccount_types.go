/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`

	Type string `json:"type,omitempty" tf:"type"`
}

type IdentityParameters struct {
}

type PurviewAccountObservation struct {
	AtlasKafkaEndpointPrimaryConnectionString string `json:"atlasKafkaEndpointPrimaryConnectionString,omitempty" tf:"atlas_kafka_endpoint_primary_connection_string"`

	AtlasKafkaEndpointSecondaryConnectionString string `json:"atlasKafkaEndpointSecondaryConnectionString,omitempty" tf:"atlas_kafka_endpoint_secondary_connection_string"`

	CatalogEndpoint string `json:"catalogEndpoint,omitempty" tf:"catalog_endpoint"`

	GuardianEndpoint string `json:"guardianEndpoint,omitempty" tf:"guardian_endpoint"`

	Identity []IdentityObservation `json:"identity,omitempty" tf:"identity"`

	ScanEndpoint string `json:"scanEndpoint,omitempty" tf:"scan_endpoint"`
}

type PurviewAccountParameters struct {

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PublicNetworkEnabled *bool `json:"publicNetworkEnabled,omitempty" tf:"public_network_enabled"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	SkuName string `json:"skuName" tf:"sku_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// PurviewAccountSpec defines the desired state of PurviewAccount
type PurviewAccountSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PurviewAccountParameters `json:"forProvider"`
}

// PurviewAccountStatus defines the observed state of PurviewAccount.
type PurviewAccountStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PurviewAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PurviewAccount is the Schema for the PurviewAccounts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PurviewAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PurviewAccountSpec   `json:"spec"`
	Status            PurviewAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PurviewAccountList contains a list of PurviewAccounts
type PurviewAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PurviewAccount `json:"items"`
}

// Repository type metadata.
var (
	PurviewAccountKind             = "PurviewAccount"
	PurviewAccountGroupKind        = schema.GroupKind{Group: Group, Kind: PurviewAccountKind}.String()
	PurviewAccountKindAPIVersion   = PurviewAccountKind + "." + GroupVersion.String()
	PurviewAccountGroupVersionKind = GroupVersion.WithKind(PurviewAccountKind)
)

func init() {
	SchemeBuilder.Register(&PurviewAccount{}, &PurviewAccountList{})
}
