/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApplicationGatewayObservation struct {
}

type ApplicationGatewayParameters struct {

	// +kubebuilder:validation:Optional
	AuthenticationCertificate []AuthenticationCertificateParameters `json:"authenticationCertificate,omitempty" tf:"authentication_certificate"`

	// +kubebuilder:validation:Optional
	AutoscaleConfiguration []AutoscaleConfigurationParameters `json:"autoscaleConfiguration,omitempty" tf:"autoscale_configuration"`

	// +kubebuilder:validation:Required
	BackendAddressPool []BackendAddressPoolParameters `json:"backendAddressPool" tf:"backend_address_pool"`

	// +kubebuilder:validation:Required
	BackendHTTPSettings []BackendHTTPSettingsParameters `json:"backendHttpSettings" tf:"backend_http_settings"`

	// +kubebuilder:validation:Optional
	CustomErrorConfiguration []CustomErrorConfigurationParameters `json:"customErrorConfiguration,omitempty" tf:"custom_error_configuration"`

	// +kubebuilder:validation:Optional
	EnableHttp2 *bool `json:"enableHttp2,omitempty" tf:"enable_http2"`

	// +kubebuilder:validation:Optional
	FirewallPolicyID *string `json:"firewallPolicyId,omitempty" tf:"firewall_policy_id"`

	// +kubebuilder:validation:Required
	FrontendIPConfiguration []FrontendIPConfigurationParameters `json:"frontendIpConfiguration" tf:"frontend_ip_configuration"`

	// +kubebuilder:validation:Required
	FrontendPort []FrontendPortParameters `json:"frontendPort" tf:"frontend_port"`

	// +kubebuilder:validation:Required
	GatewayIPConfiguration []GatewayIPConfigurationParameters `json:"gatewayIpConfiguration" tf:"gateway_ip_configuration"`

	// +kubebuilder:validation:Required
	HTTPListener []HTTPListenerParameters `json:"httpListener" tf:"http_listener"`

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Probe []ProbeParameters `json:"probe,omitempty" tf:"probe"`

	// +kubebuilder:validation:Optional
	RedirectConfiguration []RedirectConfigurationParameters `json:"redirectConfiguration,omitempty" tf:"redirect_configuration"`

	// +kubebuilder:validation:Required
	RequestRoutingRule []RequestRoutingRuleParameters `json:"requestRoutingRule" tf:"request_routing_rule"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	RewriteRuleSet []RewriteRuleSetParameters `json:"rewriteRuleSet,omitempty" tf:"rewrite_rule_set"`

	// +kubebuilder:validation:Required
	Sku []SkuParameters `json:"sku" tf:"sku"`

	// +kubebuilder:validation:Optional
	SslCertificate []SslCertificateParameters `json:"sslCertificate,omitempty" tf:"ssl_certificate"`

	// +kubebuilder:validation:Optional
	SslPolicy []SslPolicyParameters `json:"sslPolicy,omitempty" tf:"ssl_policy"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TrustedRootCertificate []TrustedRootCertificateParameters `json:"trustedRootCertificate,omitempty" tf:"trusted_root_certificate"`

	// +kubebuilder:validation:Optional
	URLPathMap []URLPathMapParameters `json:"urlPathMap,omitempty" tf:"url_path_map"`

	// +kubebuilder:validation:Optional
	WafConfiguration []WafConfigurationParameters `json:"wafConfiguration,omitempty" tf:"waf_configuration"`

	// +kubebuilder:validation:Optional
	Zones []string `json:"zones,omitempty" tf:"zones"`
}

type AuthenticationCertificateObservation struct {
	ID string `json:"id,omitempty" tf:"id"`
}

type AuthenticationCertificateParameters struct {

	// +kubebuilder:validation:Required
	Data string `json:"data" tf:"data"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`
}

type AutoscaleConfigurationObservation struct {
}

type AutoscaleConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	MaxCapacity *int64 `json:"maxCapacity,omitempty" tf:"max_capacity"`

	// +kubebuilder:validation:Required
	MinCapacity int64 `json:"minCapacity" tf:"min_capacity"`
}

type BackendAddressPoolObservation struct {
	ID string `json:"id,omitempty" tf:"id"`
}

type BackendAddressPoolParameters struct {

	// +kubebuilder:validation:Optional
	Fqdns []string `json:"fqdns,omitempty" tf:"fqdns"`

	// +kubebuilder:validation:Optional
	IPAddresses []string `json:"ipAddresses,omitempty" tf:"ip_addresses"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`
}

type BackendHTTPSettingsAuthenticationCertificateObservation struct {
	ID string `json:"id,omitempty" tf:"id"`
}

type BackendHTTPSettingsAuthenticationCertificateParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`
}

type BackendHTTPSettingsObservation struct {
	ID string `json:"id,omitempty" tf:"id"`

	ProbeID string `json:"probeId,omitempty" tf:"probe_id"`
}

type BackendHTTPSettingsParameters struct {

	// +kubebuilder:validation:Optional
	AffinityCookieName *string `json:"affinityCookieName,omitempty" tf:"affinity_cookie_name"`

	// +kubebuilder:validation:Optional
	AuthenticationCertificate []BackendHTTPSettingsAuthenticationCertificateParameters `json:"authenticationCertificate,omitempty" tf:"authentication_certificate"`

	// +kubebuilder:validation:Optional
	ConnectionDraining []ConnectionDrainingParameters `json:"connectionDraining,omitempty" tf:"connection_draining"`

	// +kubebuilder:validation:Required
	CookieBasedAffinity string `json:"cookieBasedAffinity" tf:"cookie_based_affinity"`

	// +kubebuilder:validation:Optional
	HostName *string `json:"hostName,omitempty" tf:"host_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path"`

	// +kubebuilder:validation:Optional
	PickHostNameFromBackendAddress *bool `json:"pickHostNameFromBackendAddress,omitempty" tf:"pick_host_name_from_backend_address"`

	// +kubebuilder:validation:Required
	Port int64 `json:"port" tf:"port"`

	// +kubebuilder:validation:Optional
	ProbeName *string `json:"probeName,omitempty" tf:"probe_name"`

	// +kubebuilder:validation:Required
	Protocol string `json:"protocol" tf:"protocol"`

	// +kubebuilder:validation:Optional
	RequestTimeout *int64 `json:"requestTimeout,omitempty" tf:"request_timeout"`

	// +kubebuilder:validation:Optional
	TrustedRootCertificateNames []string `json:"trustedRootCertificateNames,omitempty" tf:"trusted_root_certificate_names"`
}

type ConditionObservation struct {
}

type ConditionParameters struct {

	// +kubebuilder:validation:Optional
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case"`

	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate"`

	// +kubebuilder:validation:Required
	Pattern string `json:"pattern" tf:"pattern"`

	// +kubebuilder:validation:Required
	Variable string `json:"variable" tf:"variable"`
}

type ConnectionDrainingObservation struct {
}

type ConnectionDrainingParameters struct {

	// +kubebuilder:validation:Required
	DrainTimeoutSec int64 `json:"drainTimeoutSec" tf:"drain_timeout_sec"`

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`
}

type CustomErrorConfigurationObservation struct {
	ID string `json:"id,omitempty" tf:"id"`
}

type CustomErrorConfigurationParameters struct {

	// +kubebuilder:validation:Required
	CustomErrorPageURL string `json:"customErrorPageUrl" tf:"custom_error_page_url"`

	// +kubebuilder:validation:Required
	StatusCode string `json:"statusCode" tf:"status_code"`
}

type DisabledRuleGroupObservation struct {
}

type DisabledRuleGroupParameters struct {

	// +kubebuilder:validation:Required
	RuleGroupName string `json:"ruleGroupName" tf:"rule_group_name"`

	// +kubebuilder:validation:Optional
	Rules []int64 `json:"rules,omitempty" tf:"rules"`
}

type ExclusionObservation struct {
}

type ExclusionParameters struct {

	// +kubebuilder:validation:Required
	MatchVariable string `json:"matchVariable" tf:"match_variable"`

	// +kubebuilder:validation:Optional
	Selector *string `json:"selector,omitempty" tf:"selector"`

	// +kubebuilder:validation:Optional
	SelectorMatchOperator *string `json:"selectorMatchOperator,omitempty" tf:"selector_match_operator"`
}

type FrontendIPConfigurationObservation struct {
	ID string `json:"id,omitempty" tf:"id"`
}

type FrontendIPConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address"`

	// +kubebuilder:validation:Optional
	PrivateIPAddressAllocation *string `json:"privateIpAddressAllocation,omitempty" tf:"private_ip_address_allocation"`

	// +kubebuilder:validation:Optional
	PublicIPAddressID *string `json:"publicIpAddressId,omitempty" tf:"public_ip_address_id"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`
}

type FrontendPortObservation struct {
	ID string `json:"id,omitempty" tf:"id"`
}

type FrontendPortParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Port int64 `json:"port" tf:"port"`
}

type GatewayIPConfigurationObservation struct {
	ID string `json:"id,omitempty" tf:"id"`
}

type GatewayIPConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	SubnetID string `json:"subnetId" tf:"subnet_id"`
}

type HTTPListenerCustomErrorConfigurationObservation struct {
	ID string `json:"id,omitempty" tf:"id"`
}

type HTTPListenerCustomErrorConfigurationParameters struct {

	// +kubebuilder:validation:Required
	CustomErrorPageURL string `json:"customErrorPageUrl" tf:"custom_error_page_url"`

	// +kubebuilder:validation:Required
	StatusCode string `json:"statusCode" tf:"status_code"`
}

type HTTPListenerObservation struct {
	FrontendIPConfigurationID string `json:"frontendIpConfigurationId,omitempty" tf:"frontend_ip_configuration_id"`

	FrontendPortID string `json:"frontendPortId,omitempty" tf:"frontend_port_id"`

	ID string `json:"id,omitempty" tf:"id"`

	SslCertificateID string `json:"sslCertificateId,omitempty" tf:"ssl_certificate_id"`
}

type HTTPListenerParameters struct {

	// +kubebuilder:validation:Optional
	CustomErrorConfiguration []HTTPListenerCustomErrorConfigurationParameters `json:"customErrorConfiguration,omitempty" tf:"custom_error_configuration"`

	// +kubebuilder:validation:Optional
	FirewallPolicyID *string `json:"firewallPolicyId,omitempty" tf:"firewall_policy_id"`

	// +kubebuilder:validation:Required
	FrontendIPConfigurationName string `json:"frontendIpConfigurationName" tf:"frontend_ip_configuration_name"`

	// +kubebuilder:validation:Required
	FrontendPortName string `json:"frontendPortName" tf:"frontend_port_name"`

	// +kubebuilder:validation:Optional
	HostName *string `json:"hostName,omitempty" tf:"host_name"`

	// +kubebuilder:validation:Optional
	HostNames []string `json:"hostNames,omitempty" tf:"host_names"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Protocol string `json:"protocol" tf:"protocol"`

	// +kubebuilder:validation:Optional
	RequireSni *bool `json:"requireSni,omitempty" tf:"require_sni"`

	// +kubebuilder:validation:Optional
	SslCertificateName *string `json:"sslCertificateName,omitempty" tf:"ssl_certificate_name"`
}

type IdentityObservation struct {
}

type IdentityParameters struct {

	// +kubebuilder:validation:Required
	IdentityIds []string `json:"identityIds" tf:"identity_ids"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type MatchObservation struct {
}

type MatchParameters struct {

	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body"`

	// +kubebuilder:validation:Optional
	StatusCode []string `json:"statusCode,omitempty" tf:"status_code"`
}

type PathRuleObservation struct {
	BackendAddressPoolID string `json:"backendAddressPoolId,omitempty" tf:"backend_address_pool_id"`

	BackendHTTPSettingsID string `json:"backendHttpSettingsId,omitempty" tf:"backend_http_settings_id"`

	ID string `json:"id,omitempty" tf:"id"`

	RedirectConfigurationID string `json:"redirectConfigurationId,omitempty" tf:"redirect_configuration_id"`

	RewriteRuleSetID string `json:"rewriteRuleSetId,omitempty" tf:"rewrite_rule_set_id"`
}

type PathRuleParameters struct {

	// +kubebuilder:validation:Optional
	BackendAddressPoolName *string `json:"backendAddressPoolName,omitempty" tf:"backend_address_pool_name"`

	// +kubebuilder:validation:Optional
	BackendHTTPSettingsName *string `json:"backendHttpSettingsName,omitempty" tf:"backend_http_settings_name"`

	// +kubebuilder:validation:Optional
	FirewallPolicyID *string `json:"firewallPolicyId,omitempty" tf:"firewall_policy_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Paths []string `json:"paths" tf:"paths"`

	// +kubebuilder:validation:Optional
	RedirectConfigurationName *string `json:"redirectConfigurationName,omitempty" tf:"redirect_configuration_name"`

	// +kubebuilder:validation:Optional
	RewriteRuleSetName *string `json:"rewriteRuleSetName,omitempty" tf:"rewrite_rule_set_name"`
}

type ProbeObservation struct {
	ID string `json:"id,omitempty" tf:"id"`
}

type ProbeParameters struct {

	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host"`

	// +kubebuilder:validation:Required
	Interval int64 `json:"interval" tf:"interval"`

	// +kubebuilder:validation:Optional
	Match []MatchParameters `json:"match,omitempty" tf:"match"`

	// +kubebuilder:validation:Optional
	MinimumServers *int64 `json:"minimumServers,omitempty" tf:"minimum_servers"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Path string `json:"path" tf:"path"`

	// +kubebuilder:validation:Optional
	PickHostNameFromBackendHTTPSettings *bool `json:"pickHostNameFromBackendHttpSettings,omitempty" tf:"pick_host_name_from_backend_http_settings"`

	// +kubebuilder:validation:Optional
	Port *int64 `json:"port,omitempty" tf:"port"`

	// +kubebuilder:validation:Required
	Protocol string `json:"protocol" tf:"protocol"`

	// +kubebuilder:validation:Required
	Timeout int64 `json:"timeout" tf:"timeout"`

	// +kubebuilder:validation:Required
	UnhealthyThreshold int64 `json:"unhealthyThreshold" tf:"unhealthy_threshold"`
}

type RedirectConfigurationObservation struct {
	ID string `json:"id,omitempty" tf:"id"`

	TargetListenerID string `json:"targetListenerId,omitempty" tf:"target_listener_id"`
}

type RedirectConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	IncludePath *bool `json:"includePath,omitempty" tf:"include_path"`

	// +kubebuilder:validation:Optional
	IncludeQueryString *bool `json:"includeQueryString,omitempty" tf:"include_query_string"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	RedirectType string `json:"redirectType" tf:"redirect_type"`

	// +kubebuilder:validation:Optional
	TargetListenerName *string `json:"targetListenerName,omitempty" tf:"target_listener_name"`

	// +kubebuilder:validation:Optional
	TargetURL *string `json:"targetUrl,omitempty" tf:"target_url"`
}

type RequestHeaderConfigurationObservation struct {
}

type RequestHeaderConfigurationParameters struct {

	// +kubebuilder:validation:Required
	HeaderName string `json:"headerName" tf:"header_name"`

	// +kubebuilder:validation:Required
	HeaderValue string `json:"headerValue" tf:"header_value"`
}

type RequestRoutingRuleObservation struct {
	BackendAddressPoolID string `json:"backendAddressPoolId,omitempty" tf:"backend_address_pool_id"`

	BackendHTTPSettingsID string `json:"backendHttpSettingsId,omitempty" tf:"backend_http_settings_id"`

	HTTPListenerID string `json:"httpListenerId,omitempty" tf:"http_listener_id"`

	ID string `json:"id,omitempty" tf:"id"`

	RedirectConfigurationID string `json:"redirectConfigurationId,omitempty" tf:"redirect_configuration_id"`

	RewriteRuleSetID string `json:"rewriteRuleSetId,omitempty" tf:"rewrite_rule_set_id"`

	URLPathMapID string `json:"urlPathMapId,omitempty" tf:"url_path_map_id"`
}

type RequestRoutingRuleParameters struct {

	// +kubebuilder:validation:Optional
	BackendAddressPoolName *string `json:"backendAddressPoolName,omitempty" tf:"backend_address_pool_name"`

	// +kubebuilder:validation:Optional
	BackendHTTPSettingsName *string `json:"backendHttpSettingsName,omitempty" tf:"backend_http_settings_name"`

	// +kubebuilder:validation:Required
	HTTPListenerName string `json:"httpListenerName" tf:"http_listener_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	RedirectConfigurationName *string `json:"redirectConfigurationName,omitempty" tf:"redirect_configuration_name"`

	// +kubebuilder:validation:Optional
	RewriteRuleSetName *string `json:"rewriteRuleSetName,omitempty" tf:"rewrite_rule_set_name"`

	// +kubebuilder:validation:Required
	RuleType string `json:"ruleType" tf:"rule_type"`

	// +kubebuilder:validation:Optional
	URLPathMapName *string `json:"urlPathMapName,omitempty" tf:"url_path_map_name"`
}

type ResponseHeaderConfigurationObservation struct {
}

type ResponseHeaderConfigurationParameters struct {

	// +kubebuilder:validation:Required
	HeaderName string `json:"headerName" tf:"header_name"`

	// +kubebuilder:validation:Required
	HeaderValue string `json:"headerValue" tf:"header_value"`
}

type RewriteRuleObservation struct {
}

type RewriteRuleParameters struct {

	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	RequestHeaderConfiguration []RequestHeaderConfigurationParameters `json:"requestHeaderConfiguration,omitempty" tf:"request_header_configuration"`

	// +kubebuilder:validation:Optional
	ResponseHeaderConfiguration []ResponseHeaderConfigurationParameters `json:"responseHeaderConfiguration,omitempty" tf:"response_header_configuration"`

	// +kubebuilder:validation:Required
	RuleSequence int64 `json:"ruleSequence" tf:"rule_sequence"`

	// +kubebuilder:validation:Optional
	URL []URLParameters `json:"url,omitempty" tf:"url"`
}

type RewriteRuleSetObservation struct {
	ID string `json:"id,omitempty" tf:"id"`
}

type RewriteRuleSetParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	RewriteRule []RewriteRuleParameters `json:"rewriteRule,omitempty" tf:"rewrite_rule"`
}

type SkuObservation struct {
}

type SkuParameters struct {

	// +kubebuilder:validation:Optional
	Capacity *int64 `json:"capacity,omitempty" tf:"capacity"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Tier string `json:"tier" tf:"tier"`
}

type SslCertificateObservation struct {
	ID string `json:"id,omitempty" tf:"id"`

	PublicCertData string `json:"publicCertData,omitempty" tf:"public_cert_data"`
}

type SslCertificateParameters struct {

	// +kubebuilder:validation:Optional
	Data *string `json:"data,omitempty" tf:"data"`

	// +kubebuilder:validation:Optional
	KeyVaultSecretID *string `json:"keyVaultSecretId,omitempty" tf:"key_vault_secret_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`
}

type SslPolicyObservation struct {
}

type SslPolicyParameters struct {

	// +kubebuilder:validation:Optional
	CipherSuites []string `json:"cipherSuites,omitempty" tf:"cipher_suites"`

	// +kubebuilder:validation:Optional
	DisabledProtocols []string `json:"disabledProtocols,omitempty" tf:"disabled_protocols"`

	// +kubebuilder:validation:Optional
	MinProtocolVersion *string `json:"minProtocolVersion,omitempty" tf:"min_protocol_version"`

	// +kubebuilder:validation:Optional
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name"`

	// +kubebuilder:validation:Optional
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type"`
}

type TrustedRootCertificateObservation struct {
	ID string `json:"id,omitempty" tf:"id"`
}

type TrustedRootCertificateParameters struct {

	// +kubebuilder:validation:Required
	Data string `json:"data" tf:"data"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`
}

type URLObservation struct {
}

type URLParameters struct {

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path"`

	// +kubebuilder:validation:Optional
	QueryString *string `json:"queryString,omitempty" tf:"query_string"`

	// +kubebuilder:validation:Optional
	Reroute *bool `json:"reroute,omitempty" tf:"reroute"`
}

type URLPathMapObservation struct {
	DefaultBackendAddressPoolID string `json:"defaultBackendAddressPoolId,omitempty" tf:"default_backend_address_pool_id"`

	DefaultBackendHTTPSettingsID string `json:"defaultBackendHttpSettingsId,omitempty" tf:"default_backend_http_settings_id"`

	DefaultRedirectConfigurationID string `json:"defaultRedirectConfigurationId,omitempty" tf:"default_redirect_configuration_id"`

	DefaultRewriteRuleSetID string `json:"defaultRewriteRuleSetId,omitempty" tf:"default_rewrite_rule_set_id"`

	ID string `json:"id,omitempty" tf:"id"`
}

type URLPathMapParameters struct {

	// +kubebuilder:validation:Optional
	DefaultBackendAddressPoolName *string `json:"defaultBackendAddressPoolName,omitempty" tf:"default_backend_address_pool_name"`

	// +kubebuilder:validation:Optional
	DefaultBackendHTTPSettingsName *string `json:"defaultBackendHttpSettingsName,omitempty" tf:"default_backend_http_settings_name"`

	// +kubebuilder:validation:Optional
	DefaultRedirectConfigurationName *string `json:"defaultRedirectConfigurationName,omitempty" tf:"default_redirect_configuration_name"`

	// +kubebuilder:validation:Optional
	DefaultRewriteRuleSetName *string `json:"defaultRewriteRuleSetName,omitempty" tf:"default_rewrite_rule_set_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	PathRule []PathRuleParameters `json:"pathRule" tf:"path_rule"`
}

type WafConfigurationObservation struct {
}

type WafConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	DisabledRuleGroup []DisabledRuleGroupParameters `json:"disabledRuleGroup,omitempty" tf:"disabled_rule_group"`

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`

	// +kubebuilder:validation:Optional
	Exclusion []ExclusionParameters `json:"exclusion,omitempty" tf:"exclusion"`

	// +kubebuilder:validation:Optional
	FileUploadLimitMb *int64 `json:"fileUploadLimitMb,omitempty" tf:"file_upload_limit_mb"`

	// +kubebuilder:validation:Required
	FirewallMode string `json:"firewallMode" tf:"firewall_mode"`

	// +kubebuilder:validation:Optional
	MaxRequestBodySizeKb *int64 `json:"maxRequestBodySizeKb,omitempty" tf:"max_request_body_size_kb"`

	// +kubebuilder:validation:Optional
	RequestBodyCheck *bool `json:"requestBodyCheck,omitempty" tf:"request_body_check"`

	// +kubebuilder:validation:Optional
	RuleSetType *string `json:"ruleSetType,omitempty" tf:"rule_set_type"`

	// +kubebuilder:validation:Required
	RuleSetVersion string `json:"ruleSetVersion" tf:"rule_set_version"`
}

// ApplicationGatewaySpec defines the desired state of ApplicationGateway
type ApplicationGatewaySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApplicationGatewayParameters `json:"forProvider"`
}

// ApplicationGatewayStatus defines the observed state of ApplicationGateway.
type ApplicationGatewayStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApplicationGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationGateway is the Schema for the ApplicationGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApplicationGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationGatewaySpec   `json:"spec"`
	Status            ApplicationGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationGatewayList contains a list of ApplicationGateways
type ApplicationGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationGateway `json:"items"`
}

// Repository type metadata.
var (
	ApplicationGatewayKind             = "ApplicationGateway"
	ApplicationGatewayGroupKind        = schema.GroupKind{Group: Group, Kind: ApplicationGatewayKind}.String()
	ApplicationGatewayKindAPIVersion   = ApplicationGatewayKind + "." + GroupVersion.String()
	ApplicationGatewayGroupVersionKind = GroupVersion.WithKind(ApplicationGatewayKind)
)

func init() {
	SchemeBuilder.Register(&ApplicationGateway{}, &ApplicationGatewayList{})
}
