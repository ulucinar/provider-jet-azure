/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApplicationInsightsWebTestObservation struct {
	SyntheticMonitorID string `json:"syntheticMonitorId,omitempty" tf:"synthetic_monitor_id"`
}

type ApplicationInsightsWebTestParameters struct {

	// +kubebuilder:validation:Required
	ApplicationInsightsID string `json:"applicationInsightsId" tf:"application_insights_id"`

	// +kubebuilder:validation:Required
	Configuration string `json:"configuration" tf:"configuration"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	Frequency *int64 `json:"frequency,omitempty" tf:"frequency"`

	// +kubebuilder:validation:Required
	GeoLocations []string `json:"geoLocations" tf:"geo_locations"`

	// +kubebuilder:validation:Required
	Kind string `json:"kind" tf:"kind"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	RetryEnabled *bool `json:"retryEnabled,omitempty" tf:"retry_enabled"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	Timeout *int64 `json:"timeout,omitempty" tf:"timeout"`
}

// ApplicationInsightsWebTestSpec defines the desired state of ApplicationInsightsWebTest
type ApplicationInsightsWebTestSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApplicationInsightsWebTestParameters `json:"forProvider"`
}

// ApplicationInsightsWebTestStatus defines the observed state of ApplicationInsightsWebTest.
type ApplicationInsightsWebTestStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApplicationInsightsWebTestObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationInsightsWebTest is the Schema for the ApplicationInsightsWebTests API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApplicationInsightsWebTest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationInsightsWebTestSpec   `json:"spec"`
	Status            ApplicationInsightsWebTestStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationInsightsWebTestList contains a list of ApplicationInsightsWebTests
type ApplicationInsightsWebTestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationInsightsWebTest `json:"items"`
}

// Repository type metadata.
var (
	ApplicationInsightsWebTestKind             = "ApplicationInsightsWebTest"
	ApplicationInsightsWebTestGroupKind        = schema.GroupKind{Group: Group, Kind: ApplicationInsightsWebTestKind}.String()
	ApplicationInsightsWebTestKindAPIVersion   = ApplicationInsightsWebTestKind + "." + GroupVersion.String()
	ApplicationInsightsWebTestGroupVersionKind = GroupVersion.WithKind(ApplicationInsightsWebTestKind)
)

func init() {
	SchemeBuilder.Register(&ApplicationInsightsWebTest{}, &ApplicationInsightsWebTestList{})
}
