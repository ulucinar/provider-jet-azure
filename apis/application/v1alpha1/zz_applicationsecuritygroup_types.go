/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApplicationSecurityGroupObservation struct {
}

type ApplicationSecurityGroupParameters struct {

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// ApplicationSecurityGroupSpec defines the desired state of ApplicationSecurityGroup
type ApplicationSecurityGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApplicationSecurityGroupParameters `json:"forProvider"`
}

// ApplicationSecurityGroupStatus defines the observed state of ApplicationSecurityGroup.
type ApplicationSecurityGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApplicationSecurityGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationSecurityGroup is the Schema for the ApplicationSecurityGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApplicationSecurityGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationSecurityGroupSpec   `json:"spec"`
	Status            ApplicationSecurityGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationSecurityGroupList contains a list of ApplicationSecurityGroups
type ApplicationSecurityGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationSecurityGroup `json:"items"`
}

// Repository type metadata.
var (
	ApplicationSecurityGroupKind             = "ApplicationSecurityGroup"
	ApplicationSecurityGroupGroupKind        = schema.GroupKind{Group: Group, Kind: ApplicationSecurityGroupKind}.String()
	ApplicationSecurityGroupKindAPIVersion   = ApplicationSecurityGroupKind + "." + GroupVersion.String()
	ApplicationSecurityGroupGroupVersionKind = GroupVersion.WithKind(ApplicationSecurityGroupKind)
)

func init() {
	SchemeBuilder.Register(&ApplicationSecurityGroup{}, &ApplicationSecurityGroupList{})
}
