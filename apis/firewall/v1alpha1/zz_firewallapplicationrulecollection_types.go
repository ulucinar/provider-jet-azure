/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type FirewallApplicationRuleCollectionObservation struct {
}

type FirewallApplicationRuleCollectionParameters struct {

	// +kubebuilder:validation:Required
	Action string `json:"action" tf:"action"`

	// +kubebuilder:validation:Required
	AzureFirewallName string `json:"azureFirewallName" tf:"azure_firewall_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Priority int64 `json:"priority" tf:"priority"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Required
	Rule []RuleParameters `json:"rule" tf:"rule"`
}

type ProtocolObservation struct {
}

type ProtocolParameters struct {

	// +kubebuilder:validation:Optional
	Port *int64 `json:"port,omitempty" tf:"port"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type RuleObservation struct {
}

type RuleParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	FqdnTags []string `json:"fqdnTags,omitempty" tf:"fqdn_tags"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Protocol []ProtocolParameters `json:"protocol,omitempty" tf:"protocol"`

	// +kubebuilder:validation:Optional
	SourceAddresses []string `json:"sourceAddresses,omitempty" tf:"source_addresses"`

	// +kubebuilder:validation:Optional
	SourceIPGroups []string `json:"sourceIpGroups,omitempty" tf:"source_ip_groups"`

	// +kubebuilder:validation:Optional
	TargetFqdns []string `json:"targetFqdns,omitempty" tf:"target_fqdns"`
}

// FirewallApplicationRuleCollectionSpec defines the desired state of FirewallApplicationRuleCollection
type FirewallApplicationRuleCollectionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       FirewallApplicationRuleCollectionParameters `json:"forProvider"`
}

// FirewallApplicationRuleCollectionStatus defines the observed state of FirewallApplicationRuleCollection.
type FirewallApplicationRuleCollectionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          FirewallApplicationRuleCollectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallApplicationRuleCollection is the Schema for the FirewallApplicationRuleCollections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type FirewallApplicationRuleCollection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FirewallApplicationRuleCollectionSpec   `json:"spec"`
	Status            FirewallApplicationRuleCollectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallApplicationRuleCollectionList contains a list of FirewallApplicationRuleCollections
type FirewallApplicationRuleCollectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FirewallApplicationRuleCollection `json:"items"`
}

// Repository type metadata.
var (
	FirewallApplicationRuleCollectionKind             = "FirewallApplicationRuleCollection"
	FirewallApplicationRuleCollectionGroupKind        = schema.GroupKind{Group: Group, Kind: FirewallApplicationRuleCollectionKind}.String()
	FirewallApplicationRuleCollectionKindAPIVersion   = FirewallApplicationRuleCollectionKind + "." + GroupVersion.String()
	FirewallApplicationRuleCollectionGroupVersionKind = GroupVersion.WithKind(FirewallApplicationRuleCollectionKind)
)

func init() {
	SchemeBuilder.Register(&FirewallApplicationRuleCollection{}, &FirewallApplicationRuleCollectionList{})
}
