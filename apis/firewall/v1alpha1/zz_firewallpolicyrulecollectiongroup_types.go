/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApplicationRuleCollectionObservation struct {
}

type ApplicationRuleCollectionParameters struct {

	// +kubebuilder:validation:Required
	Action string `json:"action" tf:"action"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Priority int64 `json:"priority" tf:"priority"`

	// +kubebuilder:validation:Required
	Rule []ApplicationRuleCollectionRuleParameters `json:"rule" tf:"rule"`
}

type ApplicationRuleCollectionRuleObservation struct {
}

type ApplicationRuleCollectionRuleParameters struct {

	// +kubebuilder:validation:Optional
	DestinationFqdnTags []string `json:"destinationFqdnTags,omitempty" tf:"destination_fqdn_tags"`

	// +kubebuilder:validation:Optional
	DestinationFqdns []string `json:"destinationFqdns,omitempty" tf:"destination_fqdns"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Protocols []ProtocolsParameters `json:"protocols" tf:"protocols"`

	// +kubebuilder:validation:Optional
	SourceAddresses []string `json:"sourceAddresses,omitempty" tf:"source_addresses"`

	// +kubebuilder:validation:Optional
	SourceIPGroups []string `json:"sourceIpGroups,omitempty" tf:"source_ip_groups"`
}

type FirewallPolicyRuleCollectionGroupObservation struct {
}

type FirewallPolicyRuleCollectionGroupParameters struct {

	// +kubebuilder:validation:Optional
	ApplicationRuleCollection []ApplicationRuleCollectionParameters `json:"applicationRuleCollection,omitempty" tf:"application_rule_collection"`

	// +kubebuilder:validation:Required
	FirewallPolicyID string `json:"firewallPolicyId" tf:"firewall_policy_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	NatRuleCollection []NatRuleCollectionParameters `json:"natRuleCollection,omitempty" tf:"nat_rule_collection"`

	// +kubebuilder:validation:Optional
	NetworkRuleCollection []NetworkRuleCollectionParameters `json:"networkRuleCollection,omitempty" tf:"network_rule_collection"`

	// +kubebuilder:validation:Required
	Priority int64 `json:"priority" tf:"priority"`
}

type NatRuleCollectionObservation struct {
}

type NatRuleCollectionParameters struct {

	// +kubebuilder:validation:Required
	Action string `json:"action" tf:"action"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Priority int64 `json:"priority" tf:"priority"`

	// +kubebuilder:validation:Required
	Rule []NatRuleCollectionRuleParameters `json:"rule" tf:"rule"`
}

type NatRuleCollectionRuleObservation struct {
}

type NatRuleCollectionRuleParameters struct {

	// +kubebuilder:validation:Optional
	DestinationAddress *string `json:"destinationAddress,omitempty" tf:"destination_address"`

	// +kubebuilder:validation:Optional
	DestinationPorts []string `json:"destinationPorts,omitempty" tf:"destination_ports"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Protocols []string `json:"protocols" tf:"protocols"`

	// +kubebuilder:validation:Optional
	SourceAddresses []string `json:"sourceAddresses,omitempty" tf:"source_addresses"`

	// +kubebuilder:validation:Optional
	SourceIPGroups []string `json:"sourceIpGroups,omitempty" tf:"source_ip_groups"`

	// +kubebuilder:validation:Required
	TranslatedAddress string `json:"translatedAddress" tf:"translated_address"`

	// +kubebuilder:validation:Required
	TranslatedPort int64 `json:"translatedPort" tf:"translated_port"`
}

type NetworkRuleCollectionObservation struct {
}

type NetworkRuleCollectionParameters struct {

	// +kubebuilder:validation:Required
	Action string `json:"action" tf:"action"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Priority int64 `json:"priority" tf:"priority"`

	// +kubebuilder:validation:Required
	Rule []NetworkRuleCollectionRuleParameters `json:"rule" tf:"rule"`
}

type NetworkRuleCollectionRuleObservation struct {
}

type NetworkRuleCollectionRuleParameters struct {

	// +kubebuilder:validation:Optional
	DestinationAddresses []string `json:"destinationAddresses,omitempty" tf:"destination_addresses"`

	// +kubebuilder:validation:Optional
	DestinationFqdns []string `json:"destinationFqdns,omitempty" tf:"destination_fqdns"`

	// +kubebuilder:validation:Optional
	DestinationIPGroups []string `json:"destinationIpGroups,omitempty" tf:"destination_ip_groups"`

	// +kubebuilder:validation:Required
	DestinationPorts []string `json:"destinationPorts" tf:"destination_ports"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Protocols []string `json:"protocols" tf:"protocols"`

	// +kubebuilder:validation:Optional
	SourceAddresses []string `json:"sourceAddresses,omitempty" tf:"source_addresses"`

	// +kubebuilder:validation:Optional
	SourceIPGroups []string `json:"sourceIpGroups,omitempty" tf:"source_ip_groups"`
}

type ProtocolsObservation struct {
}

type ProtocolsParameters struct {

	// +kubebuilder:validation:Required
	Port int64 `json:"port" tf:"port"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

// FirewallPolicyRuleCollectionGroupSpec defines the desired state of FirewallPolicyRuleCollectionGroup
type FirewallPolicyRuleCollectionGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       FirewallPolicyRuleCollectionGroupParameters `json:"forProvider"`
}

// FirewallPolicyRuleCollectionGroupStatus defines the observed state of FirewallPolicyRuleCollectionGroup.
type FirewallPolicyRuleCollectionGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          FirewallPolicyRuleCollectionGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallPolicyRuleCollectionGroup is the Schema for the FirewallPolicyRuleCollectionGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type FirewallPolicyRuleCollectionGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FirewallPolicyRuleCollectionGroupSpec   `json:"spec"`
	Status            FirewallPolicyRuleCollectionGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallPolicyRuleCollectionGroupList contains a list of FirewallPolicyRuleCollectionGroups
type FirewallPolicyRuleCollectionGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FirewallPolicyRuleCollectionGroup `json:"items"`
}

// Repository type metadata.
var (
	FirewallPolicyRuleCollectionGroupKind             = "FirewallPolicyRuleCollectionGroup"
	FirewallPolicyRuleCollectionGroupGroupKind        = schema.GroupKind{Group: Group, Kind: FirewallPolicyRuleCollectionGroupKind}.String()
	FirewallPolicyRuleCollectionGroupKindAPIVersion   = FirewallPolicyRuleCollectionGroupKind + "." + GroupVersion.String()
	FirewallPolicyRuleCollectionGroupGroupVersionKind = GroupVersion.WithKind(FirewallPolicyRuleCollectionGroupKind)
)

func init() {
	SchemeBuilder.Register(&FirewallPolicyRuleCollectionGroup{}, &FirewallPolicyRuleCollectionGroupList{})
}
