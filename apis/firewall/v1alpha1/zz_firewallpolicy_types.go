/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DNSObservation struct {
}

type DNSParameters struct {

	// +kubebuilder:validation:Optional
	NetworkRuleFqdnEnabled *bool `json:"networkRuleFqdnEnabled,omitempty" tf:"network_rule_fqdn_enabled"`

	// +kubebuilder:validation:Optional
	ProxyEnabled *bool `json:"proxyEnabled,omitempty" tf:"proxy_enabled"`

	// +kubebuilder:validation:Optional
	Servers []string `json:"servers,omitempty" tf:"servers"`
}

type FirewallPolicyObservation struct {
	ChildPolicies []string `json:"childPolicies,omitempty" tf:"child_policies"`

	Firewalls []string `json:"firewalls,omitempty" tf:"firewalls"`

	RuleCollectionGroups []string `json:"ruleCollectionGroups,omitempty" tf:"rule_collection_groups"`
}

type FirewallPolicyParameters struct {

	// +kubebuilder:validation:Optional
	BasePolicyID *string `json:"basePolicyId,omitempty" tf:"base_policy_id"`

	// +kubebuilder:validation:Optional
	DNS []DNSParameters `json:"dns,omitempty" tf:"dns"`

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Optional
	IntrusionDetection []IntrusionDetectionParameters `json:"intrusionDetection,omitempty" tf:"intrusion_detection"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PrivateIPRanges []string `json:"privateIpRanges,omitempty" tf:"private_ip_ranges"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Sku *string `json:"sku,omitempty" tf:"sku"`

	// +kubebuilder:validation:Optional
	TLSCertificate []TLSCertificateParameters `json:"tlsCertificate,omitempty" tf:"tls_certificate"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	ThreatIntelligenceAllowlist []ThreatIntelligenceAllowlistParameters `json:"threatIntelligenceAllowlist,omitempty" tf:"threat_intelligence_allowlist"`

	// +kubebuilder:validation:Optional
	ThreatIntelligenceMode *string `json:"threatIntelligenceMode,omitempty" tf:"threat_intelligence_mode"`
}

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`

	// +kubebuilder:validation:Optional
	UserAssignedIdentityIds []string `json:"userAssignedIdentityIds,omitempty" tf:"user_assigned_identity_ids"`
}

type IntrusionDetectionObservation struct {
}

type IntrusionDetectionParameters struct {

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode"`

	// +kubebuilder:validation:Optional
	SignatureOverrides []SignatureOverridesParameters `json:"signatureOverrides,omitempty" tf:"signature_overrides"`

	// +kubebuilder:validation:Optional
	TrafficBypass []TrafficBypassParameters `json:"trafficBypass,omitempty" tf:"traffic_bypass"`
}

type SignatureOverridesObservation struct {
}

type SignatureOverridesParameters struct {

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state"`
}

type TLSCertificateObservation struct {
}

type TLSCertificateParameters struct {

	// +kubebuilder:validation:Required
	KeyVaultSecretID string `json:"keyVaultSecretId" tf:"key_vault_secret_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`
}

type ThreatIntelligenceAllowlistObservation struct {
}

type ThreatIntelligenceAllowlistParameters struct {

	// +kubebuilder:validation:Optional
	Fqdns []string `json:"fqdns,omitempty" tf:"fqdns"`

	// +kubebuilder:validation:Optional
	IPAddresses []string `json:"ipAddresses,omitempty" tf:"ip_addresses"`
}

type TrafficBypassObservation struct {
}

type TrafficBypassParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	DestinationAddresses []string `json:"destinationAddresses,omitempty" tf:"destination_addresses"`

	// +kubebuilder:validation:Optional
	DestinationIPGroups []string `json:"destinationIpGroups,omitempty" tf:"destination_ip_groups"`

	// +kubebuilder:validation:Optional
	DestinationPorts []string `json:"destinationPorts,omitempty" tf:"destination_ports"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Protocol string `json:"protocol" tf:"protocol"`

	// +kubebuilder:validation:Optional
	SourceAddresses []string `json:"sourceAddresses,omitempty" tf:"source_addresses"`

	// +kubebuilder:validation:Optional
	SourceIPGroups []string `json:"sourceIpGroups,omitempty" tf:"source_ip_groups"`
}

// FirewallPolicySpec defines the desired state of FirewallPolicy
type FirewallPolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       FirewallPolicyParameters `json:"forProvider"`
}

// FirewallPolicyStatus defines the observed state of FirewallPolicy.
type FirewallPolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          FirewallPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallPolicy is the Schema for the FirewallPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type FirewallPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FirewallPolicySpec   `json:"spec"`
	Status            FirewallPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallPolicyList contains a list of FirewallPolicys
type FirewallPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FirewallPolicy `json:"items"`
}

// Repository type metadata.
var (
	FirewallPolicyKind             = "FirewallPolicy"
	FirewallPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: FirewallPolicyKind}.String()
	FirewallPolicyKindAPIVersion   = FirewallPolicyKind + "." + GroupVersion.String()
	FirewallPolicyGroupVersionKind = GroupVersion.WithKind(FirewallPolicyKind)
)

func init() {
	SchemeBuilder.Register(&FirewallPolicy{}, &FirewallPolicyList{})
}
