/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BlueprintAssignmentObservation struct {
	BlueprintName string `json:"blueprintName,omitempty" tf:"blueprint_name"`

	Description string `json:"description,omitempty" tf:"description"`

	DisplayName string `json:"displayName,omitempty" tf:"display_name"`

	Type string `json:"type,omitempty" tf:"type"`
}

type BlueprintAssignmentParameters struct {

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Optional
	LockExcludePrincipals []string `json:"lockExcludePrincipals,omitempty" tf:"lock_exclude_principals"`

	// +kubebuilder:validation:Optional
	LockMode *string `json:"lockMode,omitempty" tf:"lock_mode"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	ParameterValues *string `json:"parameterValues,omitempty" tf:"parameter_values"`

	// +kubebuilder:validation:Optional
	ResourceGroups *string `json:"resourceGroups,omitempty" tf:"resource_groups"`

	// +kubebuilder:validation:Required
	TargetSubscriptionID string `json:"targetSubscriptionId" tf:"target_subscription_id"`

	// +kubebuilder:validation:Required
	VersionID string `json:"versionId" tf:"version_id"`
}

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Required
	IdentityIds []string `json:"identityIds" tf:"identity_ids"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

// BlueprintAssignmentSpec defines the desired state of BlueprintAssignment
type BlueprintAssignmentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BlueprintAssignmentParameters `json:"forProvider"`
}

// BlueprintAssignmentStatus defines the observed state of BlueprintAssignment.
type BlueprintAssignmentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BlueprintAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BlueprintAssignment is the Schema for the BlueprintAssignments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type BlueprintAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BlueprintAssignmentSpec   `json:"spec"`
	Status            BlueprintAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BlueprintAssignmentList contains a list of BlueprintAssignments
type BlueprintAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BlueprintAssignment `json:"items"`
}

// Repository type metadata.
var (
	BlueprintAssignmentKind             = "BlueprintAssignment"
	BlueprintAssignmentGroupKind        = schema.GroupKind{Group: Group, Kind: BlueprintAssignmentKind}.String()
	BlueprintAssignmentKindAPIVersion   = BlueprintAssignmentKind + "." + GroupVersion.String()
	BlueprintAssignmentGroupVersionKind = GroupVersion.WithKind(BlueprintAssignmentKind)
)

func init() {
	SchemeBuilder.Register(&BlueprintAssignment{}, &BlueprintAssignmentList{})
}
