/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MachineLearningWorkspaceIdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type MachineLearningWorkspaceIdentityParameters struct {

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type MachineLearningWorkspaceObservation struct {
}

type MachineLearningWorkspaceParameters struct {

	// +kubebuilder:validation:Required
	ApplicationInsightsID string `json:"applicationInsightsId" tf:"application_insights_id"`

	// +kubebuilder:validation:Optional
	ContainerRegistryID *string `json:"containerRegistryId,omitempty" tf:"container_registry_id"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name"`

	// +kubebuilder:validation:Optional
	HighBusinessImpact *bool `json:"highBusinessImpact,omitempty" tf:"high_business_impact"`

	// +kubebuilder:validation:Required
	Identity []MachineLearningWorkspaceIdentityParameters `json:"identity" tf:"identity"`

	// +kubebuilder:validation:Required
	KeyVaultID string `json:"keyVaultId" tf:"key_vault_id"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	SkuName *string `json:"skuName,omitempty" tf:"sku_name"`

	// +kubebuilder:validation:Required
	StorageAccountID string `json:"storageAccountId" tf:"storage_account_id"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// MachineLearningWorkspaceSpec defines the desired state of MachineLearningWorkspace
type MachineLearningWorkspaceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MachineLearningWorkspaceParameters `json:"forProvider"`
}

// MachineLearningWorkspaceStatus defines the observed state of MachineLearningWorkspace.
type MachineLearningWorkspaceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MachineLearningWorkspaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MachineLearningWorkspace is the Schema for the MachineLearningWorkspaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MachineLearningWorkspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MachineLearningWorkspaceSpec   `json:"spec"`
	Status            MachineLearningWorkspaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MachineLearningWorkspaceList contains a list of MachineLearningWorkspaces
type MachineLearningWorkspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MachineLearningWorkspace `json:"items"`
}

// Repository type metadata.
var (
	MachineLearningWorkspaceKind             = "MachineLearningWorkspace"
	MachineLearningWorkspaceGroupKind        = schema.GroupKind{Group: Group, Kind: MachineLearningWorkspaceKind}.String()
	MachineLearningWorkspaceKindAPIVersion   = MachineLearningWorkspaceKind + "." + GroupVersion.String()
	MachineLearningWorkspaceGroupVersionKind = GroupVersion.WithKind(MachineLearningWorkspaceKind)
)

func init() {
	SchemeBuilder.Register(&MachineLearningWorkspace{}, &MachineLearningWorkspaceList{})
}
