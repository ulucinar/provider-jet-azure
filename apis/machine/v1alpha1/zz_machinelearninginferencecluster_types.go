/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type MachineLearningInferenceClusterObservation struct {
}

type MachineLearningInferenceClusterParameters struct {

	// +kubebuilder:validation:Optional
	ClusterPurpose *string `json:"clusterPurpose,omitempty" tf:"cluster_purpose"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	KubernetesClusterID string `json:"kubernetesClusterId" tf:"kubernetes_cluster_id"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	MachineLearningWorkspaceID string `json:"machineLearningWorkspaceId" tf:"machine_learning_workspace_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Ssl []SslParameters `json:"ssl,omitempty" tf:"ssl"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type SslObservation struct {
}

type SslParameters struct {

	// +kubebuilder:validation:Optional
	Cert *string `json:"cert,omitempty" tf:"cert"`

	// +kubebuilder:validation:Optional
	Cname *string `json:"cname,omitempty" tf:"cname"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key"`

	// +kubebuilder:validation:Optional
	LeafDomainLabel *string `json:"leafDomainLabel,omitempty" tf:"leaf_domain_label"`

	// +kubebuilder:validation:Optional
	OverwriteExistingDomain *bool `json:"overwriteExistingDomain,omitempty" tf:"overwrite_existing_domain"`
}

// MachineLearningInferenceClusterSpec defines the desired state of MachineLearningInferenceCluster
type MachineLearningInferenceClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MachineLearningInferenceClusterParameters `json:"forProvider"`
}

// MachineLearningInferenceClusterStatus defines the observed state of MachineLearningInferenceCluster.
type MachineLearningInferenceClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MachineLearningInferenceClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MachineLearningInferenceCluster is the Schema for the MachineLearningInferenceClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MachineLearningInferenceCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MachineLearningInferenceClusterSpec   `json:"spec"`
	Status            MachineLearningInferenceClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MachineLearningInferenceClusterList contains a list of MachineLearningInferenceClusters
type MachineLearningInferenceClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MachineLearningInferenceCluster `json:"items"`
}

// Repository type metadata.
var (
	MachineLearningInferenceClusterKind             = "MachineLearningInferenceCluster"
	MachineLearningInferenceClusterGroupKind        = schema.GroupKind{Group: Group, Kind: MachineLearningInferenceClusterKind}.String()
	MachineLearningInferenceClusterKindAPIVersion   = MachineLearningInferenceClusterKind + "." + GroupVersion.String()
	MachineLearningInferenceClusterGroupVersionKind = GroupVersion.WithKind(MachineLearningInferenceClusterKind)
)

func init() {
	SchemeBuilder.Register(&MachineLearningInferenceCluster{}, &MachineLearningInferenceClusterList{})
}
