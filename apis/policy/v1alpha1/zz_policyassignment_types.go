/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IdentityObservation struct {
	PrincipalID string `json:"principalId,omitempty" tf:"principal_id"`

	TenantID string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type PolicyAssignmentObservation struct {
}

type PolicyAssignmentParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`

	// +kubebuilder:validation:Optional
	EnforcementMode *bool `json:"enforcementMode,omitempty" tf:"enforcement_mode"`

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location"`

	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	NotScopes []string `json:"notScopes,omitempty" tf:"not_scopes"`

	// +kubebuilder:validation:Optional
	Parameters *string `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	PolicyDefinitionID string `json:"policyDefinitionId" tf:"policy_definition_id"`

	// +kubebuilder:validation:Required
	Scope string `json:"scope" tf:"scope"`
}

// PolicyAssignmentSpec defines the desired state of PolicyAssignment
type PolicyAssignmentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PolicyAssignmentParameters `json:"forProvider"`
}

// PolicyAssignmentStatus defines the observed state of PolicyAssignment.
type PolicyAssignmentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PolicyAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyAssignment is the Schema for the PolicyAssignments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PolicyAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyAssignmentSpec   `json:"spec"`
	Status            PolicyAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyAssignmentList contains a list of PolicyAssignments
type PolicyAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyAssignment `json:"items"`
}

// Repository type metadata.
var (
	PolicyAssignmentKind             = "PolicyAssignment"
	PolicyAssignmentGroupKind        = schema.GroupKind{Group: Group, Kind: PolicyAssignmentKind}.String()
	PolicyAssignmentKindAPIVersion   = PolicyAssignmentKind + "." + GroupVersion.String()
	PolicyAssignmentGroupVersionKind = GroupVersion.WithKind(PolicyAssignmentKind)
)

func init() {
	SchemeBuilder.Register(&PolicyAssignment{}, &PolicyAssignmentList{})
}
