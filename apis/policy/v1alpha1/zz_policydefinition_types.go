/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type PolicyDefinitionObservation struct {
}

type PolicyDefinitionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	DisplayName string `json:"displayName" tf:"display_name"`

	// +kubebuilder:validation:Optional
	ManagementGroupID *string `json:"managementGroupId,omitempty" tf:"management_group_id"`

	// +kubebuilder:validation:Optional
	ManagementGroupName *string `json:"managementGroupName,omitempty" tf:"management_group_name"`

	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata"`

	// +kubebuilder:validation:Required
	Mode string `json:"mode" tf:"mode"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameters *string `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Optional
	PolicyRule *string `json:"policyRule,omitempty" tf:"policy_rule"`

	// +kubebuilder:validation:Required
	PolicyType string `json:"policyType" tf:"policy_type"`
}

// PolicyDefinitionSpec defines the desired state of PolicyDefinition
type PolicyDefinitionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PolicyDefinitionParameters `json:"forProvider"`
}

// PolicyDefinitionStatus defines the observed state of PolicyDefinition.
type PolicyDefinitionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PolicyDefinitionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyDefinition is the Schema for the PolicyDefinitions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PolicyDefinition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyDefinitionSpec   `json:"spec"`
	Status            PolicyDefinitionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyDefinitionList contains a list of PolicyDefinitions
type PolicyDefinitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyDefinition `json:"items"`
}

// Repository type metadata.
var (
	PolicyDefinitionKind             = "PolicyDefinition"
	PolicyDefinitionGroupKind        = schema.GroupKind{Group: Group, Kind: PolicyDefinitionKind}.String()
	PolicyDefinitionKindAPIVersion   = PolicyDefinitionKind + "." + GroupVersion.String()
	PolicyDefinitionGroupVersionKind = GroupVersion.WithKind(PolicyDefinitionKind)
)

func init() {
	SchemeBuilder.Register(&PolicyDefinition{}, &PolicyDefinitionList{})
}
