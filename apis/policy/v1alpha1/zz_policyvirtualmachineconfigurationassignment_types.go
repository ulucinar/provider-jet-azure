/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ConfigurationObservation struct {
}

type ConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Parameter []ParameterParameters `json:"parameter,omitempty" tf:"parameter"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type ParameterObservation struct {
}

type ParameterParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Value string `json:"value" tf:"value"`
}

type PolicyVirtualMachineConfigurationAssignmentObservation struct {
}

type PolicyVirtualMachineConfigurationAssignmentParameters struct {

	// +kubebuilder:validation:Required
	Configuration []ConfigurationParameters `json:"configuration" tf:"configuration"`

	// +kubebuilder:validation:Required
	Location string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	VirtualMachineID string `json:"virtualMachineId" tf:"virtual_machine_id"`
}

// PolicyVirtualMachineConfigurationAssignmentSpec defines the desired state of PolicyVirtualMachineConfigurationAssignment
type PolicyVirtualMachineConfigurationAssignmentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PolicyVirtualMachineConfigurationAssignmentParameters `json:"forProvider"`
}

// PolicyVirtualMachineConfigurationAssignmentStatus defines the observed state of PolicyVirtualMachineConfigurationAssignment.
type PolicyVirtualMachineConfigurationAssignmentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PolicyVirtualMachineConfigurationAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyVirtualMachineConfigurationAssignment is the Schema for the PolicyVirtualMachineConfigurationAssignments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PolicyVirtualMachineConfigurationAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyVirtualMachineConfigurationAssignmentSpec   `json:"spec"`
	Status            PolicyVirtualMachineConfigurationAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyVirtualMachineConfigurationAssignmentList contains a list of PolicyVirtualMachineConfigurationAssignments
type PolicyVirtualMachineConfigurationAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyVirtualMachineConfigurationAssignment `json:"items"`
}

// Repository type metadata.
var (
	PolicyVirtualMachineConfigurationAssignmentKind             = "PolicyVirtualMachineConfigurationAssignment"
	PolicyVirtualMachineConfigurationAssignmentGroupKind        = schema.GroupKind{Group: Group, Kind: PolicyVirtualMachineConfigurationAssignmentKind}.String()
	PolicyVirtualMachineConfigurationAssignmentKindAPIVersion   = PolicyVirtualMachineConfigurationAssignmentKind + "." + GroupVersion.String()
	PolicyVirtualMachineConfigurationAssignmentGroupVersionKind = GroupVersion.WithKind(PolicyVirtualMachineConfigurationAssignmentKind)
)

func init() {
	SchemeBuilder.Register(&PolicyVirtualMachineConfigurationAssignment{}, &PolicyVirtualMachineConfigurationAssignmentList{})
}
