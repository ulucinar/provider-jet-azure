/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CustomRuleObservation struct {
}

type CustomRuleParameters struct {

	// +kubebuilder:validation:Required
	Action string `json:"action" tf:"action"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	MatchCondition []MatchConditionParameters `json:"matchCondition,omitempty" tf:"match_condition"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Priority *int64 `json:"priority,omitempty" tf:"priority"`

	// +kubebuilder:validation:Optional
	RateLimitDurationInMinutes *int64 `json:"rateLimitDurationInMinutes,omitempty" tf:"rate_limit_duration_in_minutes"`

	// +kubebuilder:validation:Optional
	RateLimitThreshold *int64 `json:"rateLimitThreshold,omitempty" tf:"rate_limit_threshold"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type ExclusionObservation struct {
}

type ExclusionParameters struct {

	// +kubebuilder:validation:Required
	MatchVariable string `json:"matchVariable" tf:"match_variable"`

	// +kubebuilder:validation:Required
	Operator string `json:"operator" tf:"operator"`

	// +kubebuilder:validation:Required
	Selector string `json:"selector" tf:"selector"`
}

type FrontdoorFirewallPolicyObservation struct {
	FrontendEndpointIds []string `json:"frontendEndpointIds,omitempty" tf:"frontend_endpoint_ids"`

	Location string `json:"location,omitempty" tf:"location"`
}

type FrontdoorFirewallPolicyParameters struct {

	// +kubebuilder:validation:Optional
	CustomBlockResponseBody *string `json:"customBlockResponseBody,omitempty" tf:"custom_block_response_body"`

	// +kubebuilder:validation:Optional
	CustomBlockResponseStatusCode *int64 `json:"customBlockResponseStatusCode,omitempty" tf:"custom_block_response_status_code"`

	// +kubebuilder:validation:Optional
	CustomRule []CustomRuleParameters `json:"customRule,omitempty" tf:"custom_rule"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	ManagedRule []ManagedRuleParameters `json:"managedRule,omitempty" tf:"managed_rule"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	RedirectURL *string `json:"redirectUrl,omitempty" tf:"redirect_url"`

	// +kubebuilder:validation:Required
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type ManagedRuleObservation struct {
}

type ManagedRuleParameters struct {

	// +kubebuilder:validation:Optional
	Exclusion []ExclusionParameters `json:"exclusion,omitempty" tf:"exclusion"`

	// +kubebuilder:validation:Optional
	Override []OverrideParameters `json:"override,omitempty" tf:"override"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`

	// +kubebuilder:validation:Required
	Version string `json:"version" tf:"version"`
}

type MatchConditionObservation struct {
}

type MatchConditionParameters struct {

	// +kubebuilder:validation:Required
	MatchValues []string `json:"matchValues" tf:"match_values"`

	// +kubebuilder:validation:Required
	MatchVariable string `json:"matchVariable" tf:"match_variable"`

	// +kubebuilder:validation:Optional
	NegationCondition *bool `json:"negationCondition,omitempty" tf:"negation_condition"`

	// +kubebuilder:validation:Required
	Operator string `json:"operator" tf:"operator"`

	// +kubebuilder:validation:Optional
	Selector *string `json:"selector,omitempty" tf:"selector"`

	// +kubebuilder:validation:Optional
	Transforms []string `json:"transforms,omitempty" tf:"transforms"`
}

type OverrideExclusionObservation struct {
}

type OverrideExclusionParameters struct {

	// +kubebuilder:validation:Required
	MatchVariable string `json:"matchVariable" tf:"match_variable"`

	// +kubebuilder:validation:Required
	Operator string `json:"operator" tf:"operator"`

	// +kubebuilder:validation:Required
	Selector string `json:"selector" tf:"selector"`
}

type OverrideObservation struct {
}

type OverrideParameters struct {

	// +kubebuilder:validation:Optional
	Exclusion []OverrideExclusionParameters `json:"exclusion,omitempty" tf:"exclusion"`

	// +kubebuilder:validation:Optional
	Rule []RuleParameters `json:"rule,omitempty" tf:"rule"`

	// +kubebuilder:validation:Required
	RuleGroupName string `json:"ruleGroupName" tf:"rule_group_name"`
}

type RuleExclusionObservation struct {
}

type RuleExclusionParameters struct {

	// +kubebuilder:validation:Required
	MatchVariable string `json:"matchVariable" tf:"match_variable"`

	// +kubebuilder:validation:Required
	Operator string `json:"operator" tf:"operator"`

	// +kubebuilder:validation:Required
	Selector string `json:"selector" tf:"selector"`
}

type RuleObservation struct {
}

type RuleParameters struct {

	// +kubebuilder:validation:Required
	Action string `json:"action" tf:"action"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	Exclusion []RuleExclusionParameters `json:"exclusion,omitempty" tf:"exclusion"`

	// +kubebuilder:validation:Required
	RuleID string `json:"ruleId" tf:"rule_id"`
}

// FrontdoorFirewallPolicySpec defines the desired state of FrontdoorFirewallPolicy
type FrontdoorFirewallPolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       FrontdoorFirewallPolicyParameters `json:"forProvider"`
}

// FrontdoorFirewallPolicyStatus defines the observed state of FrontdoorFirewallPolicy.
type FrontdoorFirewallPolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          FrontdoorFirewallPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FrontdoorFirewallPolicy is the Schema for the FrontdoorFirewallPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type FrontdoorFirewallPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FrontdoorFirewallPolicySpec   `json:"spec"`
	Status            FrontdoorFirewallPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FrontdoorFirewallPolicyList contains a list of FrontdoorFirewallPolicys
type FrontdoorFirewallPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FrontdoorFirewallPolicy `json:"items"`
}

// Repository type metadata.
var (
	FrontdoorFirewallPolicyKind             = "FrontdoorFirewallPolicy"
	FrontdoorFirewallPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: FrontdoorFirewallPolicyKind}.String()
	FrontdoorFirewallPolicyKindAPIVersion   = FrontdoorFirewallPolicyKind + "." + GroupVersion.String()
	FrontdoorFirewallPolicyGroupVersionKind = GroupVersion.WithKind(FrontdoorFirewallPolicyKind)
)

func init() {
	SchemeBuilder.Register(&FrontdoorFirewallPolicy{}, &FrontdoorFirewallPolicyList{})
}
