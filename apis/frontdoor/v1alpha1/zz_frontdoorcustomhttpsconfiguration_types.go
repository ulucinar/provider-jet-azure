/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CustomHTTPSConfigurationObservation struct {
	MinimumTLSVersion string `json:"minimumTlsVersion,omitempty" tf:"minimum_tls_version"`

	ProvisioningState string `json:"provisioningState,omitempty" tf:"provisioning_state"`

	ProvisioningSubstate string `json:"provisioningSubstate,omitempty" tf:"provisioning_substate"`
}

type CustomHTTPSConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	AzureKeyVaultCertificateSecretName *string `json:"azureKeyVaultCertificateSecretName,omitempty" tf:"azure_key_vault_certificate_secret_name"`

	// +kubebuilder:validation:Optional
	AzureKeyVaultCertificateSecretVersion *string `json:"azureKeyVaultCertificateSecretVersion,omitempty" tf:"azure_key_vault_certificate_secret_version"`

	// +kubebuilder:validation:Optional
	AzureKeyVaultCertificateVaultID *string `json:"azureKeyVaultCertificateVaultId,omitempty" tf:"azure_key_vault_certificate_vault_id"`

	// +kubebuilder:validation:Optional
	CertificateSource *string `json:"certificateSource,omitempty" tf:"certificate_source"`
}

type FrontdoorCustomHttpsConfigurationObservation struct {
}

type FrontdoorCustomHttpsConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	CustomHTTPSConfiguration []CustomHTTPSConfigurationParameters `json:"customHttpsConfiguration,omitempty" tf:"custom_https_configuration"`

	// +kubebuilder:validation:Required
	CustomHTTPSProvisioningEnabled bool `json:"customHttpsProvisioningEnabled" tf:"custom_https_provisioning_enabled"`

	// +kubebuilder:validation:Required
	FrontendEndpointID string `json:"frontendEndpointId" tf:"frontend_endpoint_id"`
}

// FrontdoorCustomHttpsConfigurationSpec defines the desired state of FrontdoorCustomHttpsConfiguration
type FrontdoorCustomHttpsConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       FrontdoorCustomHttpsConfigurationParameters `json:"forProvider"`
}

// FrontdoorCustomHttpsConfigurationStatus defines the observed state of FrontdoorCustomHttpsConfiguration.
type FrontdoorCustomHttpsConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          FrontdoorCustomHttpsConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FrontdoorCustomHttpsConfiguration is the Schema for the FrontdoorCustomHttpsConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type FrontdoorCustomHttpsConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FrontdoorCustomHttpsConfigurationSpec   `json:"spec"`
	Status            FrontdoorCustomHttpsConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FrontdoorCustomHttpsConfigurationList contains a list of FrontdoorCustomHttpsConfigurations
type FrontdoorCustomHttpsConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FrontdoorCustomHttpsConfiguration `json:"items"`
}

// Repository type metadata.
var (
	FrontdoorCustomHttpsConfigurationKind             = "FrontdoorCustomHttpsConfiguration"
	FrontdoorCustomHttpsConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: FrontdoorCustomHttpsConfigurationKind}.String()
	FrontdoorCustomHttpsConfigurationKindAPIVersion   = FrontdoorCustomHttpsConfigurationKind + "." + GroupVersion.String()
	FrontdoorCustomHttpsConfigurationGroupVersionKind = GroupVersion.WithKind(FrontdoorCustomHttpsConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&FrontdoorCustomHttpsConfiguration{}, &FrontdoorCustomHttpsConfigurationList{})
}
